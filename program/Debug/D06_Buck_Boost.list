
D06_Buck_Boost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006034  08006034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006034  08006034  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006034  08006034  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800603c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000000c  08006048  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006048  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4e6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002428  00000000  00000000  0002d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a56  00000000  00000000  00031340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107f8  00000000  00000000  00041d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f5d  00000000  00000000  0005258e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b64eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  000b6540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f24 	.word	0x08005f24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005f24 	.word	0x08005f24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fa43 	bl	8000888 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f9c7 	bl	80007a0 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fa35 	bl	8000888 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fa2b 	bl	8000888 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f9d5 	bl	80007f0 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f9cb 	bl	80007f0 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4646      	mov	r6, r8
 800046c:	46d6      	mov	lr, sl
 800046e:	464f      	mov	r7, r9
 8000470:	024d      	lsls	r5, r1, #9
 8000472:	0242      	lsls	r2, r0, #9
 8000474:	b5c0      	push	{r6, r7, lr}
 8000476:	0a52      	lsrs	r2, r2, #9
 8000478:	0a6e      	lsrs	r6, r5, #9
 800047a:	0047      	lsls	r7, r0, #1
 800047c:	46b0      	mov	r8, r6
 800047e:	0e3f      	lsrs	r7, r7, #24
 8000480:	004e      	lsls	r6, r1, #1
 8000482:	0fc4      	lsrs	r4, r0, #31
 8000484:	00d0      	lsls	r0, r2, #3
 8000486:	4694      	mov	ip, r2
 8000488:	003b      	movs	r3, r7
 800048a:	4682      	mov	sl, r0
 800048c:	0e36      	lsrs	r6, r6, #24
 800048e:	0fc9      	lsrs	r1, r1, #31
 8000490:	09ad      	lsrs	r5, r5, #6
 8000492:	428c      	cmp	r4, r1
 8000494:	d06d      	beq.n	8000572 <__aeabi_fadd+0x10a>
 8000496:	1bb8      	subs	r0, r7, r6
 8000498:	4681      	mov	r9, r0
 800049a:	2800      	cmp	r0, #0
 800049c:	dd4d      	ble.n	800053a <__aeabi_fadd+0xd2>
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x3c>
 80004a2:	e088      	b.n	80005b6 <__aeabi_fadd+0x14e>
 80004a4:	2fff      	cmp	r7, #255	; 0xff
 80004a6:	d05a      	beq.n	800055e <__aeabi_fadd+0xf6>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	04db      	lsls	r3, r3, #19
 80004ac:	431d      	orrs	r5, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2201      	movs	r2, #1
 80004b2:	2b1b      	cmp	r3, #27
 80004b4:	dc0a      	bgt.n	80004cc <__aeabi_fadd+0x64>
 80004b6:	002b      	movs	r3, r5
 80004b8:	464a      	mov	r2, r9
 80004ba:	4649      	mov	r1, r9
 80004bc:	40d3      	lsrs	r3, r2
 80004be:	2220      	movs	r2, #32
 80004c0:	1a52      	subs	r2, r2, r1
 80004c2:	4095      	lsls	r5, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	1e55      	subs	r5, r2, #1
 80004c8:	41aa      	sbcs	r2, r5
 80004ca:	431a      	orrs	r2, r3
 80004cc:	4653      	mov	r3, sl
 80004ce:	1a9a      	subs	r2, r3, r2
 80004d0:	0153      	lsls	r3, r2, #5
 80004d2:	d400      	bmi.n	80004d6 <__aeabi_fadd+0x6e>
 80004d4:	e0b9      	b.n	800064a <__aeabi_fadd+0x1e2>
 80004d6:	0192      	lsls	r2, r2, #6
 80004d8:	0996      	lsrs	r6, r2, #6
 80004da:	0030      	movs	r0, r6
 80004dc:	f001 fb72 	bl	8001bc4 <__clzsi2>
 80004e0:	3805      	subs	r0, #5
 80004e2:	4086      	lsls	r6, r0
 80004e4:	4287      	cmp	r7, r0
 80004e6:	dd00      	ble.n	80004ea <__aeabi_fadd+0x82>
 80004e8:	e0d4      	b.n	8000694 <__aeabi_fadd+0x22c>
 80004ea:	0033      	movs	r3, r6
 80004ec:	1bc7      	subs	r7, r0, r7
 80004ee:	2020      	movs	r0, #32
 80004f0:	3701      	adds	r7, #1
 80004f2:	40fb      	lsrs	r3, r7
 80004f4:	1bc7      	subs	r7, r0, r7
 80004f6:	40be      	lsls	r6, r7
 80004f8:	0032      	movs	r2, r6
 80004fa:	1e56      	subs	r6, r2, #1
 80004fc:	41b2      	sbcs	r2, r6
 80004fe:	2700      	movs	r7, #0
 8000500:	431a      	orrs	r2, r3
 8000502:	0753      	lsls	r3, r2, #29
 8000504:	d004      	beq.n	8000510 <__aeabi_fadd+0xa8>
 8000506:	230f      	movs	r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	2b04      	cmp	r3, #4
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0xa8>
 800050e:	3204      	adds	r2, #4
 8000510:	0153      	lsls	r3, r2, #5
 8000512:	d400      	bmi.n	8000516 <__aeabi_fadd+0xae>
 8000514:	e09c      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000516:	1c7b      	adds	r3, r7, #1
 8000518:	2ffe      	cmp	r7, #254	; 0xfe
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0xb6>
 800051c:	e09a      	b.n	8000654 <__aeabi_fadd+0x1ec>
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	0a52      	lsrs	r2, r2, #9
 8000522:	4694      	mov	ip, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	05d8      	lsls	r0, r3, #23
 8000528:	4663      	mov	r3, ip
 800052a:	07e4      	lsls	r4, r4, #31
 800052c:	4318      	orrs	r0, r3
 800052e:	4320      	orrs	r0, r4
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	2800      	cmp	r0, #0
 800053c:	d049      	beq.n	80005d2 <__aeabi_fadd+0x16a>
 800053e:	1bf3      	subs	r3, r6, r7
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0xde>
 8000544:	e0b6      	b.n	80006b4 <__aeabi_fadd+0x24c>
 8000546:	4652      	mov	r2, sl
 8000548:	2a00      	cmp	r2, #0
 800054a:	d060      	beq.n	800060e <__aeabi_fadd+0x1a6>
 800054c:	3b01      	subs	r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0xec>
 8000552:	e0fc      	b.n	800074e <__aeabi_fadd+0x2e6>
 8000554:	2eff      	cmp	r6, #255	; 0xff
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0xf2>
 8000558:	e0b4      	b.n	80006c4 <__aeabi_fadd+0x25c>
 800055a:	000c      	movs	r4, r1
 800055c:	4642      	mov	r2, r8
 800055e:	2a00      	cmp	r2, #0
 8000560:	d078      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 8000562:	2080      	movs	r0, #128	; 0x80
 8000564:	03c0      	lsls	r0, r0, #15
 8000566:	4310      	orrs	r0, r2
 8000568:	0242      	lsls	r2, r0, #9
 800056a:	0a53      	lsrs	r3, r2, #9
 800056c:	469c      	mov	ip, r3
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	e7d9      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000572:	1bb9      	subs	r1, r7, r6
 8000574:	2900      	cmp	r1, #0
 8000576:	dd71      	ble.n	800065c <__aeabi_fadd+0x1f4>
 8000578:	2e00      	cmp	r6, #0
 800057a:	d03f      	beq.n	80005fc <__aeabi_fadd+0x194>
 800057c:	2fff      	cmp	r7, #255	; 0xff
 800057e:	d0ee      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	04db      	lsls	r3, r3, #19
 8000584:	431d      	orrs	r5, r3
 8000586:	2201      	movs	r2, #1
 8000588:	291b      	cmp	r1, #27
 800058a:	dc07      	bgt.n	800059c <__aeabi_fadd+0x134>
 800058c:	002a      	movs	r2, r5
 800058e:	2320      	movs	r3, #32
 8000590:	40ca      	lsrs	r2, r1
 8000592:	1a59      	subs	r1, r3, r1
 8000594:	408d      	lsls	r5, r1
 8000596:	1e6b      	subs	r3, r5, #1
 8000598:	419d      	sbcs	r5, r3
 800059a:	432a      	orrs	r2, r5
 800059c:	4452      	add	r2, sl
 800059e:	0153      	lsls	r3, r2, #5
 80005a0:	d553      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 80005a2:	3701      	adds	r7, #1
 80005a4:	2fff      	cmp	r7, #255	; 0xff
 80005a6:	d055      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80005a8:	2301      	movs	r3, #1
 80005aa:	497b      	ldr	r1, [pc, #492]	; (8000798 <__aeabi_fadd+0x330>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	0852      	lsrs	r2, r2, #1
 80005b0:	400a      	ands	r2, r1
 80005b2:	431a      	orrs	r2, r3
 80005b4:	e7a5      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d02c      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 80005ba:	2301      	movs	r3, #1
 80005bc:	425b      	negs	r3, r3
 80005be:	469c      	mov	ip, r3
 80005c0:	44e1      	add	r9, ip
 80005c2:	464b      	mov	r3, r9
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x162>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x2be>
 80005ca:	2fff      	cmp	r7, #255	; 0xff
 80005cc:	d000      	beq.n	80005d0 <__aeabi_fadd+0x168>
 80005ce:	e76e      	b.n	80004ae <__aeabi_fadd+0x46>
 80005d0:	e7c5      	b.n	800055e <__aeabi_fadd+0xf6>
 80005d2:	20fe      	movs	r0, #254	; 0xfe
 80005d4:	1c7e      	adds	r6, r7, #1
 80005d6:	4230      	tst	r0, r6
 80005d8:	d160      	bne.n	800069c <__aeabi_fadd+0x234>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fadd+0x178>
 80005de:	e093      	b.n	8000708 <__aeabi_fadd+0x2a0>
 80005e0:	4652      	mov	r2, sl
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x180>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_fadd+0x2ee>
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d09c      	beq.n	8000526 <__aeabi_fadd+0xbe>
 80005ec:	1b52      	subs	r2, r2, r5
 80005ee:	0150      	lsls	r0, r2, #5
 80005f0:	d400      	bmi.n	80005f4 <__aeabi_fadd+0x18c>
 80005f2:	e0c3      	b.n	800077c <__aeabi_fadd+0x314>
 80005f4:	4653      	mov	r3, sl
 80005f6:	000c      	movs	r4, r1
 80005f8:	1aea      	subs	r2, r5, r3
 80005fa:	e782      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d009      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 8000600:	3901      	subs	r1, #1
 8000602:	2900      	cmp	r1, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_fadd+0x1a0>
 8000606:	e08b      	b.n	8000720 <__aeabi_fadd+0x2b8>
 8000608:	2fff      	cmp	r7, #255	; 0xff
 800060a:	d1bc      	bne.n	8000586 <__aeabi_fadd+0x11e>
 800060c:	e7a7      	b.n	800055e <__aeabi_fadd+0xf6>
 800060e:	000c      	movs	r4, r1
 8000610:	4642      	mov	r2, r8
 8000612:	0037      	movs	r7, r6
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0a2      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	0a53      	lsrs	r3, r2, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2fb      	uxtb	r3, r7
 8000620:	e781      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000622:	21fe      	movs	r1, #254	; 0xfe
 8000624:	3701      	adds	r7, #1
 8000626:	4239      	tst	r1, r7
 8000628:	d165      	bne.n	80006f6 <__aeabi_fadd+0x28e>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d17e      	bne.n	800072c <__aeabi_fadd+0x2c4>
 800062e:	2800      	cmp	r0, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e0aa      	b.n	800078a <__aeabi_fadd+0x322>
 8000634:	2d00      	cmp	r5, #0
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0x1d2>
 8000638:	e775      	b.n	8000526 <__aeabi_fadd+0xbe>
 800063a:	002a      	movs	r2, r5
 800063c:	4452      	add	r2, sl
 800063e:	2700      	movs	r7, #0
 8000640:	0153      	lsls	r3, r2, #5
 8000642:	d502      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <__aeabi_fadd+0x334>)
 8000646:	3701      	adds	r7, #1
 8000648:	401a      	ands	r2, r3
 800064a:	0753      	lsls	r3, r2, #29
 800064c:	d000      	beq.n	8000650 <__aeabi_fadd+0x1e8>
 800064e:	e75a      	b.n	8000506 <__aeabi_fadd+0x9e>
 8000650:	08d2      	lsrs	r2, r2, #3
 8000652:	e7df      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000654:	2200      	movs	r2, #0
 8000656:	23ff      	movs	r3, #255	; 0xff
 8000658:	4694      	mov	ip, r2
 800065a:	e764      	b.n	8000526 <__aeabi_fadd+0xbe>
 800065c:	2900      	cmp	r1, #0
 800065e:	d0e0      	beq.n	8000622 <__aeabi_fadd+0x1ba>
 8000660:	1bf3      	subs	r3, r6, r7
 8000662:	2f00      	cmp	r7, #0
 8000664:	d03e      	beq.n	80006e4 <__aeabi_fadd+0x27c>
 8000666:	2eff      	cmp	r6, #255	; 0xff
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x204>
 800066a:	e777      	b.n	800055c <__aeabi_fadd+0xf4>
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0001      	movs	r1, r0
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	4311      	orrs	r1, r2
 8000674:	468a      	mov	sl, r1
 8000676:	2201      	movs	r2, #1
 8000678:	2b1b      	cmp	r3, #27
 800067a:	dc08      	bgt.n	800068e <__aeabi_fadd+0x226>
 800067c:	4652      	mov	r2, sl
 800067e:	2120      	movs	r1, #32
 8000680:	4650      	mov	r0, sl
 8000682:	40da      	lsrs	r2, r3
 8000684:	1acb      	subs	r3, r1, r3
 8000686:	4098      	lsls	r0, r3
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	4302      	orrs	r2, r0
 800068e:	0037      	movs	r7, r6
 8000690:	1952      	adds	r2, r2, r5
 8000692:	e784      	b.n	800059e <__aeabi_fadd+0x136>
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <__aeabi_fadd+0x334>)
 8000696:	1a3f      	subs	r7, r7, r0
 8000698:	4032      	ands	r2, r6
 800069a:	e732      	b.n	8000502 <__aeabi_fadd+0x9a>
 800069c:	4653      	mov	r3, sl
 800069e:	1b5e      	subs	r6, r3, r5
 80006a0:	0173      	lsls	r3, r6, #5
 80006a2:	d42d      	bmi.n	8000700 <__aeabi_fadd+0x298>
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x242>
 80006a8:	e717      	b.n	80004da <__aeabi_fadd+0x72>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2400      	movs	r4, #0
 80006ae:	2300      	movs	r3, #0
 80006b0:	4694      	mov	ip, r2
 80006b2:	e738      	b.n	8000526 <__aeabi_fadd+0xbe>
 80006b4:	2eff      	cmp	r6, #255	; 0xff
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x252>
 80006b8:	e74f      	b.n	800055a <__aeabi_fadd+0xf2>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4650      	mov	r0, sl
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4310      	orrs	r0, r2
 80006c2:	4682      	mov	sl, r0
 80006c4:	2201      	movs	r2, #1
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dc08      	bgt.n	80006dc <__aeabi_fadd+0x274>
 80006ca:	4652      	mov	r2, sl
 80006cc:	2420      	movs	r4, #32
 80006ce:	4650      	mov	r0, sl
 80006d0:	40da      	lsrs	r2, r3
 80006d2:	1ae3      	subs	r3, r4, r3
 80006d4:	4098      	lsls	r0, r3
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	4302      	orrs	r2, r0
 80006dc:	000c      	movs	r4, r1
 80006de:	0037      	movs	r7, r6
 80006e0:	1aaa      	subs	r2, r5, r2
 80006e2:	e6f5      	b.n	80004d0 <__aeabi_fadd+0x68>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d093      	beq.n	8000610 <__aeabi_fadd+0x1a8>
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d04f      	beq.n	800078e <__aeabi_fadd+0x326>
 80006ee:	2eff      	cmp	r6, #255	; 0xff
 80006f0:	d1c1      	bne.n	8000676 <__aeabi_fadd+0x20e>
 80006f2:	4642      	mov	r2, r8
 80006f4:	e733      	b.n	800055e <__aeabi_fadd+0xf6>
 80006f6:	2fff      	cmp	r7, #255	; 0xff
 80006f8:	d0ac      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80006fa:	4455      	add	r5, sl
 80006fc:	086a      	lsrs	r2, r5, #1
 80006fe:	e7a4      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000700:	4653      	mov	r3, sl
 8000702:	000c      	movs	r4, r1
 8000704:	1aee      	subs	r6, r5, r3
 8000706:	e6e8      	b.n	80004da <__aeabi_fadd+0x72>
 8000708:	4653      	mov	r3, sl
 800070a:	2b00      	cmp	r3, #0
 800070c:	d128      	bne.n	8000760 <__aeabi_fadd+0x2f8>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x2ac>
 8000712:	e722      	b.n	800055a <__aeabi_fadd+0xf2>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	03db      	lsls	r3, r3, #15
 8000718:	469c      	mov	ip, r3
 800071a:	2400      	movs	r4, #0
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	e702      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000720:	002a      	movs	r2, r5
 8000722:	4452      	add	r2, sl
 8000724:	e73b      	b.n	800059e <__aeabi_fadd+0x136>
 8000726:	4653      	mov	r3, sl
 8000728:	1b5a      	subs	r2, r3, r5
 800072a:	e6d1      	b.n	80004d0 <__aeabi_fadd+0x68>
 800072c:	2800      	cmp	r0, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x2ca>
 8000730:	e714      	b.n	800055c <__aeabi_fadd+0xf4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x2d0>
 8000736:	e712      	b.n	800055e <__aeabi_fadd+0xf6>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	421a      	tst	r2, r3
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2da>
 8000740:	e70d      	b.n	800055e <__aeabi_fadd+0xf6>
 8000742:	4641      	mov	r1, r8
 8000744:	4219      	tst	r1, r3
 8000746:	d000      	beq.n	800074a <__aeabi_fadd+0x2e2>
 8000748:	e709      	b.n	800055e <__aeabi_fadd+0xf6>
 800074a:	4642      	mov	r2, r8
 800074c:	e707      	b.n	800055e <__aeabi_fadd+0xf6>
 800074e:	000c      	movs	r4, r1
 8000750:	0037      	movs	r7, r6
 8000752:	1aaa      	subs	r2, r5, r2
 8000754:	e6bc      	b.n	80004d0 <__aeabi_fadd+0x68>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d013      	beq.n	8000782 <__aeabi_fadd+0x31a>
 800075a:	000c      	movs	r4, r1
 800075c:	46c4      	mov	ip, r8
 800075e:	e6e2      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2fe>
 8000764:	e6fb      	b.n	800055e <__aeabi_fadd+0xf6>
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	03db      	lsls	r3, r3, #15
 800076a:	421a      	tst	r2, r3
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x308>
 800076e:	e6f6      	b.n	800055e <__aeabi_fadd+0xf6>
 8000770:	4640      	mov	r0, r8
 8000772:	4218      	tst	r0, r3
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000776:	e6f2      	b.n	800055e <__aeabi_fadd+0xf6>
 8000778:	000c      	movs	r4, r1
 800077a:	e6ef      	b.n	800055c <__aeabi_fadd+0xf4>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x31a>
 8000780:	e763      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000782:	2200      	movs	r2, #0
 8000784:	2400      	movs	r4, #0
 8000786:	4694      	mov	ip, r2
 8000788:	e6cd      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078a:	46c4      	mov	ip, r8
 800078c:	e6cb      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078e:	002a      	movs	r2, r5
 8000790:	0037      	movs	r7, r6
 8000792:	4452      	add	r2, sl
 8000794:	e703      	b.n	800059e <__aeabi_fadd+0x136>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	7dffffff 	.word	0x7dffffff
 800079c:	fbffffff 	.word	0xfbffffff

080007a0 <__eqsf2>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	0042      	lsls	r2, r0, #1
 80007a4:	024e      	lsls	r6, r1, #9
 80007a6:	004c      	lsls	r4, r1, #1
 80007a8:	0245      	lsls	r5, r0, #9
 80007aa:	0a6d      	lsrs	r5, r5, #9
 80007ac:	0e12      	lsrs	r2, r2, #24
 80007ae:	0fc3      	lsrs	r3, r0, #31
 80007b0:	0a76      	lsrs	r6, r6, #9
 80007b2:	0e24      	lsrs	r4, r4, #24
 80007b4:	0fc9      	lsrs	r1, r1, #31
 80007b6:	2aff      	cmp	r2, #255	; 0xff
 80007b8:	d00f      	beq.n	80007da <__eqsf2+0x3a>
 80007ba:	2cff      	cmp	r4, #255	; 0xff
 80007bc:	d011      	beq.n	80007e2 <__eqsf2+0x42>
 80007be:	2001      	movs	r0, #1
 80007c0:	42a2      	cmp	r2, r4
 80007c2:	d000      	beq.n	80007c6 <__eqsf2+0x26>
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	42b5      	cmp	r5, r6
 80007c8:	d1fc      	bne.n	80007c4 <__eqsf2+0x24>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d00d      	beq.n	80007ea <__eqsf2+0x4a>
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d1f8      	bne.n	80007c4 <__eqsf2+0x24>
 80007d2:	0028      	movs	r0, r5
 80007d4:	1e45      	subs	r5, r0, #1
 80007d6:	41a8      	sbcs	r0, r5
 80007d8:	e7f4      	b.n	80007c4 <__eqsf2+0x24>
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d1f1      	bne.n	80007c4 <__eqsf2+0x24>
 80007e0:	e7eb      	b.n	80007ba <__eqsf2+0x1a>
 80007e2:	2001      	movs	r0, #1
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	d1ed      	bne.n	80007c4 <__eqsf2+0x24>
 80007e8:	e7e9      	b.n	80007be <__eqsf2+0x1e>
 80007ea:	2000      	movs	r0, #0
 80007ec:	e7ea      	b.n	80007c4 <__eqsf2+0x24>
 80007ee:	46c0      	nop			; (mov r8, r8)

080007f0 <__gesf2>:
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	0042      	lsls	r2, r0, #1
 80007f4:	0246      	lsls	r6, r0, #9
 80007f6:	024d      	lsls	r5, r1, #9
 80007f8:	004c      	lsls	r4, r1, #1
 80007fa:	0fc3      	lsrs	r3, r0, #31
 80007fc:	0a76      	lsrs	r6, r6, #9
 80007fe:	0e12      	lsrs	r2, r2, #24
 8000800:	0a6d      	lsrs	r5, r5, #9
 8000802:	0e24      	lsrs	r4, r4, #24
 8000804:	0fc8      	lsrs	r0, r1, #31
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d01f      	beq.n	800084a <__gesf2+0x5a>
 800080a:	2cff      	cmp	r4, #255	; 0xff
 800080c:	d010      	beq.n	8000830 <__gesf2+0x40>
 800080e:	2a00      	cmp	r2, #0
 8000810:	d11f      	bne.n	8000852 <__gesf2+0x62>
 8000812:	4271      	negs	r1, r6
 8000814:	4171      	adcs	r1, r6
 8000816:	2c00      	cmp	r4, #0
 8000818:	d101      	bne.n	800081e <__gesf2+0x2e>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d01e      	beq.n	800085c <__gesf2+0x6c>
 800081e:	2900      	cmp	r1, #0
 8000820:	d10e      	bne.n	8000840 <__gesf2+0x50>
 8000822:	4283      	cmp	r3, r0
 8000824:	d01e      	beq.n	8000864 <__gesf2+0x74>
 8000826:	2102      	movs	r1, #2
 8000828:	1e58      	subs	r0, r3, #1
 800082a:	4008      	ands	r0, r1
 800082c:	3801      	subs	r0, #1
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	2d00      	cmp	r5, #0
 8000832:	d126      	bne.n	8000882 <__gesf2+0x92>
 8000834:	2a00      	cmp	r2, #0
 8000836:	d1f4      	bne.n	8000822 <__gesf2+0x32>
 8000838:	4271      	negs	r1, r6
 800083a:	4171      	adcs	r1, r6
 800083c:	2900      	cmp	r1, #0
 800083e:	d0f0      	beq.n	8000822 <__gesf2+0x32>
 8000840:	2800      	cmp	r0, #0
 8000842:	d1f4      	bne.n	800082e <__gesf2+0x3e>
 8000844:	2001      	movs	r0, #1
 8000846:	4240      	negs	r0, r0
 8000848:	e7f1      	b.n	800082e <__gesf2+0x3e>
 800084a:	2e00      	cmp	r6, #0
 800084c:	d119      	bne.n	8000882 <__gesf2+0x92>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d0ee      	beq.n	8000830 <__gesf2+0x40>
 8000852:	2c00      	cmp	r4, #0
 8000854:	d1e5      	bne.n	8000822 <__gesf2+0x32>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d1e3      	bne.n	8000822 <__gesf2+0x32>
 800085a:	e7e4      	b.n	8000826 <__gesf2+0x36>
 800085c:	2000      	movs	r0, #0
 800085e:	2e00      	cmp	r6, #0
 8000860:	d0e5      	beq.n	800082e <__gesf2+0x3e>
 8000862:	e7e0      	b.n	8000826 <__gesf2+0x36>
 8000864:	42a2      	cmp	r2, r4
 8000866:	dc05      	bgt.n	8000874 <__gesf2+0x84>
 8000868:	dbea      	blt.n	8000840 <__gesf2+0x50>
 800086a:	42ae      	cmp	r6, r5
 800086c:	d802      	bhi.n	8000874 <__gesf2+0x84>
 800086e:	d3e7      	bcc.n	8000840 <__gesf2+0x50>
 8000870:	2000      	movs	r0, #0
 8000872:	e7dc      	b.n	800082e <__gesf2+0x3e>
 8000874:	4241      	negs	r1, r0
 8000876:	4141      	adcs	r1, r0
 8000878:	4248      	negs	r0, r1
 800087a:	2102      	movs	r1, #2
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7d5      	b.n	800082e <__gesf2+0x3e>
 8000882:	2002      	movs	r0, #2
 8000884:	4240      	negs	r0, r0
 8000886:	e7d2      	b.n	800082e <__gesf2+0x3e>

08000888 <__lesf2>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	0042      	lsls	r2, r0, #1
 800088c:	0246      	lsls	r6, r0, #9
 800088e:	024d      	lsls	r5, r1, #9
 8000890:	004c      	lsls	r4, r1, #1
 8000892:	0fc3      	lsrs	r3, r0, #31
 8000894:	0a76      	lsrs	r6, r6, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	0e24      	lsrs	r4, r4, #24
 800089c:	0fc8      	lsrs	r0, r1, #31
 800089e:	2aff      	cmp	r2, #255	; 0xff
 80008a0:	d00d      	beq.n	80008be <__lesf2+0x36>
 80008a2:	2cff      	cmp	r4, #255	; 0xff
 80008a4:	d00f      	beq.n	80008c6 <__lesf2+0x3e>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d123      	bne.n	80008f2 <__lesf2+0x6a>
 80008aa:	4271      	negs	r1, r6
 80008ac:	4171      	adcs	r1, r6
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d10f      	bne.n	80008d2 <__lesf2+0x4a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d10d      	bne.n	80008d2 <__lesf2+0x4a>
 80008b6:	2000      	movs	r0, #0
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d014      	beq.n	80008e6 <__lesf2+0x5e>
 80008bc:	e00d      	b.n	80008da <__lesf2+0x52>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d110      	bne.n	80008e4 <__lesf2+0x5c>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d115      	bne.n	80008f2 <__lesf2+0x6a>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d10c      	bne.n	80008e4 <__lesf2+0x5c>
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d103      	bne.n	80008d6 <__lesf2+0x4e>
 80008ce:	4271      	negs	r1, r6
 80008d0:	4171      	adcs	r1, r6
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d108      	bne.n	80008e8 <__lesf2+0x60>
 80008d6:	4283      	cmp	r3, r0
 80008d8:	d010      	beq.n	80008fc <__lesf2+0x74>
 80008da:	2102      	movs	r1, #2
 80008dc:	1e58      	subs	r0, r3, #1
 80008de:	4008      	ands	r0, r1
 80008e0:	3801      	subs	r0, #1
 80008e2:	e000      	b.n	80008e6 <__lesf2+0x5e>
 80008e4:	2002      	movs	r0, #2
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d1fc      	bne.n	80008e6 <__lesf2+0x5e>
 80008ec:	2001      	movs	r0, #1
 80008ee:	4240      	negs	r0, r0
 80008f0:	e7f9      	b.n	80008e6 <__lesf2+0x5e>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d1ef      	bne.n	80008d6 <__lesf2+0x4e>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d1ed      	bne.n	80008d6 <__lesf2+0x4e>
 80008fa:	e7ee      	b.n	80008da <__lesf2+0x52>
 80008fc:	42a2      	cmp	r2, r4
 80008fe:	dc05      	bgt.n	800090c <__lesf2+0x84>
 8000900:	dbf2      	blt.n	80008e8 <__lesf2+0x60>
 8000902:	42ae      	cmp	r6, r5
 8000904:	d802      	bhi.n	800090c <__lesf2+0x84>
 8000906:	d3ef      	bcc.n	80008e8 <__lesf2+0x60>
 8000908:	2000      	movs	r0, #0
 800090a:	e7ec      	b.n	80008e6 <__lesf2+0x5e>
 800090c:	4241      	negs	r1, r0
 800090e:	4141      	adcs	r1, r0
 8000910:	4248      	negs	r0, r1
 8000912:	2102      	movs	r1, #2
 8000914:	4008      	ands	r0, r1
 8000916:	3801      	subs	r0, #1
 8000918:	e7e5      	b.n	80008e6 <__lesf2+0x5e>
 800091a:	46c0      	nop			; (mov r8, r8)

0800091c <__aeabi_fmul>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4657      	mov	r7, sl
 8000920:	464e      	mov	r6, r9
 8000922:	4645      	mov	r5, r8
 8000924:	46de      	mov	lr, fp
 8000926:	0244      	lsls	r4, r0, #9
 8000928:	b5e0      	push	{r5, r6, r7, lr}
 800092a:	0045      	lsls	r5, r0, #1
 800092c:	1c0f      	adds	r7, r1, #0
 800092e:	0a64      	lsrs	r4, r4, #9
 8000930:	0e2d      	lsrs	r5, r5, #24
 8000932:	0fc6      	lsrs	r6, r0, #31
 8000934:	2d00      	cmp	r5, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_fmul+0xac>
 8000938:	2dff      	cmp	r5, #255	; 0xff
 800093a:	d04d      	beq.n	80009d8 <__aeabi_fmul+0xbc>
 800093c:	2300      	movs	r3, #0
 800093e:	2080      	movs	r0, #128	; 0x80
 8000940:	469a      	mov	sl, r3
 8000942:	469b      	mov	fp, r3
 8000944:	00e4      	lsls	r4, r4, #3
 8000946:	04c0      	lsls	r0, r0, #19
 8000948:	4304      	orrs	r4, r0
 800094a:	3d7f      	subs	r5, #127	; 0x7f
 800094c:	0278      	lsls	r0, r7, #9
 800094e:	0a43      	lsrs	r3, r0, #9
 8000950:	4699      	mov	r9, r3
 8000952:	007a      	lsls	r2, r7, #1
 8000954:	0ffb      	lsrs	r3, r7, #31
 8000956:	4698      	mov	r8, r3
 8000958:	0e12      	lsrs	r2, r2, #24
 800095a:	464b      	mov	r3, r9
 800095c:	d044      	beq.n	80009e8 <__aeabi_fmul+0xcc>
 800095e:	2aff      	cmp	r2, #255	; 0xff
 8000960:	d011      	beq.n	8000986 <__aeabi_fmul+0x6a>
 8000962:	00d8      	lsls	r0, r3, #3
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4303      	orrs	r3, r0
 800096a:	4699      	mov	r9, r3
 800096c:	2000      	movs	r0, #0
 800096e:	3a7f      	subs	r2, #127	; 0x7f
 8000970:	18ad      	adds	r5, r5, r2
 8000972:	4647      	mov	r7, r8
 8000974:	4653      	mov	r3, sl
 8000976:	4077      	eors	r7, r6
 8000978:	1c69      	adds	r1, r5, #1
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d83f      	bhi.n	80009fe <__aeabi_fmul+0xe2>
 800097e:	4a72      	ldr	r2, [pc, #456]	; (8000b48 <__aeabi_fmul+0x22c>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	58d3      	ldr	r3, [r2, r3]
 8000984:	469f      	mov	pc, r3
 8000986:	35ff      	adds	r5, #255	; 0xff
 8000988:	2b00      	cmp	r3, #0
 800098a:	d000      	beq.n	800098e <__aeabi_fmul+0x72>
 800098c:	e079      	b.n	8000a82 <__aeabi_fmul+0x166>
 800098e:	4652      	mov	r2, sl
 8000990:	2302      	movs	r3, #2
 8000992:	431a      	orrs	r2, r3
 8000994:	4692      	mov	sl, r2
 8000996:	2002      	movs	r0, #2
 8000998:	e7eb      	b.n	8000972 <__aeabi_fmul+0x56>
 800099a:	4647      	mov	r7, r8
 800099c:	464c      	mov	r4, r9
 800099e:	4683      	mov	fp, r0
 80009a0:	465b      	mov	r3, fp
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d028      	beq.n	80009f8 <__aeabi_fmul+0xdc>
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d100      	bne.n	80009ac <__aeabi_fmul+0x90>
 80009aa:	e0c6      	b.n	8000b3a <__aeabi_fmul+0x21e>
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d14f      	bne.n	8000a50 <__aeabi_fmul+0x134>
 80009b0:	2000      	movs	r0, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	05c0      	lsls	r0, r0, #23
 80009b6:	07ff      	lsls	r7, r7, #31
 80009b8:	4320      	orrs	r0, r4
 80009ba:	4338      	orrs	r0, r7
 80009bc:	bcf0      	pop	{r4, r5, r6, r7}
 80009be:	46bb      	mov	fp, r7
 80009c0:	46b2      	mov	sl, r6
 80009c2:	46a9      	mov	r9, r5
 80009c4:	46a0      	mov	r8, r4
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d171      	bne.n	8000ab0 <__aeabi_fmul+0x194>
 80009cc:	2304      	movs	r3, #4
 80009ce:	469a      	mov	sl, r3
 80009d0:	3b03      	subs	r3, #3
 80009d2:	2500      	movs	r5, #0
 80009d4:	469b      	mov	fp, r3
 80009d6:	e7b9      	b.n	800094c <__aeabi_fmul+0x30>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d163      	bne.n	8000aa4 <__aeabi_fmul+0x188>
 80009dc:	2308      	movs	r3, #8
 80009de:	469a      	mov	sl, r3
 80009e0:	3b06      	subs	r3, #6
 80009e2:	25ff      	movs	r5, #255	; 0xff
 80009e4:	469b      	mov	fp, r3
 80009e6:	e7b1      	b.n	800094c <__aeabi_fmul+0x30>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d150      	bne.n	8000a8e <__aeabi_fmul+0x172>
 80009ec:	4652      	mov	r2, sl
 80009ee:	3301      	adds	r3, #1
 80009f0:	431a      	orrs	r2, r3
 80009f2:	4692      	mov	sl, r2
 80009f4:	2001      	movs	r0, #1
 80009f6:	e7bc      	b.n	8000972 <__aeabi_fmul+0x56>
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	2400      	movs	r4, #0
 80009fc:	e7da      	b.n	80009b4 <__aeabi_fmul+0x98>
 80009fe:	4648      	mov	r0, r9
 8000a00:	0c26      	lsrs	r6, r4, #16
 8000a02:	0424      	lsls	r4, r4, #16
 8000a04:	0c22      	lsrs	r2, r4, #16
 8000a06:	0404      	lsls	r4, r0, #16
 8000a08:	0c24      	lsrs	r4, r4, #16
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	4350      	muls	r0, r2
 8000a12:	4374      	muls	r4, r6
 8000a14:	435a      	muls	r2, r3
 8000a16:	435e      	muls	r6, r3
 8000a18:	1912      	adds	r2, r2, r4
 8000a1a:	0c03      	lsrs	r3, r0, #16
 8000a1c:	189b      	adds	r3, r3, r2
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	d903      	bls.n	8000a2a <__aeabi_fmul+0x10e>
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0252      	lsls	r2, r2, #9
 8000a26:	4694      	mov	ip, r2
 8000a28:	4466      	add	r6, ip
 8000a2a:	0400      	lsls	r0, r0, #16
 8000a2c:	041a      	lsls	r2, r3, #16
 8000a2e:	0c00      	lsrs	r0, r0, #16
 8000a30:	1812      	adds	r2, r2, r0
 8000a32:	0194      	lsls	r4, r2, #6
 8000a34:	1e60      	subs	r0, r4, #1
 8000a36:	4184      	sbcs	r4, r0
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	0e92      	lsrs	r2, r2, #26
 8000a3c:	199b      	adds	r3, r3, r6
 8000a3e:	4314      	orrs	r4, r2
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	d572      	bpl.n	8000b2e <__aeabi_fmul+0x212>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	0863      	lsrs	r3, r4, #1
 8000a4c:	4004      	ands	r4, r0
 8000a4e:	431c      	orrs	r4, r3
 8000a50:	0008      	movs	r0, r1
 8000a52:	307f      	adds	r0, #127	; 0x7f
 8000a54:	2800      	cmp	r0, #0
 8000a56:	dd3c      	ble.n	8000ad2 <__aeabi_fmul+0x1b6>
 8000a58:	0763      	lsls	r3, r4, #29
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fmul+0x14a>
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	4023      	ands	r3, r4
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fmul+0x14a>
 8000a64:	3404      	adds	r4, #4
 8000a66:	0123      	lsls	r3, r4, #4
 8000a68:	d503      	bpl.n	8000a72 <__aeabi_fmul+0x156>
 8000a6a:	3180      	adds	r1, #128	; 0x80
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <__aeabi_fmul+0x230>)
 8000a70:	401c      	ands	r4, r3
 8000a72:	28fe      	cmp	r0, #254	; 0xfe
 8000a74:	dcc0      	bgt.n	80009f8 <__aeabi_fmul+0xdc>
 8000a76:	01a4      	lsls	r4, r4, #6
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	e79a      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000a7e:	0037      	movs	r7, r6
 8000a80:	e78e      	b.n	80009a0 <__aeabi_fmul+0x84>
 8000a82:	4652      	mov	r2, sl
 8000a84:	2303      	movs	r3, #3
 8000a86:	431a      	orrs	r2, r3
 8000a88:	4692      	mov	sl, r2
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	e771      	b.n	8000972 <__aeabi_fmul+0x56>
 8000a8e:	4648      	mov	r0, r9
 8000a90:	f001 f898 	bl	8001bc4 <__clzsi2>
 8000a94:	464a      	mov	r2, r9
 8000a96:	1f43      	subs	r3, r0, #5
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	1a2d      	subs	r5, r5, r0
 8000a9c:	4691      	mov	r9, r2
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	3d76      	subs	r5, #118	; 0x76
 8000aa2:	e766      	b.n	8000972 <__aeabi_fmul+0x56>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	469a      	mov	sl, r3
 8000aa8:	3b09      	subs	r3, #9
 8000aaa:	25ff      	movs	r5, #255	; 0xff
 8000aac:	469b      	mov	fp, r3
 8000aae:	e74d      	b.n	800094c <__aeabi_fmul+0x30>
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f001 f887 	bl	8001bc4 <__clzsi2>
 8000ab6:	2576      	movs	r5, #118	; 0x76
 8000ab8:	1f43      	subs	r3, r0, #5
 8000aba:	409c      	lsls	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	426d      	negs	r5, r5
 8000ac0:	469a      	mov	sl, r3
 8000ac2:	469b      	mov	fp, r3
 8000ac4:	1a2d      	subs	r5, r5, r0
 8000ac6:	e741      	b.n	800094c <__aeabi_fmul+0x30>
 8000ac8:	2480      	movs	r4, #128	; 0x80
 8000aca:	2700      	movs	r7, #0
 8000acc:	20ff      	movs	r0, #255	; 0xff
 8000ace:	03e4      	lsls	r4, r4, #15
 8000ad0:	e770      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	1a1b      	subs	r3, r3, r0
 8000ad6:	2b1b      	cmp	r3, #27
 8000ad8:	dd00      	ble.n	8000adc <__aeabi_fmul+0x1c0>
 8000ada:	e769      	b.n	80009b0 <__aeabi_fmul+0x94>
 8000adc:	319e      	adds	r1, #158	; 0x9e
 8000ade:	0020      	movs	r0, r4
 8000ae0:	408c      	lsls	r4, r1
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	1e63      	subs	r3, r4, #1
 8000ae6:	419c      	sbcs	r4, r3
 8000ae8:	4304      	orrs	r4, r0
 8000aea:	0763      	lsls	r3, r4, #29
 8000aec:	d004      	beq.n	8000af8 <__aeabi_fmul+0x1dc>
 8000aee:	230f      	movs	r3, #15
 8000af0:	4023      	ands	r3, r4
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d000      	beq.n	8000af8 <__aeabi_fmul+0x1dc>
 8000af6:	3404      	adds	r4, #4
 8000af8:	0163      	lsls	r3, r4, #5
 8000afa:	d51a      	bpl.n	8000b32 <__aeabi_fmul+0x216>
 8000afc:	2001      	movs	r0, #1
 8000afe:	2400      	movs	r4, #0
 8000b00:	e758      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000b02:	2080      	movs	r0, #128	; 0x80
 8000b04:	03c0      	lsls	r0, r0, #15
 8000b06:	4204      	tst	r4, r0
 8000b08:	d009      	beq.n	8000b1e <__aeabi_fmul+0x202>
 8000b0a:	464b      	mov	r3, r9
 8000b0c:	4203      	tst	r3, r0
 8000b0e:	d106      	bne.n	8000b1e <__aeabi_fmul+0x202>
 8000b10:	464c      	mov	r4, r9
 8000b12:	4304      	orrs	r4, r0
 8000b14:	0264      	lsls	r4, r4, #9
 8000b16:	4647      	mov	r7, r8
 8000b18:	20ff      	movs	r0, #255	; 0xff
 8000b1a:	0a64      	lsrs	r4, r4, #9
 8000b1c:	e74a      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	03c0      	lsls	r0, r0, #15
 8000b22:	4304      	orrs	r4, r0
 8000b24:	0264      	lsls	r4, r4, #9
 8000b26:	0037      	movs	r7, r6
 8000b28:	20ff      	movs	r0, #255	; 0xff
 8000b2a:	0a64      	lsrs	r4, r4, #9
 8000b2c:	e742      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000b2e:	0029      	movs	r1, r5
 8000b30:	e78e      	b.n	8000a50 <__aeabi_fmul+0x134>
 8000b32:	01a4      	lsls	r4, r4, #6
 8000b34:	2000      	movs	r0, #0
 8000b36:	0a64      	lsrs	r4, r4, #9
 8000b38:	e73c      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000b3a:	2080      	movs	r0, #128	; 0x80
 8000b3c:	03c0      	lsls	r0, r0, #15
 8000b3e:	4304      	orrs	r4, r0
 8000b40:	0264      	lsls	r4, r4, #9
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	0a64      	lsrs	r4, r4, #9
 8000b46:	e735      	b.n	80009b4 <__aeabi_fmul+0x98>
 8000b48:	08005f5c 	.word	0x08005f5c
 8000b4c:	f7ffffff 	.word	0xf7ffffff

08000b50 <__aeabi_fsub>:
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	4646      	mov	r6, r8
 8000b54:	46d6      	mov	lr, sl
 8000b56:	464f      	mov	r7, r9
 8000b58:	0243      	lsls	r3, r0, #9
 8000b5a:	0a5b      	lsrs	r3, r3, #9
 8000b5c:	00da      	lsls	r2, r3, #3
 8000b5e:	4694      	mov	ip, r2
 8000b60:	024a      	lsls	r2, r1, #9
 8000b62:	b5c0      	push	{r6, r7, lr}
 8000b64:	0044      	lsls	r4, r0, #1
 8000b66:	0a56      	lsrs	r6, r2, #9
 8000b68:	1c05      	adds	r5, r0, #0
 8000b6a:	46b0      	mov	r8, r6
 8000b6c:	0e24      	lsrs	r4, r4, #24
 8000b6e:	004e      	lsls	r6, r1, #1
 8000b70:	0992      	lsrs	r2, r2, #6
 8000b72:	001f      	movs	r7, r3
 8000b74:	0020      	movs	r0, r4
 8000b76:	4692      	mov	sl, r2
 8000b78:	0fed      	lsrs	r5, r5, #31
 8000b7a:	0e36      	lsrs	r6, r6, #24
 8000b7c:	0fc9      	lsrs	r1, r1, #31
 8000b7e:	2eff      	cmp	r6, #255	; 0xff
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x34>
 8000b82:	e07f      	b.n	8000c84 <__aeabi_fsub+0x134>
 8000b84:	2201      	movs	r2, #1
 8000b86:	4051      	eors	r1, r2
 8000b88:	428d      	cmp	r5, r1
 8000b8a:	d051      	beq.n	8000c30 <__aeabi_fsub+0xe0>
 8000b8c:	1ba2      	subs	r2, r4, r6
 8000b8e:	4691      	mov	r9, r2
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_fsub+0x46>
 8000b94:	e07e      	b.n	8000c94 <__aeabi_fsub+0x144>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x4c>
 8000b9a:	e099      	b.n	8000cd0 <__aeabi_fsub+0x180>
 8000b9c:	2cff      	cmp	r4, #255	; 0xff
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fsub+0x52>
 8000ba0:	e08c      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	4652      	mov	r2, sl
 8000ba6:	04db      	lsls	r3, r3, #19
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	4692      	mov	sl, r2
 8000bac:	464a      	mov	r2, r9
 8000bae:	2301      	movs	r3, #1
 8000bb0:	2a1b      	cmp	r2, #27
 8000bb2:	dc08      	bgt.n	8000bc6 <__aeabi_fsub+0x76>
 8000bb4:	4653      	mov	r3, sl
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	40d3      	lsrs	r3, r2
 8000bba:	1a89      	subs	r1, r1, r2
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	408a      	lsls	r2, r1
 8000bc0:	1e51      	subs	r1, r2, #1
 8000bc2:	418a      	sbcs	r2, r1
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	4662      	mov	r2, ip
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	015a      	lsls	r2, r3, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x80>
 8000bce:	e0f3      	b.n	8000db8 <__aeabi_fsub+0x268>
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	099e      	lsrs	r6, r3, #6
 8000bd4:	0030      	movs	r0, r6
 8000bd6:	f000 fff5 	bl	8001bc4 <__clzsi2>
 8000bda:	3805      	subs	r0, #5
 8000bdc:	4086      	lsls	r6, r0
 8000bde:	4284      	cmp	r4, r0
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_fsub+0x94>
 8000be2:	e0f7      	b.n	8000dd4 <__aeabi_fsub+0x284>
 8000be4:	0032      	movs	r2, r6
 8000be6:	1b04      	subs	r4, r0, r4
 8000be8:	2020      	movs	r0, #32
 8000bea:	3401      	adds	r4, #1
 8000bec:	40e2      	lsrs	r2, r4
 8000bee:	1b04      	subs	r4, r0, r4
 8000bf0:	40a6      	lsls	r6, r4
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	1e5e      	subs	r6, r3, #1
 8000bf6:	41b3      	sbcs	r3, r6
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	075a      	lsls	r2, r3, #29
 8000bfe:	d004      	beq.n	8000c0a <__aeabi_fsub+0xba>
 8000c00:	220f      	movs	r2, #15
 8000c02:	401a      	ands	r2, r3
 8000c04:	2a04      	cmp	r2, #4
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fsub+0xba>
 8000c08:	3304      	adds	r3, #4
 8000c0a:	015a      	lsls	r2, r3, #5
 8000c0c:	d400      	bmi.n	8000c10 <__aeabi_fsub+0xc0>
 8000c0e:	e0d6      	b.n	8000dbe <__aeabi_fsub+0x26e>
 8000c10:	1c62      	adds	r2, r4, #1
 8000c12:	2cfe      	cmp	r4, #254	; 0xfe
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0xc8>
 8000c16:	e0da      	b.n	8000dce <__aeabi_fsub+0x27e>
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	0a5f      	lsrs	r7, r3, #9
 8000c1c:	b2d0      	uxtb	r0, r2
 8000c1e:	05c0      	lsls	r0, r0, #23
 8000c20:	4338      	orrs	r0, r7
 8000c22:	07ed      	lsls	r5, r5, #31
 8000c24:	4328      	orrs	r0, r5
 8000c26:	bce0      	pop	{r5, r6, r7}
 8000c28:	46ba      	mov	sl, r7
 8000c2a:	46b1      	mov	r9, r6
 8000c2c:	46a8      	mov	r8, r5
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	1ba2      	subs	r2, r4, r6
 8000c32:	4691      	mov	r9, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	dd63      	ble.n	8000d00 <__aeabi_fsub+0x1b0>
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0xee>
 8000c3c:	e099      	b.n	8000d72 <__aeabi_fsub+0x222>
 8000c3e:	2cff      	cmp	r4, #255	; 0xff
 8000c40:	d03c      	beq.n	8000cbc <__aeabi_fsub+0x16c>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	4652      	mov	r2, sl
 8000c46:	04db      	lsls	r3, r3, #19
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	4692      	mov	sl, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2a1b      	cmp	r2, #27
 8000c52:	dc08      	bgt.n	8000c66 <__aeabi_fsub+0x116>
 8000c54:	4653      	mov	r3, sl
 8000c56:	2120      	movs	r1, #32
 8000c58:	40d3      	lsrs	r3, r2
 8000c5a:	1a89      	subs	r1, r1, r2
 8000c5c:	4652      	mov	r2, sl
 8000c5e:	408a      	lsls	r2, r1
 8000c60:	1e51      	subs	r1, r2, #1
 8000c62:	418a      	sbcs	r2, r1
 8000c64:	4313      	orrs	r3, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	d400      	bmi.n	8000c6e <__aeabi_fsub+0x11e>
 8000c6c:	e0a4      	b.n	8000db8 <__aeabi_fsub+0x268>
 8000c6e:	3401      	adds	r4, #1
 8000c70:	2cff      	cmp	r4, #255	; 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x126>
 8000c74:	e0ab      	b.n	8000dce <__aeabi_fsub+0x27e>
 8000c76:	2201      	movs	r2, #1
 8000c78:	4997      	ldr	r1, [pc, #604]	; (8000ed8 <__aeabi_fsub+0x388>)
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	085b      	lsrs	r3, r3, #1
 8000c7e:	400b      	ands	r3, r1
 8000c80:	4313      	orrs	r3, r2
 8000c82:	e7bb      	b.n	8000bfc <__aeabi_fsub+0xac>
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	d032      	beq.n	8000cee <__aeabi_fsub+0x19e>
 8000c88:	428d      	cmp	r5, r1
 8000c8a:	d035      	beq.n	8000cf8 <__aeabi_fsub+0x1a8>
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	4252      	negs	r2, r2
 8000c90:	4691      	mov	r9, r2
 8000c92:	44a1      	add	r9, r4
 8000c94:	464a      	mov	r2, r9
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d051      	beq.n	8000d3e <__aeabi_fsub+0x1ee>
 8000c9a:	1b30      	subs	r0, r6, r4
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_fsub+0x152>
 8000ca0:	e09c      	b.n	8000ddc <__aeabi_fsub+0x28c>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x15a>
 8000ca8:	e0df      	b.n	8000e6a <__aeabi_fsub+0x31a>
 8000caa:	3801      	subs	r0, #1
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fsub+0x162>
 8000cb0:	e0f7      	b.n	8000ea2 <__aeabi_fsub+0x352>
 8000cb2:	2eff      	cmp	r6, #255	; 0xff
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fsub+0x168>
 8000cb6:	e099      	b.n	8000dec <__aeabi_fsub+0x29c>
 8000cb8:	000d      	movs	r5, r1
 8000cba:	4643      	mov	r3, r8
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fsub+0x172>
 8000cc0:	e085      	b.n	8000dce <__aeabi_fsub+0x27e>
 8000cc2:	2780      	movs	r7, #128	; 0x80
 8000cc4:	03ff      	lsls	r7, r7, #15
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	027f      	lsls	r7, r7, #9
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	0a7f      	lsrs	r7, r7, #9
 8000cce:	e7a6      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d074      	beq.n	8000dc0 <__aeabi_fsub+0x270>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4252      	negs	r2, r2
 8000cda:	4690      	mov	r8, r2
 8000cdc:	44c1      	add	r9, r8
 8000cde:	464a      	mov	r2, r9
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_fsub+0x196>
 8000ce4:	e0c8      	b.n	8000e78 <__aeabi_fsub+0x328>
 8000ce6:	2cff      	cmp	r4, #255	; 0xff
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fsub+0x19c>
 8000cea:	e75f      	b.n	8000bac <__aeabi_fsub+0x5c>
 8000cec:	e7e6      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4051      	eors	r1, r2
 8000cf2:	42a9      	cmp	r1, r5
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fsub+0x1a8>
 8000cf6:	e749      	b.n	8000b8c <__aeabi_fsub+0x3c>
 8000cf8:	22ff      	movs	r2, #255	; 0xff
 8000cfa:	4252      	negs	r2, r2
 8000cfc:	4691      	mov	r9, r2
 8000cfe:	44a1      	add	r9, r4
 8000d00:	464a      	mov	r2, r9
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d043      	beq.n	8000d8e <__aeabi_fsub+0x23e>
 8000d06:	1b31      	subs	r1, r6, r4
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x1be>
 8000d0c:	e08c      	b.n	8000e28 <__aeabi_fsub+0x2d8>
 8000d0e:	2eff      	cmp	r6, #255	; 0xff
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fsub+0x1c4>
 8000d12:	e092      	b.n	8000e3a <__aeabi_fsub+0x2ea>
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	4662      	mov	r2, ip
 8000d18:	04db      	lsls	r3, r3, #19
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	2301      	movs	r3, #1
 8000d20:	291b      	cmp	r1, #27
 8000d22:	dc09      	bgt.n	8000d38 <__aeabi_fsub+0x1e8>
 8000d24:	2020      	movs	r0, #32
 8000d26:	4663      	mov	r3, ip
 8000d28:	4662      	mov	r2, ip
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	1a41      	subs	r1, r0, r1
 8000d2e:	408a      	lsls	r2, r1
 8000d30:	0011      	movs	r1, r2
 8000d32:	1e48      	subs	r0, r1, #1
 8000d34:	4181      	sbcs	r1, r0
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0034      	movs	r4, r6
 8000d3a:	4453      	add	r3, sl
 8000d3c:	e794      	b.n	8000c68 <__aeabi_fsub+0x118>
 8000d3e:	22fe      	movs	r2, #254	; 0xfe
 8000d40:	1c66      	adds	r6, r4, #1
 8000d42:	4232      	tst	r2, r6
 8000d44:	d164      	bne.n	8000e10 <__aeabi_fsub+0x2c0>
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fsub+0x1fc>
 8000d4a:	e082      	b.n	8000e52 <__aeabi_fsub+0x302>
 8000d4c:	4663      	mov	r3, ip
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fsub+0x204>
 8000d52:	e0ab      	b.n	8000eac <__aeabi_fsub+0x35c>
 8000d54:	4653      	mov	r3, sl
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x20c>
 8000d5a:	e760      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	4652      	mov	r2, sl
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	015a      	lsls	r2, r3, #5
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fsub+0x218>
 8000d66:	e0aa      	b.n	8000ebe <__aeabi_fsub+0x36e>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	4652      	mov	r2, sl
 8000d6c:	000d      	movs	r5, r1
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	e744      	b.n	8000bfc <__aeabi_fsub+0xac>
 8000d72:	4652      	mov	r2, sl
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d023      	beq.n	8000dc0 <__aeabi_fsub+0x270>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4252      	negs	r2, r2
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	44c1      	add	r9, r8
 8000d80:	464a      	mov	r2, r9
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d075      	beq.n	8000e72 <__aeabi_fsub+0x322>
 8000d86:	2cff      	cmp	r4, #255	; 0xff
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x23c>
 8000d8a:	e75f      	b.n	8000c4c <__aeabi_fsub+0xfc>
 8000d8c:	e796      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000d8e:	26fe      	movs	r6, #254	; 0xfe
 8000d90:	3401      	adds	r4, #1
 8000d92:	4226      	tst	r6, r4
 8000d94:	d153      	bne.n	8000e3e <__aeabi_fsub+0x2ee>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d172      	bne.n	8000e80 <__aeabi_fsub+0x330>
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x252>
 8000da0:	e093      	b.n	8000eca <__aeabi_fsub+0x37a>
 8000da2:	4653      	mov	r3, sl
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_fsub+0x25a>
 8000da8:	e739      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000daa:	4463      	add	r3, ip
 8000dac:	2400      	movs	r4, #0
 8000dae:	015a      	lsls	r2, r3, #5
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_fsub+0x268>
 8000db2:	4a4a      	ldr	r2, [pc, #296]	; (8000edc <__aeabi_fsub+0x38c>)
 8000db4:	3401      	adds	r4, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	075a      	lsls	r2, r3, #29
 8000dba:	d000      	beq.n	8000dbe <__aeabi_fsub+0x26e>
 8000dbc:	e720      	b.n	8000c00 <__aeabi_fsub+0xb0>
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	2cff      	cmp	r4, #255	; 0xff
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x276>
 8000dc4:	e77a      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000dc6:	025b      	lsls	r3, r3, #9
 8000dc8:	0a5f      	lsrs	r7, r3, #9
 8000dca:	b2e0      	uxtb	r0, r4
 8000dcc:	e727      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000dce:	20ff      	movs	r0, #255	; 0xff
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	e724      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000dd4:	4b41      	ldr	r3, [pc, #260]	; (8000edc <__aeabi_fsub+0x38c>)
 8000dd6:	1a24      	subs	r4, r4, r0
 8000dd8:	4033      	ands	r3, r6
 8000dda:	e70f      	b.n	8000bfc <__aeabi_fsub+0xac>
 8000ddc:	2eff      	cmp	r6, #255	; 0xff
 8000dde:	d100      	bne.n	8000de2 <__aeabi_fsub+0x292>
 8000de0:	e76a      	b.n	8000cb8 <__aeabi_fsub+0x168>
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	4662      	mov	r2, ip
 8000de6:	04db      	lsls	r3, r3, #19
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4694      	mov	ip, r2
 8000dec:	2301      	movs	r3, #1
 8000dee:	281b      	cmp	r0, #27
 8000df0:	dc09      	bgt.n	8000e06 <__aeabi_fsub+0x2b6>
 8000df2:	2420      	movs	r4, #32
 8000df4:	4663      	mov	r3, ip
 8000df6:	4662      	mov	r2, ip
 8000df8:	40c3      	lsrs	r3, r0
 8000dfa:	1a20      	subs	r0, r4, r0
 8000dfc:	4082      	lsls	r2, r0
 8000dfe:	0010      	movs	r0, r2
 8000e00:	1e44      	subs	r4, r0, #1
 8000e02:	41a0      	sbcs	r0, r4
 8000e04:	4303      	orrs	r3, r0
 8000e06:	4652      	mov	r2, sl
 8000e08:	000d      	movs	r5, r1
 8000e0a:	0034      	movs	r4, r6
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	e6dc      	b.n	8000bca <__aeabi_fsub+0x7a>
 8000e10:	4663      	mov	r3, ip
 8000e12:	4652      	mov	r2, sl
 8000e14:	1a9e      	subs	r6, r3, r2
 8000e16:	0173      	lsls	r3, r6, #5
 8000e18:	d417      	bmi.n	8000e4a <__aeabi_fsub+0x2fa>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_fsub+0x2d0>
 8000e1e:	e6d9      	b.n	8000bd4 <__aeabi_fsub+0x84>
 8000e20:	2500      	movs	r5, #0
 8000e22:	2000      	movs	r0, #0
 8000e24:	2700      	movs	r7, #0
 8000e26:	e6fa      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000e28:	4663      	mov	r3, ip
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d044      	beq.n	8000eb8 <__aeabi_fsub+0x368>
 8000e2e:	3901      	subs	r1, #1
 8000e30:	2900      	cmp	r1, #0
 8000e32:	d04c      	beq.n	8000ece <__aeabi_fsub+0x37e>
 8000e34:	2eff      	cmp	r6, #255	; 0xff
 8000e36:	d000      	beq.n	8000e3a <__aeabi_fsub+0x2ea>
 8000e38:	e771      	b.n	8000d1e <__aeabi_fsub+0x1ce>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e73e      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000e3e:	2cff      	cmp	r4, #255	; 0xff
 8000e40:	d0c5      	beq.n	8000dce <__aeabi_fsub+0x27e>
 8000e42:	4652      	mov	r2, sl
 8000e44:	4462      	add	r2, ip
 8000e46:	0853      	lsrs	r3, r2, #1
 8000e48:	e7b6      	b.n	8000db8 <__aeabi_fsub+0x268>
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	000d      	movs	r5, r1
 8000e4e:	1ad6      	subs	r6, r2, r3
 8000e50:	e6c0      	b.n	8000bd4 <__aeabi_fsub+0x84>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d116      	bne.n	8000e86 <__aeabi_fsub+0x336>
 8000e58:	4653      	mov	r3, sl
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x310>
 8000e5e:	e72b      	b.n	8000cb8 <__aeabi_fsub+0x168>
 8000e60:	2780      	movs	r7, #128	; 0x80
 8000e62:	2500      	movs	r5, #0
 8000e64:	20ff      	movs	r0, #255	; 0xff
 8000e66:	03ff      	lsls	r7, r7, #15
 8000e68:	e6d9      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000e6a:	000d      	movs	r5, r1
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	0034      	movs	r4, r6
 8000e70:	e7a6      	b.n	8000dc0 <__aeabi_fsub+0x270>
 8000e72:	4653      	mov	r3, sl
 8000e74:	4463      	add	r3, ip
 8000e76:	e6f7      	b.n	8000c68 <__aeabi_fsub+0x118>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	4652      	mov	r2, sl
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	e6a4      	b.n	8000bca <__aeabi_fsub+0x7a>
 8000e80:	4662      	mov	r2, ip
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d0d9      	beq.n	8000e3a <__aeabi_fsub+0x2ea>
 8000e86:	4652      	mov	r2, sl
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x33e>
 8000e8c:	e716      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	03d2      	lsls	r2, r2, #15
 8000e92:	4213      	tst	r3, r2
 8000e94:	d100      	bne.n	8000e98 <__aeabi_fsub+0x348>
 8000e96:	e711      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	4210      	tst	r0, r2
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x350>
 8000e9e:	e70d      	b.n	8000cbc <__aeabi_fsub+0x16c>
 8000ea0:	e70a      	b.n	8000cb8 <__aeabi_fsub+0x168>
 8000ea2:	4652      	mov	r2, sl
 8000ea4:	000d      	movs	r5, r1
 8000ea6:	0034      	movs	r4, r6
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	e68e      	b.n	8000bca <__aeabi_fsub+0x7a>
 8000eac:	4653      	mov	r3, sl
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <__aeabi_fsub+0x374>
 8000eb2:	000d      	movs	r5, r1
 8000eb4:	4647      	mov	r7, r8
 8000eb6:	e6b2      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000eb8:	4643      	mov	r3, r8
 8000eba:	0034      	movs	r4, r6
 8000ebc:	e780      	b.n	8000dc0 <__aeabi_fsub+0x270>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x374>
 8000ec2:	e779      	b.n	8000db8 <__aeabi_fsub+0x268>
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	2700      	movs	r7, #0
 8000ec8:	e6a9      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000eca:	4647      	mov	r7, r8
 8000ecc:	e6a7      	b.n	8000c1e <__aeabi_fsub+0xce>
 8000ece:	4653      	mov	r3, sl
 8000ed0:	0034      	movs	r4, r6
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e6c8      	b.n	8000c68 <__aeabi_fsub+0x118>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	7dffffff 	.word	0x7dffffff
 8000edc:	fbffffff 	.word	0xfbffffff

08000ee0 <__aeabi_f2iz>:
 8000ee0:	0241      	lsls	r1, r0, #9
 8000ee2:	0042      	lsls	r2, r0, #1
 8000ee4:	0fc3      	lsrs	r3, r0, #31
 8000ee6:	0a49      	lsrs	r1, r1, #9
 8000ee8:	2000      	movs	r0, #0
 8000eea:	0e12      	lsrs	r2, r2, #24
 8000eec:	2a7e      	cmp	r2, #126	; 0x7e
 8000eee:	d903      	bls.n	8000ef8 <__aeabi_f2iz+0x18>
 8000ef0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ef2:	d902      	bls.n	8000efa <__aeabi_f2iz+0x1a>
 8000ef4:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <__aeabi_f2iz+0x3c>)
 8000ef6:	1898      	adds	r0, r3, r2
 8000ef8:	4770      	bx	lr
 8000efa:	2080      	movs	r0, #128	; 0x80
 8000efc:	0400      	lsls	r0, r0, #16
 8000efe:	4301      	orrs	r1, r0
 8000f00:	2a95      	cmp	r2, #149	; 0x95
 8000f02:	dc07      	bgt.n	8000f14 <__aeabi_f2iz+0x34>
 8000f04:	2096      	movs	r0, #150	; 0x96
 8000f06:	1a82      	subs	r2, r0, r2
 8000f08:	40d1      	lsrs	r1, r2
 8000f0a:	4248      	negs	r0, r1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f3      	bne.n	8000ef8 <__aeabi_f2iz+0x18>
 8000f10:	0008      	movs	r0, r1
 8000f12:	e7f1      	b.n	8000ef8 <__aeabi_f2iz+0x18>
 8000f14:	3a96      	subs	r2, #150	; 0x96
 8000f16:	4091      	lsls	r1, r2
 8000f18:	e7f7      	b.n	8000f0a <__aeabi_f2iz+0x2a>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	7fffffff 	.word	0x7fffffff

08000f20 <__aeabi_i2f>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d013      	beq.n	8000f4e <__aeabi_i2f+0x2e>
 8000f26:	17c3      	asrs	r3, r0, #31
 8000f28:	18c5      	adds	r5, r0, r3
 8000f2a:	405d      	eors	r5, r3
 8000f2c:	0fc4      	lsrs	r4, r0, #31
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 fe48 	bl	8001bc4 <__clzsi2>
 8000f34:	239e      	movs	r3, #158	; 0x9e
 8000f36:	0001      	movs	r1, r0
 8000f38:	1a1b      	subs	r3, r3, r0
 8000f3a:	2b96      	cmp	r3, #150	; 0x96
 8000f3c:	dc0f      	bgt.n	8000f5e <__aeabi_i2f+0x3e>
 8000f3e:	2808      	cmp	r0, #8
 8000f40:	dd01      	ble.n	8000f46 <__aeabi_i2f+0x26>
 8000f42:	3908      	subs	r1, #8
 8000f44:	408d      	lsls	r5, r1
 8000f46:	026d      	lsls	r5, r5, #9
 8000f48:	0a6d      	lsrs	r5, r5, #9
 8000f4a:	b2d8      	uxtb	r0, r3
 8000f4c:	e002      	b.n	8000f54 <__aeabi_i2f+0x34>
 8000f4e:	2400      	movs	r4, #0
 8000f50:	2000      	movs	r0, #0
 8000f52:	2500      	movs	r5, #0
 8000f54:	05c0      	lsls	r0, r0, #23
 8000f56:	4328      	orrs	r0, r5
 8000f58:	07e4      	lsls	r4, r4, #31
 8000f5a:	4320      	orrs	r0, r4
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
 8000f5e:	2b99      	cmp	r3, #153	; 0x99
 8000f60:	dd0b      	ble.n	8000f7a <__aeabi_i2f+0x5a>
 8000f62:	2205      	movs	r2, #5
 8000f64:	002e      	movs	r6, r5
 8000f66:	1a12      	subs	r2, r2, r0
 8000f68:	40d6      	lsrs	r6, r2
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	321b      	adds	r2, #27
 8000f6e:	4095      	lsls	r5, r2
 8000f70:	0028      	movs	r0, r5
 8000f72:	1e45      	subs	r5, r0, #1
 8000f74:	41a8      	sbcs	r0, r5
 8000f76:	0035      	movs	r5, r6
 8000f78:	4305      	orrs	r5, r0
 8000f7a:	2905      	cmp	r1, #5
 8000f7c:	dd01      	ble.n	8000f82 <__aeabi_i2f+0x62>
 8000f7e:	1f4a      	subs	r2, r1, #5
 8000f80:	4095      	lsls	r5, r2
 8000f82:	002a      	movs	r2, r5
 8000f84:	4e08      	ldr	r6, [pc, #32]	; (8000fa8 <__aeabi_i2f+0x88>)
 8000f86:	4032      	ands	r2, r6
 8000f88:	0768      	lsls	r0, r5, #29
 8000f8a:	d009      	beq.n	8000fa0 <__aeabi_i2f+0x80>
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	4028      	ands	r0, r5
 8000f90:	2804      	cmp	r0, #4
 8000f92:	d005      	beq.n	8000fa0 <__aeabi_i2f+0x80>
 8000f94:	3204      	adds	r2, #4
 8000f96:	0150      	lsls	r0, r2, #5
 8000f98:	d502      	bpl.n	8000fa0 <__aeabi_i2f+0x80>
 8000f9a:	239f      	movs	r3, #159	; 0x9f
 8000f9c:	4032      	ands	r2, r6
 8000f9e:	1a5b      	subs	r3, r3, r1
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	0a55      	lsrs	r5, r2, #9
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	e7d5      	b.n	8000f54 <__aeabi_i2f+0x34>
 8000fa8:	fbffffff 	.word	0xfbffffff

08000fac <__aeabi_ddiv>:
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	4657      	mov	r7, sl
 8000fb0:	464e      	mov	r6, r9
 8000fb2:	4645      	mov	r5, r8
 8000fb4:	46de      	mov	lr, fp
 8000fb6:	b5e0      	push	{r5, r6, r7, lr}
 8000fb8:	4681      	mov	r9, r0
 8000fba:	0005      	movs	r5, r0
 8000fbc:	030c      	lsls	r4, r1, #12
 8000fbe:	0048      	lsls	r0, r1, #1
 8000fc0:	4692      	mov	sl, r2
 8000fc2:	001f      	movs	r7, r3
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	0d40      	lsrs	r0, r0, #21
 8000fca:	0fce      	lsrs	r6, r1, #31
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d059      	beq.n	8001084 <__aeabi_ddiv+0xd8>
 8000fd0:	4b87      	ldr	r3, [pc, #540]	; (80011f0 <__aeabi_ddiv+0x244>)
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_ddiv+0x2c>
 8000fd6:	e098      	b.n	800110a <__aeabi_ddiv+0x15e>
 8000fd8:	0f6b      	lsrs	r3, r5, #29
 8000fda:	00e4      	lsls	r4, r4, #3
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <__aeabi_ddiv+0x248>)
 8000fe8:	00ed      	lsls	r5, r5, #3
 8000fea:	469b      	mov	fp, r3
 8000fec:	2300      	movs	r3, #0
 8000fee:	4699      	mov	r9, r3
 8000ff0:	4483      	add	fp, r0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	033c      	lsls	r4, r7, #12
 8000ff6:	007b      	lsls	r3, r7, #1
 8000ff8:	4650      	mov	r0, sl
 8000ffa:	0b24      	lsrs	r4, r4, #12
 8000ffc:	0d5b      	lsrs	r3, r3, #21
 8000ffe:	0fff      	lsrs	r7, r7, #31
 8001000:	2b00      	cmp	r3, #0
 8001002:	d067      	beq.n	80010d4 <__aeabi_ddiv+0x128>
 8001004:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <__aeabi_ddiv+0x244>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d018      	beq.n	800103c <__aeabi_ddiv+0x90>
 800100a:	497a      	ldr	r1, [pc, #488]	; (80011f4 <__aeabi_ddiv+0x248>)
 800100c:	0f42      	lsrs	r2, r0, #29
 800100e:	468c      	mov	ip, r1
 8001010:	00e4      	lsls	r4, r4, #3
 8001012:	4659      	mov	r1, fp
 8001014:	4314      	orrs	r4, r2
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	4463      	add	r3, ip
 800101a:	0412      	lsls	r2, r2, #16
 800101c:	1acb      	subs	r3, r1, r3
 800101e:	4314      	orrs	r4, r2
 8001020:	469b      	mov	fp, r3
 8001022:	00c2      	lsls	r2, r0, #3
 8001024:	2000      	movs	r0, #0
 8001026:	0033      	movs	r3, r6
 8001028:	407b      	eors	r3, r7
 800102a:	469a      	mov	sl, r3
 800102c:	464b      	mov	r3, r9
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x88>
 8001032:	e0ef      	b.n	8001214 <__aeabi_ddiv+0x268>
 8001034:	4970      	ldr	r1, [pc, #448]	; (80011f8 <__aeabi_ddiv+0x24c>)
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	58cb      	ldr	r3, [r1, r3]
 800103a:	469f      	mov	pc, r3
 800103c:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <__aeabi_ddiv+0x250>)
 800103e:	4652      	mov	r2, sl
 8001040:	469c      	mov	ip, r3
 8001042:	4322      	orrs	r2, r4
 8001044:	44e3      	add	fp, ip
 8001046:	2a00      	cmp	r2, #0
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0xa0>
 800104a:	e095      	b.n	8001178 <__aeabi_ddiv+0x1cc>
 800104c:	4649      	mov	r1, r9
 800104e:	2302      	movs	r3, #2
 8001050:	4319      	orrs	r1, r3
 8001052:	4689      	mov	r9, r1
 8001054:	2400      	movs	r4, #0
 8001056:	2002      	movs	r0, #2
 8001058:	e7e5      	b.n	8001026 <__aeabi_ddiv+0x7a>
 800105a:	2300      	movs	r3, #0
 800105c:	2400      	movs	r4, #0
 800105e:	2500      	movs	r5, #0
 8001060:	4652      	mov	r2, sl
 8001062:	051b      	lsls	r3, r3, #20
 8001064:	4323      	orrs	r3, r4
 8001066:	07d2      	lsls	r2, r2, #31
 8001068:	4313      	orrs	r3, r2
 800106a:	0028      	movs	r0, r5
 800106c:	0019      	movs	r1, r3
 800106e:	b005      	add	sp, #20
 8001070:	bcf0      	pop	{r4, r5, r6, r7}
 8001072:	46bb      	mov	fp, r7
 8001074:	46b2      	mov	sl, r6
 8001076:	46a9      	mov	r9, r5
 8001078:	46a0      	mov	r8, r4
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107c:	2400      	movs	r4, #0
 800107e:	2500      	movs	r5, #0
 8001080:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <__aeabi_ddiv+0x244>)
 8001082:	e7ed      	b.n	8001060 <__aeabi_ddiv+0xb4>
 8001084:	464b      	mov	r3, r9
 8001086:	4323      	orrs	r3, r4
 8001088:	4698      	mov	r8, r3
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0xe2>
 800108c:	e089      	b.n	80011a2 <__aeabi_ddiv+0x1f6>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0xe8>
 8001092:	e1e0      	b.n	8001456 <__aeabi_ddiv+0x4aa>
 8001094:	0020      	movs	r0, r4
 8001096:	f000 fd95 	bl	8001bc4 <__clzsi2>
 800109a:	0001      	movs	r1, r0
 800109c:	0002      	movs	r2, r0
 800109e:	390b      	subs	r1, #11
 80010a0:	231d      	movs	r3, #29
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	4649      	mov	r1, r9
 80010a6:	0010      	movs	r0, r2
 80010a8:	40d9      	lsrs	r1, r3
 80010aa:	3808      	subs	r0, #8
 80010ac:	4084      	lsls	r4, r0
 80010ae:	000b      	movs	r3, r1
 80010b0:	464d      	mov	r5, r9
 80010b2:	4323      	orrs	r3, r4
 80010b4:	4698      	mov	r8, r3
 80010b6:	4085      	lsls	r5, r0
 80010b8:	4851      	ldr	r0, [pc, #324]	; (8001200 <__aeabi_ddiv+0x254>)
 80010ba:	033c      	lsls	r4, r7, #12
 80010bc:	1a83      	subs	r3, r0, r2
 80010be:	469b      	mov	fp, r3
 80010c0:	2300      	movs	r3, #0
 80010c2:	4699      	mov	r9, r3
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	007b      	lsls	r3, r7, #1
 80010c8:	4650      	mov	r0, sl
 80010ca:	0b24      	lsrs	r4, r4, #12
 80010cc:	0d5b      	lsrs	r3, r3, #21
 80010ce:	0fff      	lsrs	r7, r7, #31
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d197      	bne.n	8001004 <__aeabi_ddiv+0x58>
 80010d4:	4652      	mov	r2, sl
 80010d6:	4322      	orrs	r2, r4
 80010d8:	d055      	beq.n	8001186 <__aeabi_ddiv+0x1da>
 80010da:	2c00      	cmp	r4, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_ddiv+0x134>
 80010de:	e1ca      	b.n	8001476 <__aeabi_ddiv+0x4ca>
 80010e0:	0020      	movs	r0, r4
 80010e2:	f000 fd6f 	bl	8001bc4 <__clzsi2>
 80010e6:	0002      	movs	r2, r0
 80010e8:	3a0b      	subs	r2, #11
 80010ea:	231d      	movs	r3, #29
 80010ec:	0001      	movs	r1, r0
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	4652      	mov	r2, sl
 80010f2:	3908      	subs	r1, #8
 80010f4:	40da      	lsrs	r2, r3
 80010f6:	408c      	lsls	r4, r1
 80010f8:	4314      	orrs	r4, r2
 80010fa:	4652      	mov	r2, sl
 80010fc:	408a      	lsls	r2, r1
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <__aeabi_ddiv+0x258>)
 8001100:	4458      	add	r0, fp
 8001102:	469b      	mov	fp, r3
 8001104:	4483      	add	fp, r0
 8001106:	2000      	movs	r0, #0
 8001108:	e78d      	b.n	8001026 <__aeabi_ddiv+0x7a>
 800110a:	464b      	mov	r3, r9
 800110c:	4323      	orrs	r3, r4
 800110e:	4698      	mov	r8, r3
 8001110:	d140      	bne.n	8001194 <__aeabi_ddiv+0x1e8>
 8001112:	2308      	movs	r3, #8
 8001114:	4699      	mov	r9, r3
 8001116:	3b06      	subs	r3, #6
 8001118:	2500      	movs	r5, #0
 800111a:	4683      	mov	fp, r0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	e769      	b.n	8000ff4 <__aeabi_ddiv+0x48>
 8001120:	46b2      	mov	sl, r6
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d0a9      	beq.n	800107c <__aeabi_ddiv+0xd0>
 8001128:	2b03      	cmp	r3, #3
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0x182>
 800112c:	e211      	b.n	8001552 <__aeabi_ddiv+0x5a6>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d093      	beq.n	800105a <__aeabi_ddiv+0xae>
 8001132:	4a35      	ldr	r2, [pc, #212]	; (8001208 <__aeabi_ddiv+0x25c>)
 8001134:	445a      	add	r2, fp
 8001136:	2a00      	cmp	r2, #0
 8001138:	dc00      	bgt.n	800113c <__aeabi_ddiv+0x190>
 800113a:	e13c      	b.n	80013b6 <__aeabi_ddiv+0x40a>
 800113c:	076b      	lsls	r3, r5, #29
 800113e:	d000      	beq.n	8001142 <__aeabi_ddiv+0x196>
 8001140:	e1a7      	b.n	8001492 <__aeabi_ddiv+0x4e6>
 8001142:	08ed      	lsrs	r5, r5, #3
 8001144:	4643      	mov	r3, r8
 8001146:	01db      	lsls	r3, r3, #7
 8001148:	d506      	bpl.n	8001158 <__aeabi_ddiv+0x1ac>
 800114a:	4642      	mov	r2, r8
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <__aeabi_ddiv+0x260>)
 800114e:	401a      	ands	r2, r3
 8001150:	4690      	mov	r8, r2
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	445a      	add	r2, fp
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <__aeabi_ddiv+0x264>)
 800115a:	429a      	cmp	r2, r3
 800115c:	dc8e      	bgt.n	800107c <__aeabi_ddiv+0xd0>
 800115e:	4643      	mov	r3, r8
 8001160:	0552      	lsls	r2, r2, #21
 8001162:	0758      	lsls	r0, r3, #29
 8001164:	025c      	lsls	r4, r3, #9
 8001166:	4305      	orrs	r5, r0
 8001168:	0b24      	lsrs	r4, r4, #12
 800116a:	0d53      	lsrs	r3, r2, #21
 800116c:	e778      	b.n	8001060 <__aeabi_ddiv+0xb4>
 800116e:	46ba      	mov	sl, r7
 8001170:	46a0      	mov	r8, r4
 8001172:	0015      	movs	r5, r2
 8001174:	9000      	str	r0, [sp, #0]
 8001176:	e7d4      	b.n	8001122 <__aeabi_ddiv+0x176>
 8001178:	464a      	mov	r2, r9
 800117a:	2303      	movs	r3, #3
 800117c:	431a      	orrs	r2, r3
 800117e:	4691      	mov	r9, r2
 8001180:	2003      	movs	r0, #3
 8001182:	4652      	mov	r2, sl
 8001184:	e74f      	b.n	8001026 <__aeabi_ddiv+0x7a>
 8001186:	4649      	mov	r1, r9
 8001188:	2301      	movs	r3, #1
 800118a:	4319      	orrs	r1, r3
 800118c:	4689      	mov	r9, r1
 800118e:	2400      	movs	r4, #0
 8001190:	2001      	movs	r0, #1
 8001192:	e748      	b.n	8001026 <__aeabi_ddiv+0x7a>
 8001194:	230c      	movs	r3, #12
 8001196:	4699      	mov	r9, r3
 8001198:	3b09      	subs	r3, #9
 800119a:	46a0      	mov	r8, r4
 800119c:	4683      	mov	fp, r0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	e728      	b.n	8000ff4 <__aeabi_ddiv+0x48>
 80011a2:	2304      	movs	r3, #4
 80011a4:	4699      	mov	r9, r3
 80011a6:	2300      	movs	r3, #0
 80011a8:	469b      	mov	fp, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	2500      	movs	r5, #0
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	e720      	b.n	8000ff4 <__aeabi_ddiv+0x48>
 80011b2:	2300      	movs	r3, #0
 80011b4:	2480      	movs	r4, #128	; 0x80
 80011b6:	469a      	mov	sl, r3
 80011b8:	2500      	movs	r5, #0
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <__aeabi_ddiv+0x244>)
 80011bc:	0324      	lsls	r4, r4, #12
 80011be:	e74f      	b.n	8001060 <__aeabi_ddiv+0xb4>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	4641      	mov	r1, r8
 80011c4:	031b      	lsls	r3, r3, #12
 80011c6:	4219      	tst	r1, r3
 80011c8:	d008      	beq.n	80011dc <__aeabi_ddiv+0x230>
 80011ca:	421c      	tst	r4, r3
 80011cc:	d106      	bne.n	80011dc <__aeabi_ddiv+0x230>
 80011ce:	431c      	orrs	r4, r3
 80011d0:	0324      	lsls	r4, r4, #12
 80011d2:	46ba      	mov	sl, r7
 80011d4:	0015      	movs	r5, r2
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <__aeabi_ddiv+0x244>)
 80011d8:	0b24      	lsrs	r4, r4, #12
 80011da:	e741      	b.n	8001060 <__aeabi_ddiv+0xb4>
 80011dc:	2480      	movs	r4, #128	; 0x80
 80011de:	4643      	mov	r3, r8
 80011e0:	0324      	lsls	r4, r4, #12
 80011e2:	431c      	orrs	r4, r3
 80011e4:	0324      	lsls	r4, r4, #12
 80011e6:	46b2      	mov	sl, r6
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <__aeabi_ddiv+0x244>)
 80011ea:	0b24      	lsrs	r4, r4, #12
 80011ec:	e738      	b.n	8001060 <__aeabi_ddiv+0xb4>
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	000007ff 	.word	0x000007ff
 80011f4:	fffffc01 	.word	0xfffffc01
 80011f8:	08005f9c 	.word	0x08005f9c
 80011fc:	fffff801 	.word	0xfffff801
 8001200:	fffffc0d 	.word	0xfffffc0d
 8001204:	000003f3 	.word	0x000003f3
 8001208:	000003ff 	.word	0x000003ff
 800120c:	feffffff 	.word	0xfeffffff
 8001210:	000007fe 	.word	0x000007fe
 8001214:	4544      	cmp	r4, r8
 8001216:	d200      	bcs.n	800121a <__aeabi_ddiv+0x26e>
 8001218:	e116      	b.n	8001448 <__aeabi_ddiv+0x49c>
 800121a:	d100      	bne.n	800121e <__aeabi_ddiv+0x272>
 800121c:	e111      	b.n	8001442 <__aeabi_ddiv+0x496>
 800121e:	2301      	movs	r3, #1
 8001220:	425b      	negs	r3, r3
 8001222:	469c      	mov	ip, r3
 8001224:	002e      	movs	r6, r5
 8001226:	4640      	mov	r0, r8
 8001228:	2500      	movs	r5, #0
 800122a:	44e3      	add	fp, ip
 800122c:	0223      	lsls	r3, r4, #8
 800122e:	0e14      	lsrs	r4, r2, #24
 8001230:	431c      	orrs	r4, r3
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	4699      	mov	r9, r3
 8001236:	0423      	lsls	r3, r4, #16
 8001238:	0c1f      	lsrs	r7, r3, #16
 800123a:	0212      	lsls	r2, r2, #8
 800123c:	4649      	mov	r1, r9
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	9701      	str	r7, [sp, #4]
 8001242:	f7fe ffe7 	bl	8000214 <__aeabi_uidivmod>
 8001246:	0002      	movs	r2, r0
 8001248:	437a      	muls	r2, r7
 800124a:	040b      	lsls	r3, r1, #16
 800124c:	0c31      	lsrs	r1, r6, #16
 800124e:	4680      	mov	r8, r0
 8001250:	4319      	orrs	r1, r3
 8001252:	428a      	cmp	r2, r1
 8001254:	d90b      	bls.n	800126e <__aeabi_ddiv+0x2c2>
 8001256:	2301      	movs	r3, #1
 8001258:	425b      	negs	r3, r3
 800125a:	469c      	mov	ip, r3
 800125c:	1909      	adds	r1, r1, r4
 800125e:	44e0      	add	r8, ip
 8001260:	428c      	cmp	r4, r1
 8001262:	d804      	bhi.n	800126e <__aeabi_ddiv+0x2c2>
 8001264:	428a      	cmp	r2, r1
 8001266:	d902      	bls.n	800126e <__aeabi_ddiv+0x2c2>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	4698      	mov	r8, r3
 800126c:	1909      	adds	r1, r1, r4
 800126e:	1a88      	subs	r0, r1, r2
 8001270:	4649      	mov	r1, r9
 8001272:	f7fe ffcf 	bl	8000214 <__aeabi_uidivmod>
 8001276:	0409      	lsls	r1, r1, #16
 8001278:	468c      	mov	ip, r1
 800127a:	0431      	lsls	r1, r6, #16
 800127c:	4666      	mov	r6, ip
 800127e:	9a01      	ldr	r2, [sp, #4]
 8001280:	0c09      	lsrs	r1, r1, #16
 8001282:	4342      	muls	r2, r0
 8001284:	0003      	movs	r3, r0
 8001286:	4331      	orrs	r1, r6
 8001288:	428a      	cmp	r2, r1
 800128a:	d904      	bls.n	8001296 <__aeabi_ddiv+0x2ea>
 800128c:	1909      	adds	r1, r1, r4
 800128e:	3b01      	subs	r3, #1
 8001290:	428c      	cmp	r4, r1
 8001292:	d800      	bhi.n	8001296 <__aeabi_ddiv+0x2ea>
 8001294:	e111      	b.n	80014ba <__aeabi_ddiv+0x50e>
 8001296:	1a89      	subs	r1, r1, r2
 8001298:	4642      	mov	r2, r8
 800129a:	9e00      	ldr	r6, [sp, #0]
 800129c:	0412      	lsls	r2, r2, #16
 800129e:	431a      	orrs	r2, r3
 80012a0:	0c33      	lsrs	r3, r6, #16
 80012a2:	001f      	movs	r7, r3
 80012a4:	0c10      	lsrs	r0, r2, #16
 80012a6:	4690      	mov	r8, r2
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	0413      	lsls	r3, r2, #16
 80012ac:	0432      	lsls	r2, r6, #16
 80012ae:	0c16      	lsrs	r6, r2, #16
 80012b0:	0032      	movs	r2, r6
 80012b2:	0c1b      	lsrs	r3, r3, #16
 80012b4:	435a      	muls	r2, r3
 80012b6:	9603      	str	r6, [sp, #12]
 80012b8:	437b      	muls	r3, r7
 80012ba:	4346      	muls	r6, r0
 80012bc:	4378      	muls	r0, r7
 80012be:	0c17      	lsrs	r7, r2, #16
 80012c0:	46bc      	mov	ip, r7
 80012c2:	199b      	adds	r3, r3, r6
 80012c4:	4463      	add	r3, ip
 80012c6:	429e      	cmp	r6, r3
 80012c8:	d903      	bls.n	80012d2 <__aeabi_ddiv+0x326>
 80012ca:	2680      	movs	r6, #128	; 0x80
 80012cc:	0276      	lsls	r6, r6, #9
 80012ce:	46b4      	mov	ip, r6
 80012d0:	4460      	add	r0, ip
 80012d2:	0c1e      	lsrs	r6, r3, #16
 80012d4:	1830      	adds	r0, r6, r0
 80012d6:	0416      	lsls	r6, r2, #16
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	0c36      	lsrs	r6, r6, #16
 80012dc:	199e      	adds	r6, r3, r6
 80012de:	4281      	cmp	r1, r0
 80012e0:	d200      	bcs.n	80012e4 <__aeabi_ddiv+0x338>
 80012e2:	e09c      	b.n	800141e <__aeabi_ddiv+0x472>
 80012e4:	d100      	bne.n	80012e8 <__aeabi_ddiv+0x33c>
 80012e6:	e097      	b.n	8001418 <__aeabi_ddiv+0x46c>
 80012e8:	1bae      	subs	r6, r5, r6
 80012ea:	1a09      	subs	r1, r1, r0
 80012ec:	42b5      	cmp	r5, r6
 80012ee:	4180      	sbcs	r0, r0
 80012f0:	4240      	negs	r0, r0
 80012f2:	1a08      	subs	r0, r1, r0
 80012f4:	4284      	cmp	r4, r0
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x34e>
 80012f8:	e111      	b.n	800151e <__aeabi_ddiv+0x572>
 80012fa:	4649      	mov	r1, r9
 80012fc:	f7fe ff8a 	bl	8000214 <__aeabi_uidivmod>
 8001300:	9a01      	ldr	r2, [sp, #4]
 8001302:	040b      	lsls	r3, r1, #16
 8001304:	4342      	muls	r2, r0
 8001306:	0c31      	lsrs	r1, r6, #16
 8001308:	0005      	movs	r5, r0
 800130a:	4319      	orrs	r1, r3
 800130c:	428a      	cmp	r2, r1
 800130e:	d907      	bls.n	8001320 <__aeabi_ddiv+0x374>
 8001310:	1909      	adds	r1, r1, r4
 8001312:	3d01      	subs	r5, #1
 8001314:	428c      	cmp	r4, r1
 8001316:	d803      	bhi.n	8001320 <__aeabi_ddiv+0x374>
 8001318:	428a      	cmp	r2, r1
 800131a:	d901      	bls.n	8001320 <__aeabi_ddiv+0x374>
 800131c:	1e85      	subs	r5, r0, #2
 800131e:	1909      	adds	r1, r1, r4
 8001320:	1a88      	subs	r0, r1, r2
 8001322:	4649      	mov	r1, r9
 8001324:	f7fe ff76 	bl	8000214 <__aeabi_uidivmod>
 8001328:	0409      	lsls	r1, r1, #16
 800132a:	468c      	mov	ip, r1
 800132c:	0431      	lsls	r1, r6, #16
 800132e:	4666      	mov	r6, ip
 8001330:	9a01      	ldr	r2, [sp, #4]
 8001332:	0c09      	lsrs	r1, r1, #16
 8001334:	4342      	muls	r2, r0
 8001336:	0003      	movs	r3, r0
 8001338:	4331      	orrs	r1, r6
 800133a:	428a      	cmp	r2, r1
 800133c:	d907      	bls.n	800134e <__aeabi_ddiv+0x3a2>
 800133e:	1909      	adds	r1, r1, r4
 8001340:	3b01      	subs	r3, #1
 8001342:	428c      	cmp	r4, r1
 8001344:	d803      	bhi.n	800134e <__aeabi_ddiv+0x3a2>
 8001346:	428a      	cmp	r2, r1
 8001348:	d901      	bls.n	800134e <__aeabi_ddiv+0x3a2>
 800134a:	1e83      	subs	r3, r0, #2
 800134c:	1909      	adds	r1, r1, r4
 800134e:	9e03      	ldr	r6, [sp, #12]
 8001350:	1a89      	subs	r1, r1, r2
 8001352:	0032      	movs	r2, r6
 8001354:	042d      	lsls	r5, r5, #16
 8001356:	431d      	orrs	r5, r3
 8001358:	9f02      	ldr	r7, [sp, #8]
 800135a:	042b      	lsls	r3, r5, #16
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	435a      	muls	r2, r3
 8001360:	437b      	muls	r3, r7
 8001362:	469c      	mov	ip, r3
 8001364:	0c28      	lsrs	r0, r5, #16
 8001366:	4346      	muls	r6, r0
 8001368:	0c13      	lsrs	r3, r2, #16
 800136a:	44b4      	add	ip, r6
 800136c:	4463      	add	r3, ip
 800136e:	4378      	muls	r0, r7
 8001370:	429e      	cmp	r6, r3
 8001372:	d903      	bls.n	800137c <__aeabi_ddiv+0x3d0>
 8001374:	2680      	movs	r6, #128	; 0x80
 8001376:	0276      	lsls	r6, r6, #9
 8001378:	46b4      	mov	ip, r6
 800137a:	4460      	add	r0, ip
 800137c:	0c1e      	lsrs	r6, r3, #16
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	0c12      	lsrs	r2, r2, #16
 8001384:	1830      	adds	r0, r6, r0
 8001386:	189b      	adds	r3, r3, r2
 8001388:	4281      	cmp	r1, r0
 800138a:	d306      	bcc.n	800139a <__aeabi_ddiv+0x3ee>
 800138c:	d002      	beq.n	8001394 <__aeabi_ddiv+0x3e8>
 800138e:	2301      	movs	r3, #1
 8001390:	431d      	orrs	r5, r3
 8001392:	e6ce      	b.n	8001132 <__aeabi_ddiv+0x186>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d100      	bne.n	800139a <__aeabi_ddiv+0x3ee>
 8001398:	e6cb      	b.n	8001132 <__aeabi_ddiv+0x186>
 800139a:	1861      	adds	r1, r4, r1
 800139c:	1e6e      	subs	r6, r5, #1
 800139e:	42a1      	cmp	r1, r4
 80013a0:	d200      	bcs.n	80013a4 <__aeabi_ddiv+0x3f8>
 80013a2:	e0a4      	b.n	80014ee <__aeabi_ddiv+0x542>
 80013a4:	4281      	cmp	r1, r0
 80013a6:	d200      	bcs.n	80013aa <__aeabi_ddiv+0x3fe>
 80013a8:	e0c9      	b.n	800153e <__aeabi_ddiv+0x592>
 80013aa:	d100      	bne.n	80013ae <__aeabi_ddiv+0x402>
 80013ac:	e0d9      	b.n	8001562 <__aeabi_ddiv+0x5b6>
 80013ae:	0035      	movs	r5, r6
 80013b0:	e7ed      	b.n	800138e <__aeabi_ddiv+0x3e2>
 80013b2:	2501      	movs	r5, #1
 80013b4:	426d      	negs	r5, r5
 80013b6:	2101      	movs	r1, #1
 80013b8:	1a89      	subs	r1, r1, r2
 80013ba:	2938      	cmp	r1, #56	; 0x38
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_ddiv+0x414>
 80013be:	e64c      	b.n	800105a <__aeabi_ddiv+0xae>
 80013c0:	291f      	cmp	r1, #31
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_ddiv+0x41a>
 80013c4:	e07f      	b.n	80014c6 <__aeabi_ddiv+0x51a>
 80013c6:	231f      	movs	r3, #31
 80013c8:	425b      	negs	r3, r3
 80013ca:	1a9a      	subs	r2, r3, r2
 80013cc:	4643      	mov	r3, r8
 80013ce:	40d3      	lsrs	r3, r2
 80013d0:	2920      	cmp	r1, #32
 80013d2:	d004      	beq.n	80013de <__aeabi_ddiv+0x432>
 80013d4:	4644      	mov	r4, r8
 80013d6:	4a65      	ldr	r2, [pc, #404]	; (800156c <__aeabi_ddiv+0x5c0>)
 80013d8:	445a      	add	r2, fp
 80013da:	4094      	lsls	r4, r2
 80013dc:	4325      	orrs	r5, r4
 80013de:	1e6a      	subs	r2, r5, #1
 80013e0:	4195      	sbcs	r5, r2
 80013e2:	2207      	movs	r2, #7
 80013e4:	432b      	orrs	r3, r5
 80013e6:	0015      	movs	r5, r2
 80013e8:	2400      	movs	r4, #0
 80013ea:	401d      	ands	r5, r3
 80013ec:	421a      	tst	r2, r3
 80013ee:	d100      	bne.n	80013f2 <__aeabi_ddiv+0x446>
 80013f0:	e0a1      	b.n	8001536 <__aeabi_ddiv+0x58a>
 80013f2:	220f      	movs	r2, #15
 80013f4:	2400      	movs	r4, #0
 80013f6:	401a      	ands	r2, r3
 80013f8:	2a04      	cmp	r2, #4
 80013fa:	d100      	bne.n	80013fe <__aeabi_ddiv+0x452>
 80013fc:	e098      	b.n	8001530 <__aeabi_ddiv+0x584>
 80013fe:	1d1a      	adds	r2, r3, #4
 8001400:	429a      	cmp	r2, r3
 8001402:	419b      	sbcs	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	18e4      	adds	r4, r4, r3
 8001408:	0013      	movs	r3, r2
 800140a:	0222      	lsls	r2, r4, #8
 800140c:	d400      	bmi.n	8001410 <__aeabi_ddiv+0x464>
 800140e:	e08f      	b.n	8001530 <__aeabi_ddiv+0x584>
 8001410:	2301      	movs	r3, #1
 8001412:	2400      	movs	r4, #0
 8001414:	2500      	movs	r5, #0
 8001416:	e623      	b.n	8001060 <__aeabi_ddiv+0xb4>
 8001418:	42b5      	cmp	r5, r6
 800141a:	d300      	bcc.n	800141e <__aeabi_ddiv+0x472>
 800141c:	e764      	b.n	80012e8 <__aeabi_ddiv+0x33c>
 800141e:	4643      	mov	r3, r8
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	9b00      	ldr	r3, [sp, #0]
 8001424:	469c      	mov	ip, r3
 8001426:	4465      	add	r5, ip
 8001428:	001f      	movs	r7, r3
 800142a:	429d      	cmp	r5, r3
 800142c:	419b      	sbcs	r3, r3
 800142e:	425b      	negs	r3, r3
 8001430:	191b      	adds	r3, r3, r4
 8001432:	18c9      	adds	r1, r1, r3
 8001434:	428c      	cmp	r4, r1
 8001436:	d23a      	bcs.n	80014ae <__aeabi_ddiv+0x502>
 8001438:	4288      	cmp	r0, r1
 800143a:	d863      	bhi.n	8001504 <__aeabi_ddiv+0x558>
 800143c:	d060      	beq.n	8001500 <__aeabi_ddiv+0x554>
 800143e:	4690      	mov	r8, r2
 8001440:	e752      	b.n	80012e8 <__aeabi_ddiv+0x33c>
 8001442:	42aa      	cmp	r2, r5
 8001444:	d900      	bls.n	8001448 <__aeabi_ddiv+0x49c>
 8001446:	e6ea      	b.n	800121e <__aeabi_ddiv+0x272>
 8001448:	4643      	mov	r3, r8
 800144a:	07de      	lsls	r6, r3, #31
 800144c:	0858      	lsrs	r0, r3, #1
 800144e:	086b      	lsrs	r3, r5, #1
 8001450:	431e      	orrs	r6, r3
 8001452:	07ed      	lsls	r5, r5, #31
 8001454:	e6ea      	b.n	800122c <__aeabi_ddiv+0x280>
 8001456:	4648      	mov	r0, r9
 8001458:	f000 fbb4 	bl	8001bc4 <__clzsi2>
 800145c:	0001      	movs	r1, r0
 800145e:	0002      	movs	r2, r0
 8001460:	3115      	adds	r1, #21
 8001462:	3220      	adds	r2, #32
 8001464:	291c      	cmp	r1, #28
 8001466:	dc00      	bgt.n	800146a <__aeabi_ddiv+0x4be>
 8001468:	e61a      	b.n	80010a0 <__aeabi_ddiv+0xf4>
 800146a:	464b      	mov	r3, r9
 800146c:	3808      	subs	r0, #8
 800146e:	4083      	lsls	r3, r0
 8001470:	2500      	movs	r5, #0
 8001472:	4698      	mov	r8, r3
 8001474:	e620      	b.n	80010b8 <__aeabi_ddiv+0x10c>
 8001476:	f000 fba5 	bl	8001bc4 <__clzsi2>
 800147a:	0003      	movs	r3, r0
 800147c:	001a      	movs	r2, r3
 800147e:	3215      	adds	r2, #21
 8001480:	3020      	adds	r0, #32
 8001482:	2a1c      	cmp	r2, #28
 8001484:	dc00      	bgt.n	8001488 <__aeabi_ddiv+0x4dc>
 8001486:	e630      	b.n	80010ea <__aeabi_ddiv+0x13e>
 8001488:	4654      	mov	r4, sl
 800148a:	3b08      	subs	r3, #8
 800148c:	2200      	movs	r2, #0
 800148e:	409c      	lsls	r4, r3
 8001490:	e635      	b.n	80010fe <__aeabi_ddiv+0x152>
 8001492:	230f      	movs	r3, #15
 8001494:	402b      	ands	r3, r5
 8001496:	2b04      	cmp	r3, #4
 8001498:	d100      	bne.n	800149c <__aeabi_ddiv+0x4f0>
 800149a:	e652      	b.n	8001142 <__aeabi_ddiv+0x196>
 800149c:	2305      	movs	r3, #5
 800149e:	425b      	negs	r3, r3
 80014a0:	42ab      	cmp	r3, r5
 80014a2:	419b      	sbcs	r3, r3
 80014a4:	3504      	adds	r5, #4
 80014a6:	425b      	negs	r3, r3
 80014a8:	08ed      	lsrs	r5, r5, #3
 80014aa:	4498      	add	r8, r3
 80014ac:	e64a      	b.n	8001144 <__aeabi_ddiv+0x198>
 80014ae:	428c      	cmp	r4, r1
 80014b0:	d1c5      	bne.n	800143e <__aeabi_ddiv+0x492>
 80014b2:	42af      	cmp	r7, r5
 80014b4:	d9c0      	bls.n	8001438 <__aeabi_ddiv+0x48c>
 80014b6:	4690      	mov	r8, r2
 80014b8:	e716      	b.n	80012e8 <__aeabi_ddiv+0x33c>
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d800      	bhi.n	80014c0 <__aeabi_ddiv+0x514>
 80014be:	e6ea      	b.n	8001296 <__aeabi_ddiv+0x2ea>
 80014c0:	1e83      	subs	r3, r0, #2
 80014c2:	1909      	adds	r1, r1, r4
 80014c4:	e6e7      	b.n	8001296 <__aeabi_ddiv+0x2ea>
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <__aeabi_ddiv+0x5c4>)
 80014c8:	0028      	movs	r0, r5
 80014ca:	445a      	add	r2, fp
 80014cc:	4643      	mov	r3, r8
 80014ce:	4095      	lsls	r5, r2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	40c8      	lsrs	r0, r1
 80014d4:	1e6a      	subs	r2, r5, #1
 80014d6:	4195      	sbcs	r5, r2
 80014d8:	4644      	mov	r4, r8
 80014da:	4303      	orrs	r3, r0
 80014dc:	432b      	orrs	r3, r5
 80014de:	40cc      	lsrs	r4, r1
 80014e0:	075a      	lsls	r2, r3, #29
 80014e2:	d092      	beq.n	800140a <__aeabi_ddiv+0x45e>
 80014e4:	220f      	movs	r2, #15
 80014e6:	401a      	ands	r2, r3
 80014e8:	2a04      	cmp	r2, #4
 80014ea:	d188      	bne.n	80013fe <__aeabi_ddiv+0x452>
 80014ec:	e78d      	b.n	800140a <__aeabi_ddiv+0x45e>
 80014ee:	0035      	movs	r5, r6
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_ddiv+0x54a>
 80014f4:	e74b      	b.n	800138e <__aeabi_ddiv+0x3e2>
 80014f6:	9a00      	ldr	r2, [sp, #0]
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d000      	beq.n	80014fe <__aeabi_ddiv+0x552>
 80014fc:	e747      	b.n	800138e <__aeabi_ddiv+0x3e2>
 80014fe:	e618      	b.n	8001132 <__aeabi_ddiv+0x186>
 8001500:	42ae      	cmp	r6, r5
 8001502:	d99c      	bls.n	800143e <__aeabi_ddiv+0x492>
 8001504:	2302      	movs	r3, #2
 8001506:	425b      	negs	r3, r3
 8001508:	469c      	mov	ip, r3
 800150a:	9b00      	ldr	r3, [sp, #0]
 800150c:	44e0      	add	r8, ip
 800150e:	469c      	mov	ip, r3
 8001510:	4465      	add	r5, ip
 8001512:	429d      	cmp	r5, r3
 8001514:	419b      	sbcs	r3, r3
 8001516:	425b      	negs	r3, r3
 8001518:	191b      	adds	r3, r3, r4
 800151a:	18c9      	adds	r1, r1, r3
 800151c:	e6e4      	b.n	80012e8 <__aeabi_ddiv+0x33c>
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <__aeabi_ddiv+0x5c8>)
 8001520:	445a      	add	r2, fp
 8001522:	2a00      	cmp	r2, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_ddiv+0x57c>
 8001526:	e744      	b.n	80013b2 <__aeabi_ddiv+0x406>
 8001528:	2301      	movs	r3, #1
 800152a:	2500      	movs	r5, #0
 800152c:	4498      	add	r8, r3
 800152e:	e609      	b.n	8001144 <__aeabi_ddiv+0x198>
 8001530:	0765      	lsls	r5, r4, #29
 8001532:	0264      	lsls	r4, r4, #9
 8001534:	0b24      	lsrs	r4, r4, #12
 8001536:	08db      	lsrs	r3, r3, #3
 8001538:	431d      	orrs	r5, r3
 800153a:	2300      	movs	r3, #0
 800153c:	e590      	b.n	8001060 <__aeabi_ddiv+0xb4>
 800153e:	9e00      	ldr	r6, [sp, #0]
 8001540:	3d02      	subs	r5, #2
 8001542:	0072      	lsls	r2, r6, #1
 8001544:	42b2      	cmp	r2, r6
 8001546:	41bf      	sbcs	r7, r7
 8001548:	427f      	negs	r7, r7
 800154a:	193c      	adds	r4, r7, r4
 800154c:	1909      	adds	r1, r1, r4
 800154e:	9200      	str	r2, [sp, #0]
 8001550:	e7ce      	b.n	80014f0 <__aeabi_ddiv+0x544>
 8001552:	2480      	movs	r4, #128	; 0x80
 8001554:	4643      	mov	r3, r8
 8001556:	0324      	lsls	r4, r4, #12
 8001558:	431c      	orrs	r4, r3
 800155a:	0324      	lsls	r4, r4, #12
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <__aeabi_ddiv+0x5cc>)
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	e57e      	b.n	8001060 <__aeabi_ddiv+0xb4>
 8001562:	9a00      	ldr	r2, [sp, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d3ea      	bcc.n	800153e <__aeabi_ddiv+0x592>
 8001568:	0035      	movs	r5, r6
 800156a:	e7c4      	b.n	80014f6 <__aeabi_ddiv+0x54a>
 800156c:	0000043e 	.word	0x0000043e
 8001570:	0000041e 	.word	0x0000041e
 8001574:	000003ff 	.word	0x000003ff
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	4698      	mov	r8, r3
 800158a:	030c      	lsls	r4, r1, #12
 800158c:	004b      	lsls	r3, r1, #1
 800158e:	0006      	movs	r6, r0
 8001590:	4692      	mov	sl, r2
 8001592:	b087      	sub	sp, #28
 8001594:	0b24      	lsrs	r4, r4, #12
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	0fcf      	lsrs	r7, r1, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	d06c      	beq.n	8001678 <__aeabi_dmul+0xfc>
 800159e:	4add      	ldr	r2, [pc, #884]	; (8001914 <__aeabi_dmul+0x398>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dmul+0x2a>
 80015a4:	e086      	b.n	80016b4 <__aeabi_dmul+0x138>
 80015a6:	0f42      	lsrs	r2, r0, #29
 80015a8:	00e4      	lsls	r4, r4, #3
 80015aa:	4314      	orrs	r4, r2
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	0412      	lsls	r2, r2, #16
 80015b0:	4314      	orrs	r4, r2
 80015b2:	4ad9      	ldr	r2, [pc, #868]	; (8001918 <__aeabi_dmul+0x39c>)
 80015b4:	00c5      	lsls	r5, r0, #3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	4699      	mov	r9, r3
 80015c0:	469b      	mov	fp, r3
 80015c2:	4643      	mov	r3, r8
 80015c4:	4642      	mov	r2, r8
 80015c6:	031e      	lsls	r6, r3, #12
 80015c8:	0fd2      	lsrs	r2, r2, #31
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4650      	mov	r0, sl
 80015ce:	4690      	mov	r8, r2
 80015d0:	0b36      	lsrs	r6, r6, #12
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x5c>
 80015d6:	e078      	b.n	80016ca <__aeabi_dmul+0x14e>
 80015d8:	4ace      	ldr	r2, [pc, #824]	; (8001914 <__aeabi_dmul+0x398>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01d      	beq.n	800161a <__aeabi_dmul+0x9e>
 80015de:	49ce      	ldr	r1, [pc, #824]	; (8001918 <__aeabi_dmul+0x39c>)
 80015e0:	0f42      	lsrs	r2, r0, #29
 80015e2:	468c      	mov	ip, r1
 80015e4:	9900      	ldr	r1, [sp, #0]
 80015e6:	4463      	add	r3, ip
 80015e8:	00f6      	lsls	r6, r6, #3
 80015ea:	468c      	mov	ip, r1
 80015ec:	4316      	orrs	r6, r2
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	449c      	add	ip, r3
 80015f2:	0412      	lsls	r2, r2, #16
 80015f4:	4663      	mov	r3, ip
 80015f6:	4316      	orrs	r6, r2
 80015f8:	00c2      	lsls	r2, r0, #3
 80015fa:	2000      	movs	r0, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	9900      	ldr	r1, [sp, #0]
 8001600:	4643      	mov	r3, r8
 8001602:	3101      	adds	r1, #1
 8001604:	468c      	mov	ip, r1
 8001606:	4649      	mov	r1, r9
 8001608:	407b      	eors	r3, r7
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	290f      	cmp	r1, #15
 800160e:	d900      	bls.n	8001612 <__aeabi_dmul+0x96>
 8001610:	e07e      	b.n	8001710 <__aeabi_dmul+0x194>
 8001612:	4bc2      	ldr	r3, [pc, #776]	; (800191c <__aeabi_dmul+0x3a0>)
 8001614:	0089      	lsls	r1, r1, #2
 8001616:	5859      	ldr	r1, [r3, r1]
 8001618:	468f      	mov	pc, r1
 800161a:	4652      	mov	r2, sl
 800161c:	9b00      	ldr	r3, [sp, #0]
 800161e:	4332      	orrs	r2, r6
 8001620:	d000      	beq.n	8001624 <__aeabi_dmul+0xa8>
 8001622:	e156      	b.n	80018d2 <__aeabi_dmul+0x356>
 8001624:	49bb      	ldr	r1, [pc, #748]	; (8001914 <__aeabi_dmul+0x398>)
 8001626:	2600      	movs	r6, #0
 8001628:	468c      	mov	ip, r1
 800162a:	4463      	add	r3, ip
 800162c:	4649      	mov	r1, r9
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2302      	movs	r3, #2
 8001632:	4319      	orrs	r1, r3
 8001634:	4689      	mov	r9, r1
 8001636:	2002      	movs	r0, #2
 8001638:	e7e1      	b.n	80015fe <__aeabi_dmul+0x82>
 800163a:	4643      	mov	r3, r8
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	0034      	movs	r4, r6
 8001640:	0015      	movs	r5, r2
 8001642:	4683      	mov	fp, r0
 8001644:	465b      	mov	r3, fp
 8001646:	2b02      	cmp	r3, #2
 8001648:	d05e      	beq.n	8001708 <__aeabi_dmul+0x18c>
 800164a:	2b03      	cmp	r3, #3
 800164c:	d100      	bne.n	8001650 <__aeabi_dmul+0xd4>
 800164e:	e1f3      	b.n	8001a38 <__aeabi_dmul+0x4bc>
 8001650:	2b01      	cmp	r3, #1
 8001652:	d000      	beq.n	8001656 <__aeabi_dmul+0xda>
 8001654:	e118      	b.n	8001888 <__aeabi_dmul+0x30c>
 8001656:	2200      	movs	r2, #0
 8001658:	2400      	movs	r4, #0
 800165a:	2500      	movs	r5, #0
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	0512      	lsls	r2, r2, #20
 8001660:	4322      	orrs	r2, r4
 8001662:	07db      	lsls	r3, r3, #31
 8001664:	431a      	orrs	r2, r3
 8001666:	0028      	movs	r0, r5
 8001668:	0011      	movs	r1, r2
 800166a:	b007      	add	sp, #28
 800166c:	bcf0      	pop	{r4, r5, r6, r7}
 800166e:	46bb      	mov	fp, r7
 8001670:	46b2      	mov	sl, r6
 8001672:	46a9      	mov	r9, r5
 8001674:	46a0      	mov	r8, r4
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	0025      	movs	r5, r4
 800167a:	4305      	orrs	r5, r0
 800167c:	d100      	bne.n	8001680 <__aeabi_dmul+0x104>
 800167e:	e141      	b.n	8001904 <__aeabi_dmul+0x388>
 8001680:	2c00      	cmp	r4, #0
 8001682:	d100      	bne.n	8001686 <__aeabi_dmul+0x10a>
 8001684:	e1ad      	b.n	80019e2 <__aeabi_dmul+0x466>
 8001686:	0020      	movs	r0, r4
 8001688:	f000 fa9c 	bl	8001bc4 <__clzsi2>
 800168c:	0001      	movs	r1, r0
 800168e:	0002      	movs	r2, r0
 8001690:	390b      	subs	r1, #11
 8001692:	231d      	movs	r3, #29
 8001694:	0010      	movs	r0, r2
 8001696:	1a5b      	subs	r3, r3, r1
 8001698:	0031      	movs	r1, r6
 800169a:	0035      	movs	r5, r6
 800169c:	3808      	subs	r0, #8
 800169e:	4084      	lsls	r4, r0
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	4085      	lsls	r5, r0
 80016a4:	430c      	orrs	r4, r1
 80016a6:	489e      	ldr	r0, [pc, #632]	; (8001920 <__aeabi_dmul+0x3a4>)
 80016a8:	1a83      	subs	r3, r0, r2
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	469b      	mov	fp, r3
 80016b2:	e786      	b.n	80015c2 <__aeabi_dmul+0x46>
 80016b4:	0005      	movs	r5, r0
 80016b6:	4325      	orrs	r5, r4
 80016b8:	d000      	beq.n	80016bc <__aeabi_dmul+0x140>
 80016ba:	e11c      	b.n	80018f6 <__aeabi_dmul+0x37a>
 80016bc:	2208      	movs	r2, #8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2302      	movs	r3, #2
 80016c2:	2400      	movs	r4, #0
 80016c4:	4691      	mov	r9, r2
 80016c6:	469b      	mov	fp, r3
 80016c8:	e77b      	b.n	80015c2 <__aeabi_dmul+0x46>
 80016ca:	4652      	mov	r2, sl
 80016cc:	4332      	orrs	r2, r6
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dmul+0x156>
 80016d0:	e10a      	b.n	80018e8 <__aeabi_dmul+0x36c>
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0x15c>
 80016d6:	e176      	b.n	80019c6 <__aeabi_dmul+0x44a>
 80016d8:	0030      	movs	r0, r6
 80016da:	f000 fa73 	bl	8001bc4 <__clzsi2>
 80016de:	0002      	movs	r2, r0
 80016e0:	3a0b      	subs	r2, #11
 80016e2:	231d      	movs	r3, #29
 80016e4:	0001      	movs	r1, r0
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	4652      	mov	r2, sl
 80016ea:	3908      	subs	r1, #8
 80016ec:	40da      	lsrs	r2, r3
 80016ee:	408e      	lsls	r6, r1
 80016f0:	4316      	orrs	r6, r2
 80016f2:	4652      	mov	r2, sl
 80016f4:	408a      	lsls	r2, r1
 80016f6:	9b00      	ldr	r3, [sp, #0]
 80016f8:	4989      	ldr	r1, [pc, #548]	; (8001920 <__aeabi_dmul+0x3a4>)
 80016fa:	1a18      	subs	r0, r3, r0
 80016fc:	0003      	movs	r3, r0
 80016fe:	468c      	mov	ip, r1
 8001700:	4463      	add	r3, ip
 8001702:	2000      	movs	r0, #0
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	e77a      	b.n	80015fe <__aeabi_dmul+0x82>
 8001708:	2400      	movs	r4, #0
 800170a:	2500      	movs	r5, #0
 800170c:	4a81      	ldr	r2, [pc, #516]	; (8001914 <__aeabi_dmul+0x398>)
 800170e:	e7a5      	b.n	800165c <__aeabi_dmul+0xe0>
 8001710:	0c2f      	lsrs	r7, r5, #16
 8001712:	042d      	lsls	r5, r5, #16
 8001714:	0c2d      	lsrs	r5, r5, #16
 8001716:	002b      	movs	r3, r5
 8001718:	0c11      	lsrs	r1, r2, #16
 800171a:	0412      	lsls	r2, r2, #16
 800171c:	0c12      	lsrs	r2, r2, #16
 800171e:	4353      	muls	r3, r2
 8001720:	4698      	mov	r8, r3
 8001722:	0013      	movs	r3, r2
 8001724:	0028      	movs	r0, r5
 8001726:	437b      	muls	r3, r7
 8001728:	4699      	mov	r9, r3
 800172a:	4348      	muls	r0, r1
 800172c:	4448      	add	r0, r9
 800172e:	4683      	mov	fp, r0
 8001730:	4640      	mov	r0, r8
 8001732:	000b      	movs	r3, r1
 8001734:	0c00      	lsrs	r0, r0, #16
 8001736:	4682      	mov	sl, r0
 8001738:	4658      	mov	r0, fp
 800173a:	437b      	muls	r3, r7
 800173c:	4450      	add	r0, sl
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	4581      	cmp	r9, r0
 8001742:	d906      	bls.n	8001752 <__aeabi_dmul+0x1d6>
 8001744:	469a      	mov	sl, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	4699      	mov	r9, r3
 800174c:	44ca      	add	sl, r9
 800174e:	4653      	mov	r3, sl
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	0c03      	lsrs	r3, r0, #16
 8001754:	469b      	mov	fp, r3
 8001756:	4643      	mov	r3, r8
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	0400      	lsls	r0, r0, #16
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	4698      	mov	r8, r3
 8001760:	0003      	movs	r3, r0
 8001762:	4443      	add	r3, r8
 8001764:	9304      	str	r3, [sp, #16]
 8001766:	0c33      	lsrs	r3, r6, #16
 8001768:	4699      	mov	r9, r3
 800176a:	002b      	movs	r3, r5
 800176c:	0436      	lsls	r6, r6, #16
 800176e:	0c36      	lsrs	r6, r6, #16
 8001770:	4373      	muls	r3, r6
 8001772:	4698      	mov	r8, r3
 8001774:	0033      	movs	r3, r6
 8001776:	437b      	muls	r3, r7
 8001778:	469a      	mov	sl, r3
 800177a:	464b      	mov	r3, r9
 800177c:	435d      	muls	r5, r3
 800177e:	435f      	muls	r7, r3
 8001780:	4643      	mov	r3, r8
 8001782:	4455      	add	r5, sl
 8001784:	0c18      	lsrs	r0, r3, #16
 8001786:	1940      	adds	r0, r0, r5
 8001788:	4582      	cmp	sl, r0
 800178a:	d903      	bls.n	8001794 <__aeabi_dmul+0x218>
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	469a      	mov	sl, r3
 8001792:	4457      	add	r7, sl
 8001794:	0c05      	lsrs	r5, r0, #16
 8001796:	19eb      	adds	r3, r5, r7
 8001798:	9305      	str	r3, [sp, #20]
 800179a:	4643      	mov	r3, r8
 800179c:	041d      	lsls	r5, r3, #16
 800179e:	0c2d      	lsrs	r5, r5, #16
 80017a0:	0400      	lsls	r0, r0, #16
 80017a2:	1940      	adds	r0, r0, r5
 80017a4:	0c25      	lsrs	r5, r4, #16
 80017a6:	0424      	lsls	r4, r4, #16
 80017a8:	0c24      	lsrs	r4, r4, #16
 80017aa:	0027      	movs	r7, r4
 80017ac:	4357      	muls	r7, r2
 80017ae:	436a      	muls	r2, r5
 80017b0:	4690      	mov	r8, r2
 80017b2:	002a      	movs	r2, r5
 80017b4:	0c3b      	lsrs	r3, r7, #16
 80017b6:	469a      	mov	sl, r3
 80017b8:	434a      	muls	r2, r1
 80017ba:	4361      	muls	r1, r4
 80017bc:	4441      	add	r1, r8
 80017be:	4451      	add	r1, sl
 80017c0:	4483      	add	fp, r0
 80017c2:	4588      	cmp	r8, r1
 80017c4:	d903      	bls.n	80017ce <__aeabi_dmul+0x252>
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	4698      	mov	r8, r3
 80017cc:	4442      	add	r2, r8
 80017ce:	043f      	lsls	r7, r7, #16
 80017d0:	0c0b      	lsrs	r3, r1, #16
 80017d2:	0c3f      	lsrs	r7, r7, #16
 80017d4:	0409      	lsls	r1, r1, #16
 80017d6:	19c9      	adds	r1, r1, r7
 80017d8:	0027      	movs	r7, r4
 80017da:	4698      	mov	r8, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	4377      	muls	r7, r6
 80017e0:	435c      	muls	r4, r3
 80017e2:	436e      	muls	r6, r5
 80017e4:	435d      	muls	r5, r3
 80017e6:	0c3b      	lsrs	r3, r7, #16
 80017e8:	4699      	mov	r9, r3
 80017ea:	19a4      	adds	r4, r4, r6
 80017ec:	444c      	add	r4, r9
 80017ee:	4442      	add	r2, r8
 80017f0:	9503      	str	r5, [sp, #12]
 80017f2:	42a6      	cmp	r6, r4
 80017f4:	d904      	bls.n	8001800 <__aeabi_dmul+0x284>
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	4698      	mov	r8, r3
 80017fc:	4445      	add	r5, r8
 80017fe:	9503      	str	r5, [sp, #12]
 8001800:	9b02      	ldr	r3, [sp, #8]
 8001802:	043f      	lsls	r7, r7, #16
 8001804:	445b      	add	r3, fp
 8001806:	001e      	movs	r6, r3
 8001808:	4283      	cmp	r3, r0
 800180a:	4180      	sbcs	r0, r0
 800180c:	0423      	lsls	r3, r4, #16
 800180e:	4698      	mov	r8, r3
 8001810:	9b05      	ldr	r3, [sp, #20]
 8001812:	0c3f      	lsrs	r7, r7, #16
 8001814:	4447      	add	r7, r8
 8001816:	4698      	mov	r8, r3
 8001818:	1876      	adds	r6, r6, r1
 800181a:	428e      	cmp	r6, r1
 800181c:	4189      	sbcs	r1, r1
 800181e:	4447      	add	r7, r8
 8001820:	4240      	negs	r0, r0
 8001822:	183d      	adds	r5, r7, r0
 8001824:	46a8      	mov	r8, r5
 8001826:	4693      	mov	fp, r2
 8001828:	4249      	negs	r1, r1
 800182a:	468a      	mov	sl, r1
 800182c:	44c3      	add	fp, r8
 800182e:	429f      	cmp	r7, r3
 8001830:	41bf      	sbcs	r7, r7
 8001832:	4580      	cmp	r8, r0
 8001834:	4180      	sbcs	r0, r0
 8001836:	9b03      	ldr	r3, [sp, #12]
 8001838:	44da      	add	sl, fp
 800183a:	4698      	mov	r8, r3
 800183c:	4653      	mov	r3, sl
 800183e:	4240      	negs	r0, r0
 8001840:	427f      	negs	r7, r7
 8001842:	4307      	orrs	r7, r0
 8001844:	0c24      	lsrs	r4, r4, #16
 8001846:	4593      	cmp	fp, r2
 8001848:	4192      	sbcs	r2, r2
 800184a:	458a      	cmp	sl, r1
 800184c:	4189      	sbcs	r1, r1
 800184e:	193f      	adds	r7, r7, r4
 8001850:	0ddc      	lsrs	r4, r3, #23
 8001852:	9b04      	ldr	r3, [sp, #16]
 8001854:	0275      	lsls	r5, r6, #9
 8001856:	431d      	orrs	r5, r3
 8001858:	1e68      	subs	r0, r5, #1
 800185a:	4185      	sbcs	r5, r0
 800185c:	4653      	mov	r3, sl
 800185e:	4252      	negs	r2, r2
 8001860:	4249      	negs	r1, r1
 8001862:	430a      	orrs	r2, r1
 8001864:	18bf      	adds	r7, r7, r2
 8001866:	4447      	add	r7, r8
 8001868:	0df6      	lsrs	r6, r6, #23
 800186a:	027f      	lsls	r7, r7, #9
 800186c:	4335      	orrs	r5, r6
 800186e:	025a      	lsls	r2, r3, #9
 8001870:	433c      	orrs	r4, r7
 8001872:	4315      	orrs	r5, r2
 8001874:	01fb      	lsls	r3, r7, #7
 8001876:	d400      	bmi.n	800187a <__aeabi_dmul+0x2fe>
 8001878:	e0c1      	b.n	80019fe <__aeabi_dmul+0x482>
 800187a:	2101      	movs	r1, #1
 800187c:	086a      	lsrs	r2, r5, #1
 800187e:	400d      	ands	r5, r1
 8001880:	4315      	orrs	r5, r2
 8001882:	07e2      	lsls	r2, r4, #31
 8001884:	4315      	orrs	r5, r2
 8001886:	0864      	lsrs	r4, r4, #1
 8001888:	4926      	ldr	r1, [pc, #152]	; (8001924 <__aeabi_dmul+0x3a8>)
 800188a:	4461      	add	r1, ip
 800188c:	2900      	cmp	r1, #0
 800188e:	dd56      	ble.n	800193e <__aeabi_dmul+0x3c2>
 8001890:	076b      	lsls	r3, r5, #29
 8001892:	d009      	beq.n	80018a8 <__aeabi_dmul+0x32c>
 8001894:	220f      	movs	r2, #15
 8001896:	402a      	ands	r2, r5
 8001898:	2a04      	cmp	r2, #4
 800189a:	d005      	beq.n	80018a8 <__aeabi_dmul+0x32c>
 800189c:	1d2a      	adds	r2, r5, #4
 800189e:	42aa      	cmp	r2, r5
 80018a0:	41ad      	sbcs	r5, r5
 80018a2:	426d      	negs	r5, r5
 80018a4:	1964      	adds	r4, r4, r5
 80018a6:	0015      	movs	r5, r2
 80018a8:	01e3      	lsls	r3, r4, #7
 80018aa:	d504      	bpl.n	80018b6 <__aeabi_dmul+0x33a>
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <__aeabi_dmul+0x3ac>)
 80018b0:	00c9      	lsls	r1, r1, #3
 80018b2:	4014      	ands	r4, r2
 80018b4:	4461      	add	r1, ip
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <__aeabi_dmul+0x3b0>)
 80018b8:	4291      	cmp	r1, r2
 80018ba:	dd00      	ble.n	80018be <__aeabi_dmul+0x342>
 80018bc:	e724      	b.n	8001708 <__aeabi_dmul+0x18c>
 80018be:	0762      	lsls	r2, r4, #29
 80018c0:	08ed      	lsrs	r5, r5, #3
 80018c2:	0264      	lsls	r4, r4, #9
 80018c4:	0549      	lsls	r1, r1, #21
 80018c6:	4315      	orrs	r5, r2
 80018c8:	0b24      	lsrs	r4, r4, #12
 80018ca:	0d4a      	lsrs	r2, r1, #21
 80018cc:	e6c6      	b.n	800165c <__aeabi_dmul+0xe0>
 80018ce:	9701      	str	r7, [sp, #4]
 80018d0:	e6b8      	b.n	8001644 <__aeabi_dmul+0xc8>
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <__aeabi_dmul+0x398>)
 80018d4:	2003      	movs	r0, #3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4463      	add	r3, ip
 80018da:	464a      	mov	r2, r9
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2303      	movs	r3, #3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4691      	mov	r9, r2
 80018e4:	4652      	mov	r2, sl
 80018e6:	e68a      	b.n	80015fe <__aeabi_dmul+0x82>
 80018e8:	4649      	mov	r1, r9
 80018ea:	2301      	movs	r3, #1
 80018ec:	4319      	orrs	r1, r3
 80018ee:	4689      	mov	r9, r1
 80018f0:	2600      	movs	r6, #0
 80018f2:	2001      	movs	r0, #1
 80018f4:	e683      	b.n	80015fe <__aeabi_dmul+0x82>
 80018f6:	220c      	movs	r2, #12
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2303      	movs	r3, #3
 80018fc:	0005      	movs	r5, r0
 80018fe:	4691      	mov	r9, r2
 8001900:	469b      	mov	fp, r3
 8001902:	e65e      	b.n	80015c2 <__aeabi_dmul+0x46>
 8001904:	2304      	movs	r3, #4
 8001906:	4699      	mov	r9, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	2400      	movs	r4, #0
 8001910:	469b      	mov	fp, r3
 8001912:	e656      	b.n	80015c2 <__aeabi_dmul+0x46>
 8001914:	000007ff 	.word	0x000007ff
 8001918:	fffffc01 	.word	0xfffffc01
 800191c:	08005fdc 	.word	0x08005fdc
 8001920:	fffffc0d 	.word	0xfffffc0d
 8001924:	000003ff 	.word	0x000003ff
 8001928:	feffffff 	.word	0xfeffffff
 800192c:	000007fe 	.word	0x000007fe
 8001930:	2300      	movs	r3, #0
 8001932:	2480      	movs	r4, #128	; 0x80
 8001934:	2500      	movs	r5, #0
 8001936:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <__aeabi_dmul+0x4cc>)
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	e68e      	b.n	800165c <__aeabi_dmul+0xe0>
 800193e:	2001      	movs	r0, #1
 8001940:	1a40      	subs	r0, r0, r1
 8001942:	2838      	cmp	r0, #56	; 0x38
 8001944:	dd00      	ble.n	8001948 <__aeabi_dmul+0x3cc>
 8001946:	e686      	b.n	8001656 <__aeabi_dmul+0xda>
 8001948:	281f      	cmp	r0, #31
 800194a:	dd5b      	ble.n	8001a04 <__aeabi_dmul+0x488>
 800194c:	221f      	movs	r2, #31
 800194e:	0023      	movs	r3, r4
 8001950:	4252      	negs	r2, r2
 8001952:	1a51      	subs	r1, r2, r1
 8001954:	40cb      	lsrs	r3, r1
 8001956:	0019      	movs	r1, r3
 8001958:	2820      	cmp	r0, #32
 800195a:	d003      	beq.n	8001964 <__aeabi_dmul+0x3e8>
 800195c:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <__aeabi_dmul+0x4d0>)
 800195e:	4462      	add	r2, ip
 8001960:	4094      	lsls	r4, r2
 8001962:	4325      	orrs	r5, r4
 8001964:	1e6a      	subs	r2, r5, #1
 8001966:	4195      	sbcs	r5, r2
 8001968:	002a      	movs	r2, r5
 800196a:	430a      	orrs	r2, r1
 800196c:	2107      	movs	r1, #7
 800196e:	000d      	movs	r5, r1
 8001970:	2400      	movs	r4, #0
 8001972:	4015      	ands	r5, r2
 8001974:	4211      	tst	r1, r2
 8001976:	d05b      	beq.n	8001a30 <__aeabi_dmul+0x4b4>
 8001978:	210f      	movs	r1, #15
 800197a:	2400      	movs	r4, #0
 800197c:	4011      	ands	r1, r2
 800197e:	2904      	cmp	r1, #4
 8001980:	d053      	beq.n	8001a2a <__aeabi_dmul+0x4ae>
 8001982:	1d11      	adds	r1, r2, #4
 8001984:	4291      	cmp	r1, r2
 8001986:	4192      	sbcs	r2, r2
 8001988:	4252      	negs	r2, r2
 800198a:	18a4      	adds	r4, r4, r2
 800198c:	000a      	movs	r2, r1
 800198e:	0223      	lsls	r3, r4, #8
 8001990:	d54b      	bpl.n	8001a2a <__aeabi_dmul+0x4ae>
 8001992:	2201      	movs	r2, #1
 8001994:	2400      	movs	r4, #0
 8001996:	2500      	movs	r5, #0
 8001998:	e660      	b.n	800165c <__aeabi_dmul+0xe0>
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	421c      	tst	r4, r3
 80019a0:	d009      	beq.n	80019b6 <__aeabi_dmul+0x43a>
 80019a2:	421e      	tst	r6, r3
 80019a4:	d107      	bne.n	80019b6 <__aeabi_dmul+0x43a>
 80019a6:	4333      	orrs	r3, r6
 80019a8:	031c      	lsls	r4, r3, #12
 80019aa:	4643      	mov	r3, r8
 80019ac:	0015      	movs	r5, r2
 80019ae:	0b24      	lsrs	r4, r4, #12
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <__aeabi_dmul+0x4cc>)
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	e652      	b.n	800165c <__aeabi_dmul+0xe0>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	9701      	str	r7, [sp, #4]
 80019c4:	e64a      	b.n	800165c <__aeabi_dmul+0xe0>
 80019c6:	f000 f8fd 	bl	8001bc4 <__clzsi2>
 80019ca:	0003      	movs	r3, r0
 80019cc:	001a      	movs	r2, r3
 80019ce:	3215      	adds	r2, #21
 80019d0:	3020      	adds	r0, #32
 80019d2:	2a1c      	cmp	r2, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x45c>
 80019d6:	e684      	b.n	80016e2 <__aeabi_dmul+0x166>
 80019d8:	4656      	mov	r6, sl
 80019da:	3b08      	subs	r3, #8
 80019dc:	2200      	movs	r2, #0
 80019de:	409e      	lsls	r6, r3
 80019e0:	e689      	b.n	80016f6 <__aeabi_dmul+0x17a>
 80019e2:	f000 f8ef 	bl	8001bc4 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0002      	movs	r2, r0
 80019ea:	3115      	adds	r1, #21
 80019ec:	3220      	adds	r2, #32
 80019ee:	291c      	cmp	r1, #28
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dmul+0x478>
 80019f2:	e64e      	b.n	8001692 <__aeabi_dmul+0x116>
 80019f4:	0034      	movs	r4, r6
 80019f6:	3808      	subs	r0, #8
 80019f8:	2500      	movs	r5, #0
 80019fa:	4084      	lsls	r4, r0
 80019fc:	e653      	b.n	80016a6 <__aeabi_dmul+0x12a>
 80019fe:	9b00      	ldr	r3, [sp, #0]
 8001a00:	469c      	mov	ip, r3
 8001a02:	e741      	b.n	8001888 <__aeabi_dmul+0x30c>
 8001a04:	4912      	ldr	r1, [pc, #72]	; (8001a50 <__aeabi_dmul+0x4d4>)
 8001a06:	0022      	movs	r2, r4
 8001a08:	4461      	add	r1, ip
 8001a0a:	002e      	movs	r6, r5
 8001a0c:	408d      	lsls	r5, r1
 8001a0e:	408a      	lsls	r2, r1
 8001a10:	40c6      	lsrs	r6, r0
 8001a12:	1e69      	subs	r1, r5, #1
 8001a14:	418d      	sbcs	r5, r1
 8001a16:	4332      	orrs	r2, r6
 8001a18:	432a      	orrs	r2, r5
 8001a1a:	40c4      	lsrs	r4, r0
 8001a1c:	0753      	lsls	r3, r2, #29
 8001a1e:	d0b6      	beq.n	800198e <__aeabi_dmul+0x412>
 8001a20:	210f      	movs	r1, #15
 8001a22:	4011      	ands	r1, r2
 8001a24:	2904      	cmp	r1, #4
 8001a26:	d1ac      	bne.n	8001982 <__aeabi_dmul+0x406>
 8001a28:	e7b1      	b.n	800198e <__aeabi_dmul+0x412>
 8001a2a:	0765      	lsls	r5, r4, #29
 8001a2c:	0264      	lsls	r4, r4, #9
 8001a2e:	0b24      	lsrs	r4, r4, #12
 8001a30:	08d2      	lsrs	r2, r2, #3
 8001a32:	4315      	orrs	r5, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	e611      	b.n	800165c <__aeabi_dmul+0xe0>
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4314      	orrs	r4, r2
 8001a3e:	0324      	lsls	r4, r4, #12
 8001a40:	4a01      	ldr	r2, [pc, #4]	; (8001a48 <__aeabi_dmul+0x4cc>)
 8001a42:	0b24      	lsrs	r4, r4, #12
 8001a44:	e60a      	b.n	800165c <__aeabi_dmul+0xe0>
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	000007ff 	.word	0x000007ff
 8001a4c:	0000043e 	.word	0x0000043e
 8001a50:	0000041e 	.word	0x0000041e

08001a54 <__aeabi_i2d>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d016      	beq.n	8001a88 <__aeabi_i2d+0x34>
 8001a5a:	17c3      	asrs	r3, r0, #31
 8001a5c:	18c5      	adds	r5, r0, r3
 8001a5e:	405d      	eors	r5, r3
 8001a60:	0fc4      	lsrs	r4, r0, #31
 8001a62:	0028      	movs	r0, r5
 8001a64:	f000 f8ae 	bl	8001bc4 <__clzsi2>
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <__aeabi_i2d+0x5c>)
 8001a6a:	1a12      	subs	r2, r2, r0
 8001a6c:	280a      	cmp	r0, #10
 8001a6e:	dc16      	bgt.n	8001a9e <__aeabi_i2d+0x4a>
 8001a70:	0003      	movs	r3, r0
 8001a72:	002e      	movs	r6, r5
 8001a74:	3315      	adds	r3, #21
 8001a76:	409e      	lsls	r6, r3
 8001a78:	230b      	movs	r3, #11
 8001a7a:	1a18      	subs	r0, r3, r0
 8001a7c:	40c5      	lsrs	r5, r0
 8001a7e:	0553      	lsls	r3, r2, #21
 8001a80:	032d      	lsls	r5, r5, #12
 8001a82:	0b2d      	lsrs	r5, r5, #12
 8001a84:	0d5b      	lsrs	r3, r3, #21
 8001a86:	e003      	b.n	8001a90 <__aeabi_i2d+0x3c>
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	2600      	movs	r6, #0
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	432b      	orrs	r3, r5
 8001a94:	07e4      	lsls	r4, r4, #31
 8001a96:	4323      	orrs	r3, r4
 8001a98:	0030      	movs	r0, r6
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}
 8001a9e:	380b      	subs	r0, #11
 8001aa0:	4085      	lsls	r5, r0
 8001aa2:	0553      	lsls	r3, r2, #21
 8001aa4:	032d      	lsls	r5, r5, #12
 8001aa6:	2600      	movs	r6, #0
 8001aa8:	0b2d      	lsrs	r5, r5, #12
 8001aaa:	0d5b      	lsrs	r3, r3, #21
 8001aac:	e7f0      	b.n	8001a90 <__aeabi_i2d+0x3c>
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	0000041e 	.word	0x0000041e

08001ab4 <__aeabi_d2f>:
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	004b      	lsls	r3, r1, #1
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	0308      	lsls	r0, r1, #12
 8001abc:	0d5b      	lsrs	r3, r3, #21
 8001abe:	4e3d      	ldr	r6, [pc, #244]	; (8001bb4 <__aeabi_d2f+0x100>)
 8001ac0:	0fcc      	lsrs	r4, r1, #31
 8001ac2:	0a40      	lsrs	r0, r0, #9
 8001ac4:	0f51      	lsrs	r1, r2, #29
 8001ac6:	1c5f      	adds	r7, r3, #1
 8001ac8:	4308      	orrs	r0, r1
 8001aca:	00d5      	lsls	r5, r2, #3
 8001acc:	4237      	tst	r7, r6
 8001ace:	d00a      	beq.n	8001ae6 <__aeabi_d2f+0x32>
 8001ad0:	4939      	ldr	r1, [pc, #228]	; (8001bb8 <__aeabi_d2f+0x104>)
 8001ad2:	185e      	adds	r6, r3, r1
 8001ad4:	2efe      	cmp	r6, #254	; 0xfe
 8001ad6:	dd16      	ble.n	8001b06 <__aeabi_d2f+0x52>
 8001ad8:	23ff      	movs	r3, #255	; 0xff
 8001ada:	2100      	movs	r1, #0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	07e0      	lsls	r0, r4, #31
 8001ae2:	4318      	orrs	r0, r3
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <__aeabi_d2f+0x44>
 8001aea:	4328      	orrs	r0, r5
 8001aec:	d027      	beq.n	8001b3e <__aeabi_d2f+0x8a>
 8001aee:	2105      	movs	r1, #5
 8001af0:	0189      	lsls	r1, r1, #6
 8001af2:	0a49      	lsrs	r1, r1, #9
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e7f1      	b.n	8001adc <__aeabi_d2f+0x28>
 8001af8:	4305      	orrs	r5, r0
 8001afa:	d0ed      	beq.n	8001ad8 <__aeabi_d2f+0x24>
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	03c9      	lsls	r1, r1, #15
 8001b00:	23ff      	movs	r3, #255	; 0xff
 8001b02:	4301      	orrs	r1, r0
 8001b04:	e7ea      	b.n	8001adc <__aeabi_d2f+0x28>
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	dd1c      	ble.n	8001b44 <__aeabi_d2f+0x90>
 8001b0a:	0192      	lsls	r2, r2, #6
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	1e4a      	subs	r2, r1, #1
 8001b10:	4191      	sbcs	r1, r2
 8001b12:	00c0      	lsls	r0, r0, #3
 8001b14:	0f6d      	lsrs	r5, r5, #29
 8001b16:	4301      	orrs	r1, r0
 8001b18:	4329      	orrs	r1, r5
 8001b1a:	074b      	lsls	r3, r1, #29
 8001b1c:	d048      	beq.n	8001bb0 <__aeabi_d2f+0xfc>
 8001b1e:	230f      	movs	r3, #15
 8001b20:	400b      	ands	r3, r1
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d000      	beq.n	8001b28 <__aeabi_d2f+0x74>
 8001b26:	3104      	adds	r1, #4
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	04db      	lsls	r3, r3, #19
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	d03f      	beq.n	8001bb0 <__aeabi_d2f+0xfc>
 8001b30:	1c72      	adds	r2, r6, #1
 8001b32:	2efe      	cmp	r6, #254	; 0xfe
 8001b34:	d0d0      	beq.n	8001ad8 <__aeabi_d2f+0x24>
 8001b36:	0189      	lsls	r1, r1, #6
 8001b38:	0a49      	lsrs	r1, r1, #9
 8001b3a:	b2d3      	uxtb	r3, r2
 8001b3c:	e7ce      	b.n	8001adc <__aeabi_d2f+0x28>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	e7cb      	b.n	8001adc <__aeabi_d2f+0x28>
 8001b44:	0032      	movs	r2, r6
 8001b46:	3217      	adds	r2, #23
 8001b48:	db22      	blt.n	8001b90 <__aeabi_d2f+0xdc>
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	221e      	movs	r2, #30
 8001b4e:	0409      	lsls	r1, r1, #16
 8001b50:	4308      	orrs	r0, r1
 8001b52:	1b92      	subs	r2, r2, r6
 8001b54:	2a1f      	cmp	r2, #31
 8001b56:	dd1d      	ble.n	8001b94 <__aeabi_d2f+0xe0>
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4249      	negs	r1, r1
 8001b5c:	1b8e      	subs	r6, r1, r6
 8001b5e:	0001      	movs	r1, r0
 8001b60:	40f1      	lsrs	r1, r6
 8001b62:	000e      	movs	r6, r1
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d004      	beq.n	8001b72 <__aeabi_d2f+0xbe>
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <__aeabi_d2f+0x108>)
 8001b6a:	4694      	mov	ip, r2
 8001b6c:	4463      	add	r3, ip
 8001b6e:	4098      	lsls	r0, r3
 8001b70:	4305      	orrs	r5, r0
 8001b72:	0029      	movs	r1, r5
 8001b74:	1e4d      	subs	r5, r1, #1
 8001b76:	41a9      	sbcs	r1, r5
 8001b78:	4331      	orrs	r1, r6
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	074b      	lsls	r3, r1, #29
 8001b7e:	d1ce      	bne.n	8001b1e <__aeabi_d2f+0x6a>
 8001b80:	2080      	movs	r0, #128	; 0x80
 8001b82:	000b      	movs	r3, r1
 8001b84:	04c0      	lsls	r0, r0, #19
 8001b86:	2201      	movs	r2, #1
 8001b88:	4003      	ands	r3, r0
 8001b8a:	4201      	tst	r1, r0
 8001b8c:	d1d3      	bne.n	8001b36 <__aeabi_d2f+0x82>
 8001b8e:	e7af      	b.n	8001af0 <__aeabi_d2f+0x3c>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e7ac      	b.n	8001aee <__aeabi_d2f+0x3a>
 8001b94:	490a      	ldr	r1, [pc, #40]	; (8001bc0 <__aeabi_d2f+0x10c>)
 8001b96:	468c      	mov	ip, r1
 8001b98:	0029      	movs	r1, r5
 8001b9a:	4463      	add	r3, ip
 8001b9c:	40d1      	lsrs	r1, r2
 8001b9e:	409d      	lsls	r5, r3
 8001ba0:	000a      	movs	r2, r1
 8001ba2:	0029      	movs	r1, r5
 8001ba4:	4098      	lsls	r0, r3
 8001ba6:	1e4d      	subs	r5, r1, #1
 8001ba8:	41a9      	sbcs	r1, r5
 8001baa:	4301      	orrs	r1, r0
 8001bac:	4311      	orrs	r1, r2
 8001bae:	e7e4      	b.n	8001b7a <__aeabi_d2f+0xc6>
 8001bb0:	0033      	movs	r3, r6
 8001bb2:	e79d      	b.n	8001af0 <__aeabi_d2f+0x3c>
 8001bb4:	000007fe 	.word	0x000007fe
 8001bb8:	fffffc80 	.word	0xfffffc80
 8001bbc:	fffffca2 	.word	0xfffffca2
 8001bc0:	fffffc82 	.word	0xfffffc82

08001bc4 <__clzsi2>:
 8001bc4:	211c      	movs	r1, #28
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	041b      	lsls	r3, r3, #16
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d301      	bcc.n	8001bd2 <__clzsi2+0xe>
 8001bce:	0c00      	lsrs	r0, r0, #16
 8001bd0:	3910      	subs	r1, #16
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	4298      	cmp	r0, r3
 8001bd6:	d301      	bcc.n	8001bdc <__clzsi2+0x18>
 8001bd8:	0a00      	lsrs	r0, r0, #8
 8001bda:	3908      	subs	r1, #8
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d301      	bcc.n	8001be6 <__clzsi2+0x22>
 8001be2:	0900      	lsrs	r0, r0, #4
 8001be4:	3904      	subs	r1, #4
 8001be6:	a202      	add	r2, pc, #8	; (adr r2, 8001bf0 <__clzsi2+0x2c>)
 8001be8:	5c10      	ldrb	r0, [r2, r0]
 8001bea:	1840      	adds	r0, r0, r1
 8001bec:	4770      	bx	lr
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	02020304 	.word	0x02020304
 8001bf4:	01010101 	.word	0x01010101
	...

08001c00 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f004 f980 	bl	8005f14 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c16:	4a3a      	ldr	r2, [pc, #232]	; (8001d00 <MX_ADC_Init+0x100>)
 8001c18:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c52:	22c2      	movs	r2, #194	; 0xc2
 8001c54:	32ff      	adds	r2, #255	; 0xff
 8001c56:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c60:	2224      	movs	r2, #36	; 0x24
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 f99a 	bl	8002fa8 <HAL_ADC_Init>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001c78:	f000 fc77 	bl	800256a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0152      	lsls	r2, r2, #5
 8001c88:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c90:	1d3a      	adds	r2, r7, #4
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001c94:	0011      	movs	r1, r2
 8001c96:	0018      	movs	r0, r3
 8001c98:	f001 fb58 	bl	800334c <HAL_ADC_ConfigChannel>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001ca0:	f000 fc63 	bl	800256a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001caa:	1d3a      	adds	r2, r7, #4
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 fb4b 	bl	800334c <HAL_ADC_ConfigChannel>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001cba:	f000 fc56 	bl	800256a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cc4:	1d3a      	adds	r2, r7, #4
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001cc8:	0011      	movs	r1, r2
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f001 fb3e 	bl	800334c <HAL_ADC_ConfigChannel>
 8001cd0:	1e03      	subs	r3, r0, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001cd4:	f000 fc49 	bl	800256a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2204      	movs	r2, #4
 8001cdc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cde:	1d3a      	adds	r2, r7, #4
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_ADC_Init+0xfc>)
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 fb31 	bl	800334c <HAL_ADC_ConfigChannel>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001cee:	f000 fc3c 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	200000b0 	.word	0x200000b0
 8001d00:	40012400 	.word	0x40012400

08001d04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	2414      	movs	r4, #20
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	0018      	movs	r0, r3
 8001d12:	2314      	movs	r3, #20
 8001d14:	001a      	movs	r2, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	f004 f8fc 	bl	8005f14 <memset>
  if(adcHandle->Instance==ADC1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_ADC_MspInit+0xd4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d153      	bne.n	8001dce <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0089      	lsls	r1, r1, #2
 8001d30:	430a      	orrs	r2, r1
 8001d32:	619a      	str	r2, [r3, #24]
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	0289      	lsls	r1, r1, #10
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_ADC_MspInit+0xd8>)
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = ADC_Pin|I_OUT_ADC_Pin|U_IN_ADC_Pin|U_OUT_ADC_Pin;
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	221d      	movs	r2, #29
 8001d62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	2203      	movs	r2, #3
 8001d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	193a      	adds	r2, r7, r4
 8001d72:	2390      	movs	r3, #144	; 0x90
 8001d74:	05db      	lsls	r3, r3, #23
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f001 ff53 	bl	8003c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_ADC_MspInit+0xe0>)
 8001d82:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	00d2      	lsls	r2, r2, #3
 8001da4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001da8:	2220      	movs	r2, #32
 8001daa:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001db4:	0018      	movs	r0, r3
 8001db6:	f001 fd9d 	bl	80038f4 <HAL_DMA_Init>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001dbe:	f000 fbd4 	bl	800256a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_ADC_MspInit+0xdc>)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b00b      	add	sp, #44	; 0x2c
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40012400 	.word	0x40012400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	2000006c 	.word	0x2000006c
 8001de4:	40020008 	.word	0x40020008

08001de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_DMA_Init+0x38>)
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_DMA_Init+0x38>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_DMA_Init+0x38>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2009      	movs	r0, #9
 8001e0c:	f001 fd40 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e10:	2009      	movs	r0, #9
 8001e12:	f001 fd52 	bl	80038ba <HAL_NVIC_EnableIRQ>

}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000

08001e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b08b      	sub	sp, #44	; 0x2c
 8001e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2a:	2414      	movs	r4, #20
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	0018      	movs	r0, r3
 8001e30:	2314      	movs	r3, #20
 8001e32:	001a      	movs	r2, r3
 8001e34:	2100      	movs	r1, #0
 8001e36:	f004 f86d 	bl	8005f14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0309      	lsls	r1, r1, #12
 8001e44:	430a      	orrs	r2, r1
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	031b      	lsls	r3, r3, #12
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	0289      	lsls	r1, r1, #10
 8001e60:	430a      	orrs	r2, r1
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	02c9      	lsls	r1, r1, #11
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	02db      	lsls	r3, r3, #11
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	03c9      	lsls	r1, r1, #15
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <MX_GPIO_Init+0x144>)
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	03db      	lsls	r3, r3, #15
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Over_Voltage_Pin|Under_Voltage_Pin, GPIO_PIN_RESET);
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	482f      	ldr	r0, [pc, #188]	; (8001f6c <MX_GPIO_Init+0x148>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	f002 f843 	bl	8003f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = U_L_COMP_Pin;
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	0192      	lsls	r2, r2, #6
 8001ebe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec0:	193b      	adds	r3, r7, r4
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <MX_GPIO_Init+0x14c>)
 8001ec4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(U_L_COMP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	4a29      	ldr	r2, [pc, #164]	; (8001f74 <MX_GPIO_Init+0x150>)
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	f001 fea6 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IS_boost_COMP_Pin|U_OUT_COMP_Pin;
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	2222      	movs	r2, #34	; 0x22
 8001edc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <MX_GPIO_Init+0x14c>)
 8001ee2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	193a      	adds	r2, r7, r4
 8001eec:	2390      	movs	r3, #144	; 0x90
 8001eee:	05db      	lsls	r3, r3, #23
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 fe96 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_OUT_COMPB2_Pin;
 8001ef8:	193b      	adds	r3, r7, r4
 8001efa:	2204      	movs	r2, #4
 8001efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <MX_GPIO_Init+0x14c>)
 8001f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	193b      	adds	r3, r7, r4
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I_OUT_COMPB2_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <MX_GPIO_Init+0x148>)
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f001 fe87 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Over_Voltage_Pin|Under_Voltage_Pin;
 8001f16:	0021      	movs	r1, r4
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	22c0      	movs	r2, #192	; 0xc0
 8001f1c:	0192      	lsls	r2, r2, #6
 8001f1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	000c      	movs	r4, r1
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	2201      	movs	r2, #1
 8001f26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <MX_GPIO_Init+0x148>)
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f001 fe72 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Dir_Select_Pin|Mode_Select_Pin;
 8001f40:	0021      	movs	r1, r4
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	22c0      	movs	r2, #192	; 0xc0
 8001f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <MX_GPIO_Init+0x154>)
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	f001 fe62 	bl	8003c24 <HAL_GPIO_Init>

}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b00b      	add	sp, #44	; 0x2c
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	10110000 	.word	0x10110000
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48001400 	.word	0x48001400

08001f7c <map>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	69b9      	ldr	r1, [r7, #24]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	1a8a      	subs	r2, r1, r2
 8001f96:	435a      	muls	r2, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	f7fe f93b 	bl	800021c <__divsi3>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	18d3      	adds	r3, r2, r3
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <mapBound>:
long mapBound(long x, long in_min, long in_max, long out_min, long out_max) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
	if (x > in_max) return out_max;
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dd01      	ble.n	8001fd0 <mapBound+0x1a>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	e017      	b.n	8002000 <mapBound+0x4a>
	else if (x < in_min) return out_min;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	da01      	bge.n	8001fdc <mapBound+0x26>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	e011      	b.n	8002000 <mapBound+0x4a>
	else return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	1a8a      	subs	r2, r1, r2
 8001fe8:	435a      	muls	r2, r3
 8001fea:	0010      	movs	r0, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	f7fe f912 	bl	800021c <__divsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	18d3      	adds	r3, r2, r3
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	U_Input		= (adc_buff[0] * 0.00080566); // from 0 to 3.2991777 V
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fd1d 	bl	8001a54 <__aeabi_i2d>
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_ADC_ConvCpltCallback+0xd4>)
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800201e:	f7ff faad 	bl	800157c <__aeabi_dmul>
 8002022:	0002      	movs	r2, r0
 8002024:	000b      	movs	r3, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	f7ff fd43 	bl	8001ab4 <__aeabi_d2f>
 800202e:	1c02      	adds	r2, r0, #0
 8002030:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8002032:	601a      	str	r2, [r3, #0]
	I_B_Side 	= (adc_buff[1] * 0.00080566) / 0.33;
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002036:	885b      	ldrh	r3, [r3, #2]
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff fd0b 	bl	8001a54 <__aeabi_i2d>
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_ADC_ConvCpltCallback+0xd4>)
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002042:	f7ff fa9b 	bl	800157c <__aeabi_dmul>
 8002046:	0002      	movs	r2, r0
 8002048:	000b      	movs	r3, r1
 800204a:	0010      	movs	r0, r2
 800204c:	0019      	movs	r1, r3
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_ADC_ConvCpltCallback+0xe4>)
 8002052:	f7fe ffab 	bl	8000fac <__aeabi_ddiv>
 8002056:	0002      	movs	r2, r0
 8002058:	000b      	movs	r3, r1
 800205a:	0010      	movs	r0, r2
 800205c:	0019      	movs	r1, r3
 800205e:	f7ff fd29 	bl	8001ab4 <__aeabi_d2f>
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002066:	601a      	str	r2, [r3, #0]
	U_A_Side	= (adc_buff[2] * 0.00080566) * 11;
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 800206a:	889b      	ldrh	r3, [r3, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fcf1 	bl	8001a54 <__aeabi_i2d>
 8002072:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_ADC_ConvCpltCallback+0xd4>)
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002076:	f7ff fa81 	bl	800157c <__aeabi_dmul>
 800207a:	0002      	movs	r2, r0
 800207c:	000b      	movs	r3, r1
 800207e:	0010      	movs	r0, r2
 8002080:	0019      	movs	r1, r3
 8002082:	2200      	movs	r2, #0
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_ADC_ConvCpltCallback+0xec>)
 8002086:	f7ff fa79 	bl	800157c <__aeabi_dmul>
 800208a:	0002      	movs	r2, r0
 800208c:	000b      	movs	r3, r1
 800208e:	0010      	movs	r0, r2
 8002090:	0019      	movs	r1, r3
 8002092:	f7ff fd0f 	bl	8001ab4 <__aeabi_d2f>
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_ADC_ConvCpltCallback+0xf0>)
 800209a:	601a      	str	r2, [r3, #0]
	U_B_Side	= (adc_buff[3] * 0.00080566) * 15.70588235;
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 800209e:	88db      	ldrh	r3, [r3, #6]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff fcd7 	bl	8001a54 <__aeabi_i2d>
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_ADC_ConvCpltCallback+0xd4>)
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 80020aa:	f7ff fa67 	bl	800157c <__aeabi_dmul>
 80020ae:	0002      	movs	r2, r0
 80020b0:	000b      	movs	r3, r1
 80020b2:	0010      	movs	r0, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_ADC_ConvCpltCallback+0xf4>)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_ADC_ConvCpltCallback+0xf8>)
 80020ba:	f7ff fa5f 	bl	800157c <__aeabi_dmul>
 80020be:	0002      	movs	r2, r0
 80020c0:	000b      	movs	r3, r1
 80020c2:	0010      	movs	r0, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	f7ff fcf5 	bl	8001ab4 <__aeabi_d2f>
 80020ca:	1c02      	adds	r2, r0, #0
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_ADC_ConvCpltCallback+0xfc>)
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000f0 	.word	0x200000f0
 80020dc:	ad045a83 	.word	0xad045a83
 80020e0:	3f4a665d 	.word	0x3f4a665d
 80020e4:	20000034 	.word	0x20000034
 80020e8:	51eb851f 	.word	0x51eb851f
 80020ec:	3fd51eb8 	.word	0x3fd51eb8
 80020f0:	20000030 	.word	0x20000030
 80020f4:	40260000 	.word	0x40260000
 80020f8:	20000028 	.word	0x20000028
 80020fc:	695025b2 	.word	0x695025b2
 8002100:	402f6969 	.word	0x402f6969
 8002104:	2000002c 	.word	0x2000002c

08002108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800210e:	f000 fec3 	bl	8002e98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002112:	f000 f9c3 	bl	800249c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8002116:	f7ff fe85 	bl	8001e24 <MX_GPIO_Init>
  MX_TIM1_Init();
 800211a:	f000 fa85 	bl	8002628 <MX_TIM1_Init>
  MX_DMA_Init();		// Before ADC_Init !!
 800211e:	f7ff fe63 	bl	8001de8 <MX_DMA_Init>
  MX_ADC_Init();
 8002122:	f7ff fd6d 	bl	8001c00 <MX_ADC_Init>
  MX_TIM14_Init();
 8002126:	f000 fb8d 	bl	8002844 <MX_TIM14_Init>
  MX_TIM3_Init();
 800212a:	f000 fb1f 	bl	800276c <MX_TIM3_Init>
  MX_TIM16_Init();
 800212e:	f000 fbd9 	bl	80028e4 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8002132:	f000 fde5 	bl	8002d00 <MX_USART1_UART_Init>


  HAL_Delay(100);
 8002136:	2064      	movs	r0, #100	; 0x64
 8002138:	f000 ff12 	bl	8002f60 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, (uint16_t *)adc_buff, 4);
 800213c:	49b7      	ldr	r1, [pc, #732]	; (800241c <main+0x314>)
 800213e:	4bb8      	ldr	r3, [pc, #736]	; (8002420 <main+0x318>)
 8002140:	2204      	movs	r2, #4
 8002142:	0018      	movs	r0, r3
 8002144:	f001 f870 	bl	8003228 <HAL_ADC_Start_DMA>

  //lHAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002148:	4bb6      	ldr	r3, [pc, #728]	; (8002424 <main+0x31c>)
 800214a:	2100      	movs	r1, #0
 800214c:	0018      	movs	r0, r3
 800214e:	f002 fced 	bl	8004b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002152:	4bb4      	ldr	r3, [pc, #720]	; (8002424 <main+0x31c>)
 8002154:	2104      	movs	r1, #4
 8002156:	0018      	movs	r0, r3
 8002158:	f002 fce8 	bl	8004b2c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 800215c:	4bb1      	ldr	r3, [pc, #708]	; (8002424 <main+0x31c>)
 800215e:	2100      	movs	r1, #0
 8002160:	0018      	movs	r0, r3
 8002162:	f003 fa25 	bl	80055b0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8002166:	4baf      	ldr	r3, [pc, #700]	; (8002424 <main+0x31c>)
 8002168:	2104      	movs	r1, #4
 800216a:	0018      	movs	r0, r3
 800216c:	f003 fa20 	bl	80055b0 <HAL_TIMEx_PWMN_Start>

  float P = 0.1;
 8002170:	4bad      	ldr	r3, [pc, #692]	; (8002428 <main+0x320>)
 8002172:	60fb      	str	r3, [r7, #12]
  float I = 0.1;
 8002174:	4bac      	ldr	r3, [pc, #688]	; (8002428 <main+0x320>)
 8002176:	60bb      	str	r3, [r7, #8]
  float D = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	607b      	str	r3, [r7, #4]

  direction = HAL_GPIO_ReadPin(Dir_Select_GPIO_Port, Dir_Select_Pin);
 800217c:	4bab      	ldr	r3, [pc, #684]	; (800242c <main+0x324>)
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	0018      	movs	r0, r3
 8002182:	f001 febf 	bl	8003f04 <HAL_GPIO_ReadPin>
 8002186:	0003      	movs	r3, r0
 8002188:	001a      	movs	r2, r3
 800218a:	4ba9      	ldr	r3, [pc, #676]	; (8002430 <main+0x328>)
 800218c:	701a      	strb	r2, [r3, #0]
  mode 		= HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin);
 800218e:	4ba7      	ldr	r3, [pc, #668]	; (800242c <main+0x324>)
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0018      	movs	r0, r3
 8002194:	f001 feb6 	bl	8003f04 <HAL_GPIO_ReadPin>
 8002198:	0003      	movs	r3, r0
 800219a:	001a      	movs	r2, r3
 800219c:	4ba5      	ldr	r3, [pc, #660]	; (8002434 <main+0x32c>)
 800219e:	701a      	strb	r2, [r3, #0]

	  // PROGRESS STEP-DOWN CLOSE LOOP
	  //vref = adc_buff[0];


	  vH	= 600;
 80021a0:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <main+0x330>)
 80021a2:	4aa6      	ldr	r2, [pc, #664]	; (800243c <main+0x334>)
 80021a4:	601a      	str	r2, [r3, #0]
	  vL	= 000;
 80021a6:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <main+0x338>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
	  vM 	= 500;
 80021ac:	4ba5      	ldr	r3, [pc, #660]	; (8002444 <main+0x33c>)
 80021ae:	4aa6      	ldr	r2, [pc, #664]	; (8002448 <main+0x340>)
 80021b0:	601a      	str	r2, [r3, #0]
	  vref 	= map(adc_buff[0],0,4095,0,2500);		// 0(0) - 24V(2500) divided to 0(0) - 3.3V(4095)
 80021b2:	4b9a      	ldr	r3, [pc, #616]	; (800241c <main+0x314>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	0018      	movs	r0, r3
 80021b8:	4aa4      	ldr	r2, [pc, #656]	; (800244c <main+0x344>)
 80021ba:	4ba5      	ldr	r3, [pc, #660]	; (8002450 <main+0x348>)
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	f7ff fedb 	bl	8001f7c <map>
 80021c6:	0003      	movs	r3, r0
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7fe fea9 	bl	8000f20 <__aeabi_i2f>
 80021ce:	1c02      	adds	r2, r0, #0
 80021d0:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <main+0x34c>)
 80021d2:	601a      	str	r2, [r3, #0]
	  iout  = map(adc_buff[1],0,4095,0,10000);		// 0(0) - 10A(1000) divided to 0(0) - 3.3V(4095)
 80021d4:	4b91      	ldr	r3, [pc, #580]	; (800241c <main+0x314>)
 80021d6:	885b      	ldrh	r3, [r3, #2]
 80021d8:	0018      	movs	r0, r3
 80021da:	4a9c      	ldr	r2, [pc, #624]	; (800244c <main+0x344>)
 80021dc:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <main+0x350>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	f7ff feca 	bl	8001f7c <map>
 80021e8:	0003      	movs	r3, r0
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fe98 	bl	8000f20 <__aeabi_i2f>
 80021f0:	1c02      	adds	r2, r0, #0
 80021f2:	4b9a      	ldr	r3, [pc, #616]	; (800245c <main+0x354>)
 80021f4:	601a      	str	r2, [r3, #0]
	  if (direction == 0){
 80021f6:	4b8e      	ldr	r3, [pc, #568]	; (8002430 <main+0x328>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d122      	bne.n	8002244 <main+0x13c>
		  vin	= map(adc_buff[2],0,4095,0,3630);		// 0(0) - 36.3V(3630) divided to 0(0) - 3.3V(4095)
 80021fe:	4b87      	ldr	r3, [pc, #540]	; (800241c <main+0x314>)
 8002200:	889b      	ldrh	r3, [r3, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	4a91      	ldr	r2, [pc, #580]	; (800244c <main+0x344>)
 8002206:	4b96      	ldr	r3, [pc, #600]	; (8002460 <main+0x358>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	2100      	movs	r1, #0
 800220e:	f7ff feb5 	bl	8001f7c <map>
 8002212:	0003      	movs	r3, r0
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe fe83 	bl	8000f20 <__aeabi_i2f>
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	4b91      	ldr	r3, [pc, #580]	; (8002464 <main+0x35c>)
 800221e:	601a      	str	r2, [r3, #0]
		  vout 	= map(adc_buff[3],0,4095,0,5183);		// 0(0) - 51.83V(5183) divided to 0(0) - 3.3V(4095)
 8002220:	4b7e      	ldr	r3, [pc, #504]	; (800241c <main+0x314>)
 8002222:	88db      	ldrh	r3, [r3, #6]
 8002224:	0018      	movs	r0, r3
 8002226:	4a89      	ldr	r2, [pc, #548]	; (800244c <main+0x344>)
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <main+0x360>)
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2300      	movs	r3, #0
 800222e:	2100      	movs	r1, #0
 8002230:	f7ff fea4 	bl	8001f7c <map>
 8002234:	0003      	movs	r3, r0
 8002236:	0018      	movs	r0, r3
 8002238:	f7fe fe72 	bl	8000f20 <__aeabi_i2f>
 800223c:	1c02      	adds	r2, r0, #0
 800223e:	4b8b      	ldr	r3, [pc, #556]	; (800246c <main+0x364>)
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e021      	b.n	8002288 <main+0x180>
	  }else {
		  vout	= map(adc_buff[2],0,4095,0,3630);		// 0(0) - 36.3V(3630) divided to 0(0) - 3.3V(4095)
 8002244:	4b75      	ldr	r3, [pc, #468]	; (800241c <main+0x314>)
 8002246:	889b      	ldrh	r3, [r3, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	4a80      	ldr	r2, [pc, #512]	; (800244c <main+0x344>)
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <main+0x358>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	2100      	movs	r1, #0
 8002254:	f7ff fe92 	bl	8001f7c <map>
 8002258:	0003      	movs	r3, r0
 800225a:	0018      	movs	r0, r3
 800225c:	f7fe fe60 	bl	8000f20 <__aeabi_i2f>
 8002260:	1c02      	adds	r2, r0, #0
 8002262:	4b82      	ldr	r3, [pc, #520]	; (800246c <main+0x364>)
 8002264:	601a      	str	r2, [r3, #0]
		  vin 	= map(adc_buff[3],0,4095,0,5183);		// 0(0) - 51.83V(5183) divided to 0(0) - 3.3V(4095)
 8002266:	4b6d      	ldr	r3, [pc, #436]	; (800241c <main+0x314>)
 8002268:	88db      	ldrh	r3, [r3, #6]
 800226a:	0018      	movs	r0, r3
 800226c:	4a77      	ldr	r2, [pc, #476]	; (800244c <main+0x344>)
 800226e:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <main+0x360>)
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	2100      	movs	r1, #0
 8002276:	f7ff fe81 	bl	8001f7c <map>
 800227a:	0003      	movs	r3, r0
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe fe4f 	bl	8000f20 <__aeabi_i2f>
 8002282:	1c02      	adds	r2, r0, #0
 8002284:	4b77      	ldr	r3, [pc, #476]	; (8002464 <main+0x35c>)
 8002286:	601a      	str	r2, [r3, #0]
	  }
	  // Error calculation
	  error	= vref - vout;
 8002288:	4b72      	ldr	r3, [pc, #456]	; (8002454 <main+0x34c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b77      	ldr	r3, [pc, #476]	; (800246c <main+0x364>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c19      	adds	r1, r3, #0
 8002292:	1c10      	adds	r0, r2, #0
 8002294:	f7fe fc5c 	bl	8000b50 <__aeabi_fsub>
 8002298:	1c03      	adds	r3, r0, #0
 800229a:	1c1a      	adds	r2, r3, #0
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <main+0x368>)
 800229e:	601a      	str	r2, [r3, #0]
	  errorI += error;
 80022a0:	4b74      	ldr	r3, [pc, #464]	; (8002474 <main+0x36c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b72      	ldr	r3, [pc, #456]	; (8002470 <main+0x368>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c19      	adds	r1, r3, #0
 80022aa:	1c10      	adds	r0, r2, #0
 80022ac:	f7fe f8dc 	bl	8000468 <__aeabi_fadd>
 80022b0:	1c03      	adds	r3, r0, #0
 80022b2:	1c1a      	adds	r2, r3, #0
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <main+0x36c>)
 80022b6:	601a      	str	r2, [r3, #0]

	  vbuck = error * P + errorI * I;
 80022b8:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <main+0x368>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	1c18      	adds	r0, r3, #0
 80022c0:	f7fe fb2c 	bl	800091c <__aeabi_fmul>
 80022c4:	1c03      	adds	r3, r0, #0
 80022c6:	1c1c      	adds	r4, r3, #0
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <main+0x36c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	1c18      	adds	r0, r3, #0
 80022d0:	f7fe fb24 	bl	800091c <__aeabi_fmul>
 80022d4:	1c03      	adds	r3, r0, #0
 80022d6:	1c19      	adds	r1, r3, #0
 80022d8:	1c20      	adds	r0, r4, #0
 80022da:	f7fe f8c5 	bl	8000468 <__aeabi_fadd>
 80022de:	1c03      	adds	r3, r0, #0
 80022e0:	1c1a      	adds	r2, r3, #0
 80022e2:	4b65      	ldr	r3, [pc, #404]	; (8002478 <main+0x370>)
 80022e4:	601a      	str	r2, [r3, #0]
	  vboost = vbuck - vM;
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <main+0x370>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <main+0x33c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c19      	adds	r1, r3, #0
 80022f0:	1c10      	adds	r0, r2, #0
 80022f2:	f7fe fc2d 	bl	8000b50 <__aeabi_fsub>
 80022f6:	1c03      	adds	r3, r0, #0
 80022f8:	1c1a      	adds	r2, r3, #0
 80022fa:	4b60      	ldr	r3, [pc, #384]	; (800247c <main+0x374>)
 80022fc:	601a      	str	r2, [r3, #0]

	  pwmbuck 	= mapBound(vbuck,vL,vH,0,1023 - 256);	// SAFETY - T1 bootstrap voltage
 80022fe:	4b5e      	ldr	r3, [pc, #376]	; (8002478 <main+0x370>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1c18      	adds	r0, r3, #0
 8002304:	f7fe fdec 	bl	8000ee0 <__aeabi_f2iz>
 8002308:	0004      	movs	r4, r0
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <main+0x338>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c18      	adds	r0, r3, #0
 8002310:	f7fe fde6 	bl	8000ee0 <__aeabi_f2iz>
 8002314:	0005      	movs	r5, r0
 8002316:	4b48      	ldr	r3, [pc, #288]	; (8002438 <main+0x330>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1c18      	adds	r0, r3, #0
 800231c:	f7fe fde0 	bl	8000ee0 <__aeabi_f2iz>
 8002320:	0002      	movs	r2, r0
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <main+0x378>)
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	0029      	movs	r1, r5
 800232a:	0020      	movs	r0, r4
 800232c:	f7ff fe43 	bl	8001fb6 <mapBound>
 8002330:	0003      	movs	r3, r0
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <main+0x37c>)
 8002336:	801a      	strh	r2, [r3, #0]
	  pwmboost  = mapBound(vboost,vL,vH,0,1023 - 256);	// SAFETY - T3 bootstrap voltage, boost max output voltage
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <main+0x374>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1c18      	adds	r0, r3, #0
 800233e:	f7fe fdcf 	bl	8000ee0 <__aeabi_f2iz>
 8002342:	0004      	movs	r4, r0
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <main+0x338>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c18      	adds	r0, r3, #0
 800234a:	f7fe fdc9 	bl	8000ee0 <__aeabi_f2iz>
 800234e:	0005      	movs	r5, r0
 8002350:	4b39      	ldr	r3, [pc, #228]	; (8002438 <main+0x330>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c18      	adds	r0, r3, #0
 8002356:	f7fe fdc3 	bl	8000ee0 <__aeabi_f2iz>
 800235a:	0002      	movs	r2, r0
 800235c:	4b48      	ldr	r3, [pc, #288]	; (8002480 <main+0x378>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	0029      	movs	r1, r5
 8002364:	0020      	movs	r0, r4
 8002366:	f7ff fe26 	bl	8001fb6 <mapBound>
 800236a:	0003      	movs	r3, r0
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <main+0x380>)
 8002370:	801a      	strh	r2, [r3, #0]

	  if (direction == 0){
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <main+0x328>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <main+0x288>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmbuck );
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <main+0x37c>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <main+0x31c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmboost );
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <main+0x380>)
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <main+0x31c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
 800238e:	e00f      	b.n	80023b0 <main+0x2a8>
	  }else {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1023 - pwmbuck );
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <main+0x37c>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	001a      	movs	r2, r3
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <main+0x384>)
 8002398:	1a9a      	subs	r2, r3, r2
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <main+0x31c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1023 - pwmboost);
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <main+0x380>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	001a      	movs	r2, r3
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <main+0x384>)
 80023a8:	1a9a      	subs	r2, r3, r2
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <main+0x31c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  ///////////////
	  if (vin < 1000){
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <main+0x35c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4936      	ldr	r1, [pc, #216]	; (8002490 <main+0x388>)
 80023b6:	1c18      	adds	r0, r3, #0
 80023b8:	f7fe f82e 	bl	8000418 <__aeabi_fcmplt>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d00a      	beq.n	80023d6 <main+0x2ce>
		    errorI = 0;
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <main+0x36c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(Under_Voltage_GPIO_Port, Under_Voltage_Pin, 1);
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	4832      	ldr	r0, [pc, #200]	; (8002494 <main+0x38c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	0019      	movs	r1, r3
 80023d0:	f001 fdb5 	bl	8003f3e <HAL_GPIO_WritePin>
 80023d4:	e006      	b.n	80023e4 <main+0x2dc>
	  } else HAL_GPIO_WritePin(Under_Voltage_GPIO_Port, Under_Voltage_Pin, 0);
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	019b      	lsls	r3, r3, #6
 80023da:	482e      	ldr	r0, [pc, #184]	; (8002494 <main+0x38c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	0019      	movs	r1, r3
 80023e0:	f001 fdad 	bl	8003f3e <HAL_GPIO_WritePin>
	  if (vin > 2500){
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <main+0x35c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	492b      	ldr	r1, [pc, #172]	; (8002498 <main+0x390>)
 80023ea:	1c18      	adds	r0, r3, #0
 80023ec:	f7fe f828 	bl	8000440 <__aeabi_fcmpgt>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d007      	beq.n	8002404 <main+0x2fc>
		  HAL_GPIO_WritePin(Over_Voltage_GPIO_Port, Over_Voltage_Pin, 1);
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	015b      	lsls	r3, r3, #5
 80023f8:	4826      	ldr	r0, [pc, #152]	; (8002494 <main+0x38c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	0019      	movs	r1, r3
 80023fe:	f001 fd9e 	bl	8003f3e <HAL_GPIO_WritePin>
 8002402:	e006      	b.n	8002412 <main+0x30a>
	  } else HAL_GPIO_WritePin(Over_Voltage_GPIO_Port, Over_Voltage_Pin, 0);
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	4822      	ldr	r0, [pc, #136]	; (8002494 <main+0x38c>)
 800240a:	2200      	movs	r2, #0
 800240c:	0019      	movs	r1, r3
 800240e:	f001 fd96 	bl	8003f3e <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f000 fda4 	bl	8002f60 <HAL_Delay>
	  vH	= 600;
 8002418:	e6c2      	b.n	80021a0 <main+0x98>
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	200000f0 	.word	0x200000f0
 8002420:	200000b0 	.word	0x200000b0
 8002424:	20000140 	.word	0x20000140
 8002428:	3dcccccd 	.word	0x3dcccccd
 800242c:	48001400 	.word	0x48001400
 8002430:	20000069 	.word	0x20000069
 8002434:	20000068 	.word	0x20000068
 8002438:	20000054 	.word	0x20000054
 800243c:	44160000 	.word	0x44160000
 8002440:	20000050 	.word	0x20000050
 8002444:	20000058 	.word	0x20000058
 8002448:	43fa0000 	.word	0x43fa0000
 800244c:	00000fff 	.word	0x00000fff
 8002450:	000009c4 	.word	0x000009c4
 8002454:	20000038 	.word	0x20000038
 8002458:	00002710 	.word	0x00002710
 800245c:	20000044 	.word	0x20000044
 8002460:	00000e2e 	.word	0x00000e2e
 8002464:	2000003c 	.word	0x2000003c
 8002468:	0000143f 	.word	0x0000143f
 800246c:	20000040 	.word	0x20000040
 8002470:	20000048 	.word	0x20000048
 8002474:	2000004c 	.word	0x2000004c
 8002478:	20000060 	.word	0x20000060
 800247c:	2000005c 	.word	0x2000005c
 8002480:	000002ff 	.word	0x000002ff
 8002484:	20000064 	.word	0x20000064
 8002488:	20000066 	.word	0x20000066
 800248c:	000003ff 	.word	0x000003ff
 8002490:	447a0000 	.word	0x447a0000
 8002494:	48000400 	.word	0x48000400
 8002498:	451c4000 	.word	0x451c4000

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b095      	sub	sp, #84	; 0x54
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	2420      	movs	r4, #32
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	0018      	movs	r0, r3
 80024a8:	2330      	movs	r3, #48	; 0x30
 80024aa:	001a      	movs	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f003 fd31 	bl	8005f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b2:	2310      	movs	r3, #16
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	0018      	movs	r0, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	001a      	movs	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	f003 fd29 	bl	8005f14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c2:	003b      	movs	r3, r7
 80024c4:	0018      	movs	r0, r3
 80024c6:	2310      	movs	r3, #16
 80024c8:	001a      	movs	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f003 fd22 	bl	8005f14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024d0:	0021      	movs	r1, r4
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2212      	movs	r2, #18
 80024d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2201      	movs	r2, #1
 80024dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2201      	movs	r2, #1
 80024e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2210      	movs	r2, #16
 80024e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2210      	movs	r2, #16
 80024ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2202      	movs	r2, #2
 80024f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	22a0      	movs	r2, #160	; 0xa0
 8002500:	0392      	lsls	r2, r2, #14
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250a:	187b      	adds	r3, r7, r1
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fd33 	bl	8003f78 <HAL_RCC_OscConfig>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002516:	f000 f828 	bl	800256a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251a:	2110      	movs	r1, #16
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2207      	movs	r2, #7
 8002520:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2202      	movs	r2, #2
 8002526:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2101      	movs	r1, #1
 8002538:	0018      	movs	r0, r3
 800253a:	f002 f837 	bl	80045ac <HAL_RCC_ClockConfig>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002542:	f000 f812 	bl	800256a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002546:	003b      	movs	r3, r7
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800254c:	003b      	movs	r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002552:	003b      	movs	r3, r7
 8002554:	0018      	movs	r0, r3
 8002556:	f002 f97b 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800255e:	f000 f804 	bl	800256a <Error_Handler>
  }
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b015      	add	sp, #84	; 0x54
 8002568:	bd90      	pop	{r4, r7, pc}

0800256a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256e:	b672      	cpsid	i
}
 8002570:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002572:	e7fe      	b.n	8002572 <Error_Handler+0x8>

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_MspInit+0x44>)
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_MspInit+0x44>)
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	619a      	str	r2, [r3, #24]
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_MspInit+0x44>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_MspInit+0x44>)
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_MspInit+0x44>)
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	0549      	lsls	r1, r1, #21
 800259c:	430a      	orrs	r2, r1
 800259e:	61da      	str	r2, [r3, #28]
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_MspInit+0x44>)
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	055b      	lsls	r3, r3, #21
 80025a8:	4013      	ands	r3, r2
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e0:	f000 fca2 	bl	8002f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <DMA1_Channel1_IRQHandler+0x14>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 fa2c 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	2000006c 	.word	0x2000006c

08002604 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800260a:	0018      	movs	r0, r3
 800260c:	f002 fb40 	bl	8004c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	20000140 	.word	0x20000140

0800261c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262e:	2340      	movs	r3, #64	; 0x40
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	0018      	movs	r0, r3
 8002634:	2308      	movs	r3, #8
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f003 fc6b 	bl	8005f14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	2324      	movs	r3, #36	; 0x24
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	0018      	movs	r0, r3
 8002644:	231c      	movs	r3, #28
 8002646:	001a      	movs	r2, r3
 8002648:	2100      	movs	r1, #0
 800264a:	f003 fc63 	bl	8005f14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	0018      	movs	r0, r3
 8002652:	2320      	movs	r3, #32
 8002654:	001a      	movs	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	f003 fc5c 	bl	8005f14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <MX_TIM1_Init+0x13c>)
 800265e:	4a42      	ldr	r2, [pc, #264]	; (8002768 <MX_TIM1_Init+0x140>)
 8002660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002662:	4b40      	ldr	r3, [pc, #256]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <MX_TIM1_Init+0x13c>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	00d2      	lsls	r2, r2, #3
 8002674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <MX_TIM1_Init+0x13c>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <MX_TIM1_Init+0x13c>)
 800268a:	0018      	movs	r0, r3
 800268c:	f002 f9fe 	bl	8004a8c <HAL_TIM_PWM_Init>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002694:	f7ff ff69 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a6:	187a      	adds	r2, r7, r1
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <MX_TIM1_Init+0x13c>)
 80026aa:	0011      	movs	r1, r2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f003 f815 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80026b6:	f7ff ff58 	bl	800256a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ba:	2124      	movs	r1, #36	; 0x24
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2260      	movs	r2, #96	; 0x60
 80026c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e6:	1879      	adds	r1, r7, r1
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_TIM1_Init+0x13c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f002 fbe5 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80026f6:	f7ff ff38 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026fa:	2324      	movs	r3, #36	; 0x24
 80026fc:	18f9      	adds	r1, r7, r3
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002700:	2204      	movs	r2, #4
 8002702:	0018      	movs	r0, r3
 8002704:	f002 fbda 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 800270c:	f7ff ff2d 	bl	800256a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0152      	lsls	r2, r2, #5
 800272e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	0192      	lsls	r2, r2, #6
 8002736:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800273e:	1d3a      	adds	r2, r7, #4
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002742:	0011      	movs	r1, r2
 8002744:	0018      	movs	r0, r3
 8002746:	f003 f821 	bl	800578c <HAL_TIMEx_ConfigBreakDeadTime>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800274e:	f7ff ff0c 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <MX_TIM1_Init+0x13c>)
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f9e9 	bl	8002b2c <HAL_TIM_MspPostInit>

}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b012      	add	sp, #72	; 0x48
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	20000140 	.word	0x20000140
 8002768:	40012c00 	.word	0x40012c00

0800276c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002772:	2320      	movs	r3, #32
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	0018      	movs	r0, r3
 8002778:	2308      	movs	r3, #8
 800277a:	001a      	movs	r2, r3
 800277c:	2100      	movs	r1, #0
 800277e:	f003 fbc9 	bl	8005f14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	0018      	movs	r0, r3
 8002786:	231c      	movs	r3, #28
 8002788:	001a      	movs	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	f003 fbc2 	bl	8005f14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <MX_TIM3_Init+0xcc>)
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <MX_TIM3_Init+0xd0>)
 8002794:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002796:	4b28      	ldr	r3, [pc, #160]	; (8002838 <MX_TIM3_Init+0xcc>)
 8002798:	2200      	movs	r2, #0
 800279a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <MX_TIM3_Init+0xcc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <MX_TIM3_Init+0xcc>)
 80027a4:	4a26      	ldr	r2, [pc, #152]	; (8002840 <MX_TIM3_Init+0xd4>)
 80027a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <MX_TIM3_Init+0xcc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <MX_TIM3_Init+0xcc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <MX_TIM3_Init+0xcc>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f002 f968 	bl	8004a8c <HAL_TIM_PWM_Init>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027c0:	f7ff fed3 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2120      	movs	r1, #32
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027d2:	187a      	adds	r2, r7, r1
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <MX_TIM3_Init+0xcc>)
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f002 ff7f 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80027e2:	f7ff fec2 	bl	800256a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2260      	movs	r2, #96	; 0x60
 80027ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fe:	1d39      	adds	r1, r7, #4
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <MX_TIM3_Init+0xcc>)
 8002802:	2200      	movs	r2, #0
 8002804:	0018      	movs	r0, r3
 8002806:	f002 fb59 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800280e:	f7ff feac 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002812:	1d39      	adds	r1, r7, #4
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <MX_TIM3_Init+0xcc>)
 8002816:	2204      	movs	r2, #4
 8002818:	0018      	movs	r0, r3
 800281a:	f002 fb4f 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002822:	f7ff fea2 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <MX_TIM3_Init+0xcc>)
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f97f 	bl	8002b2c <HAL_TIM_MspPostInit>

}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b00a      	add	sp, #40	; 0x28
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	200000f8 	.word	0x200000f8
 800283c:	40000400 	.word	0x40000400
 8002840:	0000ffff 	.word	0x0000ffff

08002844 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	0018      	movs	r0, r3
 800284e:	231c      	movs	r3, #28
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f003 fb5e 	bl	8005f14 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <MX_TIM14_Init+0x98>)
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <MX_TIM14_Init+0x9c>)
 800285c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_TIM14_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_TIM14_Init+0x98>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_TIM14_Init+0x98>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	00d2      	lsls	r2, r2, #3
 8002870:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_TIM14_Init+0x98>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <MX_TIM14_Init+0x98>)
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_TIM14_Init+0x98>)
 8002880:	0018      	movs	r0, r3
 8002882:	f002 f8b3 	bl	80049ec <HAL_TIM_Base_Init>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800288a:	f7ff fe6e 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_TIM14_Init+0x98>)
 8002890:	0018      	movs	r0, r3
 8002892:	f002 f8fb 	bl	8004a8c <HAL_TIM_PWM_Init>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d001      	beq.n	800289e <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 800289a:	f7ff fe66 	bl	800256a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2260      	movs	r2, #96	; 0x60
 80028a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1024;
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b8:	1d39      	adds	r1, r7, #4
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_TIM14_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	0018      	movs	r0, r3
 80028c0:	f002 fafc 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80028c8:	f7ff fe4f 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <MX_TIM14_Init+0x98>)
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f92c 	bl	8002b2c <HAL_TIM_MspPostInit>

}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b008      	add	sp, #32
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000188 	.word	0x20000188
 80028e0:	40002000 	.word	0x40002000

080028e4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ea:	2324      	movs	r3, #36	; 0x24
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	0018      	movs	r0, r3
 80028f0:	231c      	movs	r3, #28
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f003 fb0d 	bl	8005f14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	0018      	movs	r0, r3
 80028fe:	2320      	movs	r3, #32
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f003 fb06 	bl	8005f14 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002908:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <MX_TIM16_Init+0x100>)
 800290a:	4a37      	ldr	r2, [pc, #220]	; (80029e8 <MX_TIM16_Init+0x104>)
 800290c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800291a:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <MX_TIM16_Init+0x100>)
 800291c:	4a33      	ldr	r2, [pc, #204]	; (80029ec <MX_TIM16_Init+0x108>)
 800291e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <MX_TIM16_Init+0x100>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002934:	0018      	movs	r0, r3
 8002936:	f002 f859 	bl	80049ec <HAL_TIM_Base_Init>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800293e:	f7ff fe14 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002944:	0018      	movs	r0, r3
 8002946:	f002 f8a1 	bl	8004a8c <HAL_TIM_PWM_Init>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800294e:	f7ff fe0c 	bl	800256a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002952:	2124      	movs	r1, #36	; 0x24
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2260      	movs	r2, #96	; 0x60
 8002958:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002966:	187b      	adds	r3, r7, r1
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800297e:	1879      	adds	r1, r7, r1
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <MX_TIM16_Init+0x100>)
 8002982:	2200      	movs	r2, #0
 8002984:	0018      	movs	r0, r3
 8002986:	f002 fa99 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800298e:	f7ff fdec 	bl	800256a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	0192      	lsls	r2, r2, #6
 80029b6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80029be:	1d3a      	adds	r2, r7, #4
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_TIM16_Init+0x100>)
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 fee1 	bl	800578c <HAL_TIMEx_ConfigBreakDeadTime>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80029ce:	f7ff fdcc 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <MX_TIM16_Init+0x100>)
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f8a9 	bl	8002b2c <HAL_TIM_MspPostInit>

}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b010      	add	sp, #64	; 0x40
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	200001d0 	.word	0x200001d0
 80029e8:	40014400 	.word	0x40014400
 80029ec:	0000ffff 	.word	0x0000ffff

080029f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b08b      	sub	sp, #44	; 0x2c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	2414      	movs	r4, #20
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	0018      	movs	r0, r3
 80029fe:	2314      	movs	r3, #20
 8002a00:	001a      	movs	r2, r3
 8002a02:	2100      	movs	r1, #0
 8002a04:	f003 fa86 	bl	8005f14 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_TIM_PWM_MspInit+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d13b      	bne.n	8002a8a <HAL_TIM_PWM_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0109      	lsls	r1, r1, #4
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	619a      	str	r2, [r3, #24]
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0289      	lsls	r1, r1, #10
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	615a      	str	r2, [r3, #20]
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	029b      	lsls	r3, r3, #10
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = I_OUT_COMP_Pin;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2202      	movs	r2, #2
 8002a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2202      	movs	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I_OUT_COMP_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	187a      	adds	r2, r7, r1
 8002a6c:	2390      	movs	r3, #144	; 0x90
 8002a6e:	05db      	lsls	r3, r3, #23
 8002a70:	0011      	movs	r1, r2
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 f8d6 	bl	8003c24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	200d      	movs	r0, #13
 8002a7e:	f000 ff07 	bl	8003890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002a82:	200d      	movs	r0, #13
 8002a84:	f000 ff19 	bl	80038ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a88:	e010      	b.n	8002aac <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <HAL_TIM_PWM_MspInit+0xcc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10b      	bne.n	8002aac <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_TIM_PWM_MspInit+0xc8>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b00b      	add	sp, #44	; 0x2c
 8002ab2:	bd90      	pop	{r4, r7, pc}
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40000400 	.word	0x40000400

08002ac0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIM_Base_MspInit+0x60>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0049      	lsls	r1, r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002aee:	e012      	b.n	8002b16 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM16)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_TIM_Base_MspInit+0x68>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10d      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0289      	lsls	r1, r1, #10
 8002b04:	430a      	orrs	r2, r1
 8002b06:	619a      	str	r2, [r3, #24]
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_TIM_Base_MspInit+0x64>)
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40002000 	.word	0x40002000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40014400 	.word	0x40014400

08002b2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b08d      	sub	sp, #52	; 0x34
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	241c      	movs	r4, #28
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	0018      	movs	r0, r3
 8002b3a:	2314      	movs	r3, #20
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	2100      	movs	r1, #0
 8002b40:	f003 f9e8 	bl	8005f14 <memset>
  if(timHandle->Instance==TIM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <HAL_TIM_MspPostInit+0x1bc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d149      	bne.n	8002be2 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0289      	lsls	r1, r1, #10
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	02c9      	lsls	r1, r1, #11
 8002b74:	430a      	orrs	r2, r1
 8002b76:	615a      	str	r2, [r3, #20]
 8002b78:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	02db      	lsls	r3, r3, #11
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UB_ctrl_Pin|UA_ctrl_Pin|UC_ctrl_Pin;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	22e0      	movs	r2, #224	; 0xe0
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2202      	movs	r2, #2
 8002b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002ba0:	193b      	adds	r3, r7, r4
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	193a      	adds	r2, r7, r4
 8002ba8:	2390      	movs	r3, #144	; 0x90
 8002baa:	05db      	lsls	r3, r3, #23
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 f838 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UD_ctrl_Pin;
 8002bb4:	0021      	movs	r1, r4
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UD_ctrl_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	4a46      	ldr	r2, [pc, #280]	; (8002cf0 <HAL_TIM_MspPostInit+0x1c4>)
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f001 f822 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002be0:	e07d      	b.n	8002cde <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM3)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <HAL_TIM_MspPostInit+0x1c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d124      	bne.n	8002c36 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	02c9      	lsls	r1, r1, #11
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	02db      	lsls	r3, r3, #11
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I_OUT_COMP_PWM_Pin|U_OUT_COMP_PWM_Pin;
 8002c08:	211c      	movs	r1, #28
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2230      	movs	r2, #48	; 0x30
 8002c0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2202      	movs	r2, #2
 8002c14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2201      	movs	r2, #1
 8002c26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	4a31      	ldr	r2, [pc, #196]	; (8002cf0 <HAL_TIM_MspPostInit+0x1c4>)
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	0010      	movs	r0, r2
 8002c30:	f000 fff8 	bl	8003c24 <HAL_GPIO_Init>
}
 8002c34:	e053      	b.n	8002cde <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM14)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2f      	ldr	r2, [pc, #188]	; (8002cf8 <HAL_TIM_MspPostInit+0x1cc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d124      	bne.n	8002c8a <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	02c9      	lsls	r1, r1, #11
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	615a      	str	r2, [r3, #20]
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	02db      	lsls	r3, r3, #11
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UE_ctrl_Pin;
 8002c5c:	211c      	movs	r1, #28
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2202      	movs	r2, #2
 8002c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UE_ctrl_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_TIM_MspPostInit+0x1c4>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f000 ffce 	bl	8003c24 <HAL_GPIO_Init>
}
 8002c88:	e029      	b.n	8002cde <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIM_MspPostInit+0x1d0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d124      	bne.n	8002cde <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	02c9      	lsls	r1, r1, #11
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_TIM_MspPostInit+0x1c0>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	02db      	lsls	r3, r3, #11
 8002caa:	4013      	ands	r3, r2
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IS_boost_COMP_PWM_Pin;
 8002cb0:	211c      	movs	r1, #28
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0052      	lsls	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2202      	movs	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IS_boost_COMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_TIM_MspPostInit+0x1c4>)
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f000 ffa3 	bl	8003c24 <HAL_GPIO_Init>
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b00d      	add	sp, #52	; 0x34
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40002000 	.word	0x40002000
 8002cfc:	40014400 	.word	0x40014400

08002d00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <MX_USART1_UART_Init+0x5c>)
 8002d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d0c:	2296      	movs	r2, #150	; 0x96
 8002d0e:	0212      	lsls	r2, r2, #8
 8002d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d26:	220c      	movs	r2, #12
 8002d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <MX_USART1_UART_Init+0x58>)
 8002d44:	0018      	movs	r0, r3
 8002d46:	f002 fdb3 	bl	80058b0 <HAL_UART_Init>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d4e:	f7ff fc0c 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000218 	.word	0x20000218
 8002d5c:	40013800 	.word	0x40013800

08002d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b08b      	sub	sp, #44	; 0x2c
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	2414      	movs	r4, #20
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	2314      	movs	r3, #20
 8002d70:	001a      	movs	r2, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	f003 f8ce 	bl	8005f14 <memset>
  if(uartHandle->Instance==USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <HAL_UART_MspInit+0xd8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d156      	bne.n	8002e30 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	01c9      	lsls	r1, r1, #7
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	01db      	lsls	r3, r3, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0289      	lsls	r1, r1, #10
 8002da8:	430a      	orrs	r2, r1
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	02c9      	lsls	r1, r1, #11
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_UART_MspInit+0xdc>)
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	02db      	lsls	r3, r3, #11
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	00d2      	lsls	r2, r2, #3
 8002ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	2202      	movs	r2, #2
 8002de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	193b      	adds	r3, r7, r4
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	2203      	movs	r2, #3
 8002dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2201      	movs	r2, #1
 8002df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df6:	193a      	adds	r2, r7, r4
 8002df8:	2390      	movs	r3, #144	; 0x90
 8002dfa:	05db      	lsls	r3, r3, #23
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 ff10 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e04:	0021      	movs	r1, r4
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2202      	movs	r2, #2
 8002e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_UART_MspInit+0xe0>)
 8002e28:	0019      	movs	r1, r3
 8002e2a:	0010      	movs	r0, r2
 8002e2c:	f000 fefa 	bl	8003c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b00b      	add	sp, #44	; 0x2c
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	48000400 	.word	0x48000400

08002e44 <Reset_Handler>:
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <LoopForever+0x2>)
 8002e46:	4685      	mov	sp, r0
 8002e48:	480d      	ldr	r0, [pc, #52]	; (8002e80 <LoopForever+0x6>)
 8002e4a:	490e      	ldr	r1, [pc, #56]	; (8002e84 <LoopForever+0xa>)
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <LoopForever+0xe>)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e002      	b.n	8002e58 <LoopCopyDataInit>

08002e52 <CopyDataInit>:
 8002e52:	58d4      	ldr	r4, [r2, r3]
 8002e54:	50c4      	str	r4, [r0, r3]
 8002e56:	3304      	adds	r3, #4

08002e58 <LoopCopyDataInit>:
 8002e58:	18c4      	adds	r4, r0, r3
 8002e5a:	428c      	cmp	r4, r1
 8002e5c:	d3f9      	bcc.n	8002e52 <CopyDataInit>
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <LoopForever+0x12>)
 8002e60:	4c0b      	ldr	r4, [pc, #44]	; (8002e90 <LoopForever+0x16>)
 8002e62:	2300      	movs	r3, #0
 8002e64:	e001      	b.n	8002e6a <LoopFillZerobss>

08002e66 <FillZerobss>:
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	3204      	adds	r2, #4

08002e6a <LoopFillZerobss>:
 8002e6a:	42a2      	cmp	r2, r4
 8002e6c:	d3fb      	bcc.n	8002e66 <FillZerobss>
 8002e6e:	f7ff fbd5 	bl	800261c <SystemInit>
 8002e72:	f003 f82b 	bl	8005ecc <__libc_init_array>
 8002e76:	f7ff f947 	bl	8002108 <main>

08002e7a <LoopForever>:
 8002e7a:	e7fe      	b.n	8002e7a <LoopForever>
 8002e7c:	20002000 	.word	0x20002000
 8002e80:	20000000 	.word	0x20000000
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	0800603c 	.word	0x0800603c
 8002e8c:	2000000c 	.word	0x2000000c
 8002e90:	200002a0 	.word	0x200002a0

08002e94 <ADC1_IRQHandler>:
 8002e94:	e7fe      	b.n	8002e94 <ADC1_IRQHandler>
	...

08002e98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_Init+0x24>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_Init+0x24>)
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f000 f809 	bl	8002ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eae:	f7ff fb61 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	40022000 	.word	0x40022000

08002ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_InitTick+0x5c>)
 8002eca:	681c      	ldr	r4, [r3, #0]
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_InitTick+0x60>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	23fa      	movs	r3, #250	; 0xfa
 8002ed4:	0098      	lsls	r0, r3, #2
 8002ed6:	f7fd f917 	bl	8000108 <__udivsi3>
 8002eda:	0003      	movs	r3, r0
 8002edc:	0019      	movs	r1, r3
 8002ede:	0020      	movs	r0, r4
 8002ee0:	f7fd f912 	bl	8000108 <__udivsi3>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fcf7 	bl	80038da <HAL_SYSTICK_Config>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e00f      	b.n	8002f14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d80b      	bhi.n	8002f12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	2301      	movs	r3, #1
 8002efe:	425b      	negs	r3, r3
 8002f00:	2200      	movs	r2, #0
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 fcc4 	bl	8003890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_InitTick+0x64>)
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b003      	add	sp, #12
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000008 	.word	0x20000008
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_IncTick+0x1c>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	001a      	movs	r2, r3
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_IncTick+0x20>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	18d2      	adds	r2, r2, r3
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_IncTick+0x20>)
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	20000008 	.word	0x20000008
 8002f48:	2000029c 	.word	0x2000029c

08002f4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <HAL_GetTick+0x10>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	2000029c 	.word	0x2000029c

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3301      	adds	r3, #1
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	001a      	movs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	f7ff ffe0 	bl	8002f4c <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e125      	b.n	8003212 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2234      	movs	r2, #52	; 0x34
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fe fe90 	bl	8001d04 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2210      	movs	r2, #16
 8002fea:	4013      	ands	r3, r2
 8002fec:	d000      	beq.n	8002ff0 <HAL_ADC_Init+0x48>
 8002fee:	e103      	b.n	80031f8 <HAL_ADC_Init+0x250>
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d000      	beq.n	8002ffc <HAL_ADC_Init+0x54>
 8002ffa:	e0fd      	b.n	80031f8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2204      	movs	r2, #4
 8003004:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003006:	d000      	beq.n	800300a <HAL_ADC_Init+0x62>
 8003008:	e0f6      	b.n	80031f8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_ADC_Init+0x274>)
 8003010:	4013      	ands	r3, r2
 8003012:	2202      	movs	r2, #2
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	2b01      	cmp	r3, #1
 8003026:	d112      	bne.n	800304e <HAL_ADC_Init+0xa6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	2b01      	cmp	r3, #1
 8003034:	d009      	beq.n	800304a <HAL_ADC_Init+0xa2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	401a      	ands	r2, r3
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	429a      	cmp	r2, r3
 8003048:	d101      	bne.n	800304e <HAL_ADC_Init+0xa6>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_ADC_Init+0xa8>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2218      	movs	r2, #24
 800305c:	4393      	bics	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	0899      	lsrs	r1, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4964      	ldr	r1, [pc, #400]	; (8003220 <HAL_ADC_Init+0x278>)
 800308e:	400a      	ands	r2, r1
 8003090:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7e1b      	ldrb	r3, [r3, #24]
 8003096:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7e5b      	ldrb	r3, [r3, #25]
 800309c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800309e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7e9b      	ldrb	r3, [r3, #26]
 80030a4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d002      	beq.n	80030b6 <HAL_ADC_Init+0x10e>
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_Init+0x110>
 80030b6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030b8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030be:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_Init+0x124>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e000      	b.n	80030ce <HAL_ADC_Init+0x126>
 80030cc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80030ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2124      	movs	r1, #36	; 0x24
 80030d4:	5c5b      	ldrb	r3, [r3, r1]
 80030d6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030d8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7edb      	ldrb	r3, [r3, #27]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d115      	bne.n	8003114 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7e9b      	ldrb	r3, [r3, #26]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	0252      	lsls	r2, r2, #9
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	e00b      	b.n	8003114 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	2220      	movs	r2, #32
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2201      	movs	r2, #1
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	23c2      	movs	r3, #194	; 0xc2
 800311a:	33ff      	adds	r3, #255	; 0xff
 800311c:	429a      	cmp	r2, r3
 800311e:	d007      	beq.n	8003130 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003128:	4313      	orrs	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68d9      	ldr	r1, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	055b      	lsls	r3, r3, #21
 8003148:	429a      	cmp	r2, r3
 800314a:	d01b      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d017      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2b02      	cmp	r3, #2
 800315a:	d013      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2b03      	cmp	r3, #3
 8003162:	d00f      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00b      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b05      	cmp	r3, #5
 8003172:	d007      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2b06      	cmp	r3, #6
 800317a:	d003      	beq.n	8003184 <HAL_ADC_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b07      	cmp	r3, #7
 8003182:	d112      	bne.n	80031aa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2107      	movs	r1, #7
 8003190:	438a      	bics	r2, r1
 8003192:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6959      	ldr	r1, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	2207      	movs	r2, #7
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_ADC_Init+0x27c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d10b      	bne.n	80031d2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2203      	movs	r2, #3
 80031c6:	4393      	bics	r3, r2
 80031c8:	2201      	movs	r2, #1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031d0:	e01c      	b.n	800320c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	2212      	movs	r2, #18
 80031d8:	4393      	bics	r3, r2
 80031da:	2210      	movs	r2, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2201      	movs	r2, #1
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80031ee:	230f      	movs	r3, #15
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031f6:	e009      	b.n	800320c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2210      	movs	r2, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003204:	230f      	movs	r3, #15
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800320c:	230f      	movs	r3, #15
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	fffffefd 	.word	0xfffffefd
 8003220:	fffe0219 	.word	0xfffe0219
 8003224:	833fffe7 	.word	0x833fffe7

08003228 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2317      	movs	r3, #23
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	d15e      	bne.n	8003306 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2234      	movs	r2, #52	; 0x34
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Start_DMA+0x2e>
 8003252:	2302      	movs	r3, #2
 8003254:	e05e      	b.n	8003314 <HAL_ADC_Start_DMA+0xec>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2234      	movs	r2, #52	; 0x34
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	7e5b      	ldrb	r3, [r3, #25]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003266:	2317      	movs	r3, #23
 8003268:	18fc      	adds	r4, r7, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f963 	bl	8003538 <ADC_Enable>
 8003272:	0003      	movs	r3, r0
 8003274:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003276:	2317      	movs	r3, #23
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d146      	bne.n	800330e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <HAL_ADC_Start_DMA+0xf4>)
 8003286:	4013      	ands	r3, r2
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2234      	movs	r2, #52	; 0x34
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_ADC_Start_DMA+0xf8>)
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_ADC_Start_DMA+0xfc>)
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_ADC_Start_DMA+0x100>)
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	221c      	movs	r2, #28
 80032be:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2110      	movs	r1, #16
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3340      	adds	r3, #64	; 0x40
 80032ea:	0019      	movs	r1, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f000 fb48 	bl	8003984 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2104      	movs	r1, #4
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e003      	b.n	800330e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003306:	2317      	movs	r3, #23
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800330e:	2317      	movs	r3, #23
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	781b      	ldrb	r3, [r3, #0]
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b007      	add	sp, #28
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	fffff0fe 	.word	0xfffff0fe
 8003320:	08003631 	.word	0x08003631
 8003324:	080036e5 	.word	0x080036e5
 8003328:	08003703 	.word	0x08003703

0800332c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003356:	230f      	movs	r3, #15
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	055b      	lsls	r3, r3, #21
 800336a:	429a      	cmp	r2, r3
 800336c:	d011      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x46>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d00d      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x46>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	2b02      	cmp	r3, #2
 800337c:	d009      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x46>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	2b03      	cmp	r3, #3
 8003384:	d005      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x46>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	2b04      	cmp	r3, #4
 800338c:	d001      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x46>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2234      	movs	r2, #52	; 0x34
 8003396:	5c9b      	ldrb	r3, [r3, r2]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x54>
 800339c:	2302      	movs	r3, #2
 800339e:	e0bb      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1cc>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2234      	movs	r2, #52	; 0x34
 80033a4:	2101      	movs	r1, #1
 80033a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2204      	movs	r2, #4
 80033b0:	4013      	ands	r3, r2
 80033b2:	d000      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x6a>
 80033b4:	e09f      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a59      	ldr	r2, [pc, #356]	; (8003520 <HAL_ADC_ConfigChannel+0x1d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x76>
 80033c0:	e077      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	055b      	lsls	r3, r3, #21
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d037      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d033      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d02f      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d02b      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b04      	cmp	r3, #4
 8003402:	d027      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2b05      	cmp	r3, #5
 800340a:	d023      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b06      	cmp	r3, #6
 8003412:	d01f      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2b07      	cmp	r3, #7
 800341a:	d01b      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2107      	movs	r1, #7
 8003428:	400b      	ands	r3, r1
 800342a:	429a      	cmp	r2, r3
 800342c:	d012      	beq.n	8003454 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2107      	movs	r1, #7
 800343a:	438a      	bics	r2, r1
 800343c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6959      	ldr	r1, [r3, #20]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2207      	movs	r2, #7
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b10      	cmp	r3, #16
 800345a:	d003      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x118>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b11      	cmp	r3, #17
 8003462:	d152      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_ADC_ConfigChannel+0x1d8>)
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b10      	cmp	r3, #16
 800346e:	d102      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x12a>
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	e001      	b.n	800347a <HAL_ADC_ConfigChannel+0x12e>
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	03db      	lsls	r3, r3, #15
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_ADC_ConfigChannel+0x1d8>)
 800347c:	430b      	orrs	r3, r1
 800347e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b10      	cmp	r3, #16
 8003486:	d140      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_ADC_ConfigChannel+0x1dc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4927      	ldr	r1, [pc, #156]	; (800352c <HAL_ADC_ConfigChannel+0x1e0>)
 800348e:	0018      	movs	r0, r3
 8003490:	f7fc fe3a 	bl	8000108 <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	001a      	movs	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	189b      	adds	r3, r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x158>
 80034b0:	e02b      	b.n	800350a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	4099      	lsls	r1, r3
 80034c0:	000b      	movs	r3, r1
 80034c2:	43d9      	mvns	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d003      	beq.n	80034dc <HAL_ADC_ConfigChannel+0x190>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b11      	cmp	r3, #17
 80034da:	d116      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_ADC_ConfigChannel+0x1d8>)
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x1a0>
 80034e8:	4a11      	ldr	r2, [pc, #68]	; (8003530 <HAL_ADC_ConfigChannel+0x1e4>)
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x1a2>
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <HAL_ADC_ConfigChannel+0x1e8>)
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_ADC_ConfigChannel+0x1d8>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e009      	b.n	800350a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	2220      	movs	r2, #32
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003502:	230f      	movs	r3, #15
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2234      	movs	r2, #52	; 0x34
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003512:	230f      	movs	r3, #15
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	781b      	ldrb	r3, [r3, #0]
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	00001001 	.word	0x00001001
 8003524:	40012708 	.word	0x40012708
 8003528:	20000000 	.word	0x20000000
 800352c:	000f4240 	.word	0x000f4240
 8003530:	ff7fffff 	.word	0xff7fffff
 8003534:	ffbfffff 	.word	0xffbfffff

08003538 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2203      	movs	r2, #3
 8003550:	4013      	ands	r3, r2
 8003552:	2b01      	cmp	r3, #1
 8003554:	d112      	bne.n	800357c <ADC_Enable+0x44>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	4013      	ands	r3, r2
 8003560:	2b01      	cmp	r3, #1
 8003562:	d009      	beq.n	8003578 <ADC_Enable+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	401a      	ands	r2, r3
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	429a      	cmp	r2, r3
 8003576:	d101      	bne.n	800357c <ADC_Enable+0x44>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <ADC_Enable+0x46>
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d14b      	bne.n	800361a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <ADC_Enable+0xec>)
 800358a:	4013      	ands	r3, r2
 800358c:	d00d      	beq.n	80035aa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	2210      	movs	r2, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2201      	movs	r2, #1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e038      	b.n	800361c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <ADC_Enable+0xf0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <ADC_Enable+0xf4>)
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7fc fda1 	bl	8000108 <__udivsi3>
 80035c6:	0003      	movs	r3, r0
 80035c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035ca:	e002      	b.n	80035d2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80035d8:	f7ff fcb8 	bl	8002f4c <HAL_GetTick>
 80035dc:	0003      	movs	r3, r0
 80035de:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035e0:	e014      	b.n	800360c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035e2:	f7ff fcb3 	bl	8002f4c <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d90d      	bls.n	800360c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2210      	movs	r2, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2201      	movs	r2, #1
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	2b01      	cmp	r3, #1
 8003618:	d1e3      	bne.n	80035e2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}
 8003624:	80000017 	.word	0x80000017
 8003628:	20000000 	.word	0x20000000
 800362c:	000f4240 	.word	0x000f4240

08003630 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2250      	movs	r2, #80	; 0x50
 8003644:	4013      	ands	r3, r2
 8003646:	d140      	bne.n	80036ca <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	0092      	lsls	r2, r2, #2
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	23c0      	movs	r3, #192	; 0xc0
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	4013      	ands	r3, r2
 8003662:	d12d      	bne.n	80036c0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003668:	2b00      	cmp	r3, #0
 800366a:	d129      	bne.n	80036c0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2208      	movs	r2, #8
 8003674:	4013      	ands	r3, r2
 8003676:	2b08      	cmp	r3, #8
 8003678:	d122      	bne.n	80036c0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2204      	movs	r2, #4
 8003682:	4013      	ands	r3, r2
 8003684:	d110      	bne.n	80036a8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	210c      	movs	r1, #12
 8003692:	438a      	bics	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <ADC_DMAConvCplt+0xb0>)
 800369c:	4013      	ands	r3, r2
 800369e:	2201      	movs	r2, #1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
 80036a6:	e00b      	b.n	80036c0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	2220      	movs	r2, #32
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2201      	movs	r2, #1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fe fca0 	bl	8002008 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80036c8:	e005      	b.n	80036d6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	0010      	movs	r0, r2
 80036d4:	4798      	blx	r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	fffffefe 	.word	0xfffffefe

080036e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fe19 	bl	800332c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bd80      	pop	{r7, pc}

08003702 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2240      	movs	r2, #64	; 0x40
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	2204      	movs	r2, #4
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0018      	movs	r0, r3
 800372c:	f7ff fe06 	bl	800333c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	0002      	movs	r2, r0
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b7f      	cmp	r3, #127	; 0x7f
 800374a:	d809      	bhi.n	8003760 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	001a      	movs	r2, r3
 8003752:	231f      	movs	r3, #31
 8003754:	401a      	ands	r2, r3
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_EnableIRQ+0x30>)
 8003758:	2101      	movs	r1, #1
 800375a:	4091      	lsls	r1, r2
 800375c:	000a      	movs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
  }
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000e100 	.word	0xe000e100

0800376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	0002      	movs	r2, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b7f      	cmp	r3, #127	; 0x7f
 8003780:	d828      	bhi.n	80037d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003782:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <__NVIC_SetPriority+0xd4>)
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b25b      	sxtb	r3, r3
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	33c0      	adds	r3, #192	; 0xc0
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	589b      	ldr	r3, [r3, r2]
 8003792:	1dfa      	adds	r2, r7, #7
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	0011      	movs	r1, r2
 8003798:	2203      	movs	r2, #3
 800379a:	400a      	ands	r2, r1
 800379c:	00d2      	lsls	r2, r2, #3
 800379e:	21ff      	movs	r1, #255	; 0xff
 80037a0:	4091      	lsls	r1, r2
 80037a2:	000a      	movs	r2, r1
 80037a4:	43d2      	mvns	r2, r2
 80037a6:	401a      	ands	r2, r3
 80037a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	22ff      	movs	r2, #255	; 0xff
 80037b0:	401a      	ands	r2, r3
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	0018      	movs	r0, r3
 80037b8:	2303      	movs	r3, #3
 80037ba:	4003      	ands	r3, r0
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037c0:	481f      	ldr	r0, [pc, #124]	; (8003840 <__NVIC_SetPriority+0xd4>)
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	430a      	orrs	r2, r1
 80037cc:	33c0      	adds	r3, #192	; 0xc0
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037d2:	e031      	b.n	8003838 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <__NVIC_SetPriority+0xd8>)
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	0019      	movs	r1, r3
 80037dc:	230f      	movs	r3, #15
 80037de:	400b      	ands	r3, r1
 80037e0:	3b08      	subs	r3, #8
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3306      	adds	r3, #6
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	3304      	adds	r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1dfa      	adds	r2, r7, #7
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	0011      	movs	r1, r2
 80037f4:	2203      	movs	r2, #3
 80037f6:	400a      	ands	r2, r1
 80037f8:	00d2      	lsls	r2, r2, #3
 80037fa:	21ff      	movs	r1, #255	; 0xff
 80037fc:	4091      	lsls	r1, r2
 80037fe:	000a      	movs	r2, r1
 8003800:	43d2      	mvns	r2, r2
 8003802:	401a      	ands	r2, r3
 8003804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	401a      	ands	r2, r3
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	0018      	movs	r0, r3
 8003814:	2303      	movs	r3, #3
 8003816:	4003      	ands	r3, r0
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800381c:	4809      	ldr	r0, [pc, #36]	; (8003844 <__NVIC_SetPriority+0xd8>)
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	001c      	movs	r4, r3
 8003824:	230f      	movs	r3, #15
 8003826:	4023      	ands	r3, r4
 8003828:	3b08      	subs	r3, #8
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	430a      	orrs	r2, r1
 800382e:	3306      	adds	r3, #6
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	18c3      	adds	r3, r0, r3
 8003834:	3304      	adds	r3, #4
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b003      	add	sp, #12
 800383e:	bd90      	pop	{r4, r7, pc}
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	045b      	lsls	r3, r3, #17
 8003858:	429a      	cmp	r2, r3
 800385a:	d301      	bcc.n	8003860 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385c:	2301      	movs	r3, #1
 800385e:	e010      	b.n	8003882 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <SysTick_Config+0x44>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	3a01      	subs	r2, #1
 8003866:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003868:	2301      	movs	r3, #1
 800386a:	425b      	negs	r3, r3
 800386c:	2103      	movs	r1, #3
 800386e:	0018      	movs	r0, r3
 8003870:	f7ff ff7c 	bl	800376c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <SysTick_Config+0x44>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <SysTick_Config+0x44>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	210f      	movs	r1, #15
 800389c:	187b      	adds	r3, r7, r1
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff ff5d 	bl	800376c <__NVIC_SetPriority>
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	0002      	movs	r2, r0
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff33 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff ffaf 	bl	8003848 <SysTick_Config>
 80038ea:	0003      	movs	r3, r0
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e036      	b.n	8003978 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2221      	movs	r2, #33	; 0x21
 800390e:	2102      	movs	r1, #2
 8003910:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_DMA_Init+0x8c>)
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800392a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f946 	bl	8003bec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2221      	movs	r2, #33	; 0x21
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}  
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffffc00f 	.word	0xffffc00f

08003984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003992:	2317      	movs	r3, #23
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_DMA_Start_IT+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e04f      	b.n	8003a48 <HAL_DMA_Start_IT+0xc4>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	2101      	movs	r1, #1
 80039ae:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2221      	movs	r2, #33	; 0x21
 80039b4:	5c9b      	ldrb	r3, [r3, r2]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d13a      	bne.n	8003a32 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	; 0x21
 80039c0:	2102      	movs	r1, #2
 80039c2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	438a      	bics	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8d7 	bl	8003b94 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	210e      	movs	r1, #14
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e00f      	b.n	8003a20 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	210a      	movs	r1, #10
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e007      	b.n	8003a42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003a3a:	2317      	movs	r3, #23
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003a42:	2317      	movs	r3, #23
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	781b      	ldrb	r3, [r3, #0]
} 
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b006      	add	sp, #24
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	0013      	movs	r3, r2
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	d024      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x72>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d020      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d107      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2104      	movs	r1, #4
 8003a98:	438a      	bics	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	4091      	lsls	r1, r2
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d100      	bne.n	8003ab6 <HAL_DMA_IRQHandler+0x66>
 8003ab4:	e06a      	b.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	0010      	movs	r0, r2
 8003abe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ac0:	e064      	b.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	0013      	movs	r3, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d02b      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xda>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d027      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d10b      	bne.n	8003afe <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	210a      	movs	r1, #10
 8003af2:	438a      	bics	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2221      	movs	r2, #33	; 0x21
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2102      	movs	r1, #2
 8003b08:	4091      	lsls	r1, r2
 8003b0a:	000a      	movs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	0010      	movs	r0, r2
 8003b26:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003b28:	e030      	b.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2208      	movs	r2, #8
 8003b30:	409a      	lsls	r2, r3
 8003b32:	0013      	movs	r3, r2
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4013      	ands	r3, r2
 8003b38:	d028      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d024      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	210e      	movs	r1, #14
 8003b4e:	438a      	bics	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4091      	lsls	r1, r2
 8003b5e:	000a      	movs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	2100      	movs	r1, #0
 8003b76:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	0010      	movs	r0, r2
 8003b88:	4798      	blx	r3
    }
   }
}  
 8003b8a:	e7ff      	b.n	8003b8c <HAL_DMA_IRQHandler+0x13c>
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2101      	movs	r1, #1
 8003bac:	4091      	lsls	r1, r2
 8003bae:	000a      	movs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d108      	bne.n	8003bd4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bd2:	e007      	b.n	8003be4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <DMA_CalcBaseAndBitshift+0x30>)
 8003bfa:	4694      	mov	ip, r2
 8003bfc:	4463      	add	r3, ip
 8003bfe:	2114      	movs	r1, #20
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fc fa81 	bl	8000108 <__udivsi3>
 8003c06:	0003      	movs	r3, r0
 8003c08:	009a      	lsls	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <DMA_CalcBaseAndBitshift+0x34>)
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	bffdfff8 	.word	0xbffdfff8
 8003c20:	40020000 	.word	0x40020000

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	e14f      	b.n	8003ed4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4091      	lsls	r1, r2
 8003c3e:	000a      	movs	r2, r1
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d100      	bne.n	8003c4c <HAL_GPIO_Init+0x28>
 8003c4a:	e140      	b.n	8003ece <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d00b      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d007      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c60:	2b11      	cmp	r3, #17
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b12      	cmp	r3, #18
 8003c6a:	d130      	bne.n	8003cce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	0013      	movs	r3, r2
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	0013      	movs	r3, r2
 8003caa:	43da      	mvns	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	2201      	movs	r2, #1
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	0013      	movs	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0xea>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b12      	cmp	r3, #18
 8003d0c:	d123      	bne.n	8003d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	58d3      	ldr	r3, [r2, r3]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2207      	movs	r2, #7
 8003d20:	4013      	ands	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2107      	movs	r1, #7
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	0092      	lsls	r2, r2, #2
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	409a      	lsls	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	43da      	mvns	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2203      	movs	r2, #3
 8003d74:	401a      	ands	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	055b      	lsls	r3, r3, #21
 8003d92:	4013      	ands	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_GPIO_Init+0x174>
 8003d96:	e09a      	b.n	8003ece <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d98:	4b54      	ldr	r3, [pc, #336]	; (8003eec <HAL_GPIO_Init+0x2c8>)
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_GPIO_Init+0x2c8>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]
 8003da4:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_GPIO_Init+0x2c8>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2201      	movs	r2, #1
 8003daa:	4013      	ands	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003db0:	4a4f      	ldr	r2, [pc, #316]	; (8003ef0 <HAL_GPIO_Init+0x2cc>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	589b      	ldr	r3, [r3, r2]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	0013      	movs	r3, r2
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	2390      	movs	r3, #144	; 0x90
 8003dd8:	05db      	lsls	r3, r3, #23
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d013      	beq.n	8003e06 <HAL_GPIO_Init+0x1e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a44      	ldr	r2, [pc, #272]	; (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00d      	beq.n	8003e02 <HAL_GPIO_Init+0x1de>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a43      	ldr	r2, [pc, #268]	; (8003ef8 <HAL_GPIO_Init+0x2d4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <HAL_GPIO_Init+0x1da>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a42      	ldr	r2, [pc, #264]	; (8003efc <HAL_GPIO_Init+0x2d8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003df6:	2303      	movs	r3, #3
 8003df8:	e006      	b.n	8003e08 <HAL_GPIO_Init+0x1e4>
 8003dfa:	2305      	movs	r3, #5
 8003dfc:	e004      	b.n	8003e08 <HAL_GPIO_Init+0x1e4>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_Init+0x1e4>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x1e4>
 8003e06:	2300      	movs	r3, #0
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4093      	lsls	r3, r2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e18:	4935      	ldr	r1, [pc, #212]	; (8003ef0 <HAL_GPIO_Init+0x2cc>)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	3302      	adds	r3, #2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	025b      	lsls	r3, r3, #9
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e74:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43da      	mvns	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	035b      	lsls	r3, r3, #13
 8003e92:	4013      	ands	r3, r2
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	43da      	mvns	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	039b      	lsls	r3, r3, #14
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	40da      	lsrs	r2, r3
 8003edc:	1e13      	subs	r3, r2, #0
 8003ede:	d000      	beq.n	8003ee2 <HAL_GPIO_Init+0x2be>
 8003ee0:	e6a8      	b.n	8003c34 <HAL_GPIO_Init+0x10>
  } 
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b006      	add	sp, #24
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	48000400 	.word	0x48000400
 8003ef8:	48000800 	.word	0x48000800
 8003efc:	48000c00 	.word	0x48000c00
 8003f00:	40010400 	.word	0x40010400

08003f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	000a      	movs	r2, r1
 8003f0e:	1cbb      	adds	r3, r7, #2
 8003f10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	1cba      	adds	r2, r7, #2
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f1e:	230f      	movs	r3, #15
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e003      	b.n	8003f30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f28:	230f      	movs	r3, #15
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f30:	230f      	movs	r3, #15
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	781b      	ldrb	r3, [r3, #0]
  }
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	0008      	movs	r0, r1
 8003f48:	0011      	movs	r1, r2
 8003f4a:	1cbb      	adds	r3, r7, #2
 8003f4c:	1c02      	adds	r2, r0, #0
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	1c7b      	adds	r3, r7, #1
 8003f52:	1c0a      	adds	r2, r1, #0
 8003f54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f56:	1c7b      	adds	r3, r7, #1
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f5e:	1cbb      	adds	r3, r7, #2
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f66:	e003      	b.n	8003f70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f68:	1cbb      	adds	r3, r7, #2
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e301      	b.n	800458e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	d100      	bne.n	8003f96 <HAL_RCC_OscConfig+0x1e>
 8003f94:	e08d      	b.n	80040b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f96:	4bc3      	ldr	r3, [pc, #780]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fa2:	4bc0      	ldr	r3, [pc, #768]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	220c      	movs	r2, #12
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x64>
 8003fae:	4bbd      	ldr	r3, [pc, #756]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	025b      	lsls	r3, r3, #9
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	4bb8      	ldr	r3, [pc, #736]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d100      	bne.n	8003fce <HAL_RCC_OscConfig+0x56>
 8003fcc:	e070      	b.n	80040b0 <HAL_RCC_OscConfig+0x138>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d000      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x60>
 8003fd6:	e06b      	b.n	80040b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e2d8      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x7c>
 8003fe4:	4baf      	ldr	r3, [pc, #700]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4bae      	ldr	r3, [pc, #696]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	0249      	lsls	r1, r1, #9
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e02f      	b.n	8004054 <HAL_RCC_OscConfig+0xdc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x9e>
 8003ffc:	4ba9      	ldr	r3, [pc, #676]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4ba8      	ldr	r3, [pc, #672]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004002:	49a9      	ldr	r1, [pc, #676]	; (80042a8 <HAL_RCC_OscConfig+0x330>)
 8004004:	400a      	ands	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	4ba6      	ldr	r3, [pc, #664]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800400e:	49a7      	ldr	r1, [pc, #668]	; (80042ac <HAL_RCC_OscConfig+0x334>)
 8004010:	400a      	ands	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e01e      	b.n	8004054 <HAL_RCC_OscConfig+0xdc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d10e      	bne.n	800403c <HAL_RCC_OscConfig+0xc4>
 800401e:	4ba1      	ldr	r3, [pc, #644]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	02c9      	lsls	r1, r1, #11
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	4b9d      	ldr	r3, [pc, #628]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0249      	lsls	r1, r1, #9
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xdc>
 800403c:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b98      	ldr	r3, [pc, #608]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004042:	4999      	ldr	r1, [pc, #612]	; (80042a8 <HAL_RCC_OscConfig+0x330>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4b96      	ldr	r3, [pc, #600]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b95      	ldr	r3, [pc, #596]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800404e:	4997      	ldr	r1, [pc, #604]	; (80042ac <HAL_RCC_OscConfig+0x334>)
 8004050:	400a      	ands	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d014      	beq.n	8004086 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fe ff76 	bl	8002f4c <HAL_GetTick>
 8004060:	0003      	movs	r3, r0
 8004062:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004066:	f7fe ff71 	bl	8002f4c <HAL_GetTick>
 800406a:	0002      	movs	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e28a      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004078:	4b8a      	ldr	r3, [pc, #552]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	029b      	lsls	r3, r3, #10
 8004080:	4013      	ands	r3, r2
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0xee>
 8004084:	e015      	b.n	80040b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fe ff61 	bl	8002f4c <HAL_GetTick>
 800408a:	0003      	movs	r3, r0
 800408c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe ff5c 	bl	8002f4c <HAL_GetTick>
 8004094:	0002      	movs	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e275      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	4013      	ands	r3, r2
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x118>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	d100      	bne.n	80040be <HAL_RCC_OscConfig+0x146>
 80040bc:	e069      	b.n	8004192 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040be:	4b79      	ldr	r3, [pc, #484]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	220c      	movs	r2, #12
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040c8:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	220c      	movs	r2, #12
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d11c      	bne.n	800410e <HAL_RCC_OscConfig+0x196>
 80040d4:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	025b      	lsls	r3, r3, #9
 80040dc:	4013      	ands	r3, r2
 80040de:	d116      	bne.n	800410e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e0:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d005      	beq.n	80040f6 <HAL_RCC_OscConfig+0x17e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e24b      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f6:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	22f8      	movs	r2, #248	; 0xf8
 80040fc:	4393      	bics	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00da      	lsls	r2, r3, #3
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410c:	e041      	b.n	8004192 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d024      	beq.n	8004160 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b62      	ldr	r3, [pc, #392]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800411c:	2101      	movs	r1, #1
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe ff13 	bl	8002f4c <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412c:	f7fe ff0e 	bl	8002f4c <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e227      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	d0f1      	beq.n	800412c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b56      	ldr	r3, [pc, #344]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	22f8      	movs	r2, #248	; 0xf8
 800414e:	4393      	bics	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00da      	lsls	r2, r3, #3
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e018      	b.n	8004192 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe feee 	bl	8002f4c <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004176:	f7fe fee9 	bl	8002f4c <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e202      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d1f1      	bne.n	8004176 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2208      	movs	r2, #8
 8004198:	4013      	ands	r3, r2
 800419a:	d036      	beq.n	800420a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d019      	beq.n	80041d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a4:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80041a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	430a      	orrs	r2, r1
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fe fecc 	bl	8002f4c <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fe fec7 	bl	8002f4c <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1e0      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d0f1      	beq.n	80041ba <HAL_RCC_OscConfig+0x242>
 80041d6:	e018      	b.n	800420a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d8:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80041da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 80041de:	2101      	movs	r1, #1
 80041e0:	438a      	bics	r2, r1
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fe feb2 	bl	8002f4c <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fe fead 	bl	8002f4c <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1c6      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d1f1      	bne.n	80041ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d100      	bne.n	8004216 <HAL_RCC_OscConfig+0x29e>
 8004214:	e0b4      	b.n	8004380 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004216:	201f      	movs	r0, #31
 8004218:	183b      	adds	r3, r7, r0
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	055b      	lsls	r3, r3, #21
 8004226:	4013      	ands	r3, r2
 8004228:	d110      	bne.n	800424c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0549      	lsls	r1, r1, #21
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	055b      	lsls	r3, r3, #21
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004246:	183b      	adds	r3, r7, r0
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <HAL_RCC_OscConfig+0x338>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d11a      	bne.n	800428e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_RCC_OscConfig+0x338>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_RCC_OscConfig+0x338>)
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	0049      	lsls	r1, r1, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe fe71 	bl	8002f4c <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004270:	f7fe fe6c 	bl	8002f4c <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e185      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x338>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4013      	ands	r3, r2
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10e      	bne.n	80042b4 <HAL_RCC_OscConfig+0x33c>
 8004296:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <HAL_RCC_OscConfig+0x32c>)
 800429c:	2101      	movs	r1, #1
 800429e:	430a      	orrs	r2, r1
 80042a0:	621a      	str	r2, [r3, #32]
 80042a2:	e035      	b.n	8004310 <HAL_RCC_OscConfig+0x398>
 80042a4:	40021000 	.word	0x40021000
 80042a8:	fffeffff 	.word	0xfffeffff
 80042ac:	fffbffff 	.word	0xfffbffff
 80042b0:	40007000 	.word	0x40007000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x35e>
 80042bc:	4bb6      	ldr	r3, [pc, #728]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	4bb5      	ldr	r3, [pc, #724]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042c2:	2101      	movs	r1, #1
 80042c4:	438a      	bics	r2, r1
 80042c6:	621a      	str	r2, [r3, #32]
 80042c8:	4bb3      	ldr	r3, [pc, #716]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	4bb2      	ldr	r3, [pc, #712]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042ce:	2104      	movs	r1, #4
 80042d0:	438a      	bics	r2, r1
 80042d2:	621a      	str	r2, [r3, #32]
 80042d4:	e01c      	b.n	8004310 <HAL_RCC_OscConfig+0x398>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x380>
 80042de:	4bae      	ldr	r3, [pc, #696]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	4bad      	ldr	r3, [pc, #692]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042e4:	2104      	movs	r1, #4
 80042e6:	430a      	orrs	r2, r1
 80042e8:	621a      	str	r2, [r3, #32]
 80042ea:	4bab      	ldr	r3, [pc, #684]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	4baa      	ldr	r3, [pc, #680]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042f0:	2101      	movs	r1, #1
 80042f2:	430a      	orrs	r2, r1
 80042f4:	621a      	str	r2, [r3, #32]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x398>
 80042f8:	4ba7      	ldr	r3, [pc, #668]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	4ba6      	ldr	r3, [pc, #664]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80042fe:	2101      	movs	r1, #1
 8004300:	438a      	bics	r2, r1
 8004302:	621a      	str	r2, [r3, #32]
 8004304:	4ba4      	ldr	r3, [pc, #656]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	4ba3      	ldr	r3, [pc, #652]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800430a:	2104      	movs	r1, #4
 800430c:	438a      	bics	r2, r1
 800430e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d014      	beq.n	8004342 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fe fe18 	bl	8002f4c <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	e009      	b.n	8004336 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fe fe13 	bl	8002f4c <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	4a9b      	ldr	r2, [pc, #620]	; (800459c <HAL_RCC_OscConfig+0x624>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e12b      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	4b98      	ldr	r3, [pc, #608]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	2202      	movs	r2, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x3aa>
 8004340:	e013      	b.n	800436a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fe fe03 	bl	8002f4c <HAL_GetTick>
 8004346:	0003      	movs	r3, r0
 8004348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	e009      	b.n	8004360 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fe fdfe 	bl	8002f4c <HAL_GetTick>
 8004350:	0002      	movs	r2, r0
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	4a91      	ldr	r2, [pc, #580]	; (800459c <HAL_RCC_OscConfig+0x624>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e116      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004360:	4b8d      	ldr	r3, [pc, #564]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	2202      	movs	r2, #2
 8004366:	4013      	ands	r3, r2
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800436a:	231f      	movs	r3, #31
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	4b87      	ldr	r3, [pc, #540]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800437a:	4989      	ldr	r1, [pc, #548]	; (80045a0 <HAL_RCC_OscConfig+0x628>)
 800437c:	400a      	ands	r2, r1
 800437e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d063      	beq.n	8004452 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d12a      	bne.n	80043e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004392:	4b81      	ldr	r3, [pc, #516]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004396:	4b80      	ldr	r3, [pc, #512]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004398:	2104      	movs	r1, #4
 800439a:	430a      	orrs	r2, r1
 800439c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800439e:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a2:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043a4:	2101      	movs	r1, #1
 80043a6:	430a      	orrs	r2, r1
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe fdcf 	bl	8002f4c <HAL_GetTick>
 80043ae:	0003      	movs	r3, r0
 80043b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043b4:	f7fe fdca 	bl	8002f4c <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0e3      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043c6:	4b74      	ldr	r3, [pc, #464]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2202      	movs	r2, #2
 80043cc:	4013      	ands	r3, r2
 80043ce:	d0f1      	beq.n	80043b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043d0:	4b71      	ldr	r3, [pc, #452]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	22f8      	movs	r2, #248	; 0xf8
 80043d6:	4393      	bics	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	00da      	lsls	r2, r3, #3
 80043e0:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043e2:	430a      	orrs	r2, r1
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
 80043e6:	e034      	b.n	8004452 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	3305      	adds	r3, #5
 80043ee:	d111      	bne.n	8004414 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043f6:	2104      	movs	r1, #4
 80043f8:	438a      	bics	r2, r1
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	22f8      	movs	r2, #248	; 0xf8
 8004402:	4393      	bics	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	00da      	lsls	r2, r3, #3
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800440e:	430a      	orrs	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
 8004412:	e01e      	b.n	8004452 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004414:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004418:	4b5f      	ldr	r3, [pc, #380]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800441a:	2104      	movs	r1, #4
 800441c:	430a      	orrs	r2, r1
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004424:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004426:	2101      	movs	r1, #1
 8004428:	438a      	bics	r2, r1
 800442a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442c:	f7fe fd8e 	bl	8002f4c <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004436:	f7fe fd89 	bl	8002f4c <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0a2      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800444a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444c:	2202      	movs	r2, #2
 800444e:	4013      	ands	r3, r2
 8004450:	d1f1      	bne.n	8004436 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <HAL_RCC_OscConfig+0x4e4>
 800445a:	e097      	b.n	800458c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445c:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	220c      	movs	r2, #12
 8004462:	4013      	ands	r3, r2
 8004464:	2b08      	cmp	r3, #8
 8004466:	d100      	bne.n	800446a <HAL_RCC_OscConfig+0x4f2>
 8004468:	e06b      	b.n	8004542 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d14c      	bne.n	800450c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004478:	494a      	ldr	r1, [pc, #296]	; (80045a4 <HAL_RCC_OscConfig+0x62c>)
 800447a:	400a      	ands	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fe fd65 	bl	8002f4c <HAL_GetTick>
 8004482:	0003      	movs	r3, r0
 8004484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fd60 	bl	8002f4c <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e079      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	049b      	lsls	r3, r3, #18
 80044a2:	4013      	ands	r3, r2
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a6:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	220f      	movs	r2, #15
 80044ac:	4393      	bics	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	4b38      	ldr	r3, [pc, #224]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044b6:	430a      	orrs	r2, r1
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <HAL_RCC_OscConfig+0x630>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	431a      	orrs	r2, r3
 80044ce:	4b32      	ldr	r3, [pc, #200]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	0449      	lsls	r1, r1, #17
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fe fd33 	bl	8002f4c <HAL_GetTick>
 80044e6:	0003      	movs	r3, r0
 80044e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fd2e 	bl	8002f4c <HAL_GetTick>
 80044f0:	0002      	movs	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e047      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	049b      	lsls	r3, r3, #18
 8004506:	4013      	ands	r3, r2
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x574>
 800450a:	e03f      	b.n	800458c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450c:	4b22      	ldr	r3, [pc, #136]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004512:	4924      	ldr	r1, [pc, #144]	; (80045a4 <HAL_RCC_OscConfig+0x62c>)
 8004514:	400a      	ands	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fe fd18 	bl	8002f4c <HAL_GetTick>
 800451c:	0003      	movs	r3, r0
 800451e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fe fd13 	bl	8002f4c <HAL_GetTick>
 8004526:	0002      	movs	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e02c      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	049b      	lsls	r3, r3, #18
 800453c:	4013      	ands	r3, r2
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x5aa>
 8004540:	e024      	b.n	800458c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e01f      	b.n	800458e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004554:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_OscConfig+0x620>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	025b      	lsls	r3, r3, #9
 8004560:	401a      	ands	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	429a      	cmp	r2, r3
 8004568:	d10e      	bne.n	8004588 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	220f      	movs	r2, #15
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	23f0      	movs	r3, #240	; 0xf0
 800457c:	039b      	lsls	r3, r3, #14
 800457e:	401a      	ands	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b008      	add	sp, #32
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	40021000 	.word	0x40021000
 800459c:	00001388 	.word	0x00001388
 80045a0:	efffffff 	.word	0xefffffff
 80045a4:	feffffff 	.word	0xfeffffff
 80045a8:	ffc2ffff 	.word	0xffc2ffff

080045ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0b3      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d911      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2201      	movs	r2, #1
 80045d4:	4393      	bics	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e09a      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	d015      	beq.n	8004628 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2204      	movs	r2, #4
 8004602:	4013      	ands	r3, r2
 8004604:	d006      	beq.n	8004614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004606:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 800460c:	21e0      	movs	r1, #224	; 0xe0
 800460e:	00c9      	lsls	r1, r1, #3
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	22f0      	movs	r2, #240	; 0xf0
 800461a:	4393      	bics	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	4b44      	ldr	r3, [pc, #272]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	4013      	ands	r3, r2
 8004630:	d040      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	4013      	ands	r3, r2
 8004644:	d114      	bne.n	8004670 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06e      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b38      	ldr	r3, [pc, #224]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	049b      	lsls	r3, r3, #18
 800465a:	4013      	ands	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e062      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e05b      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	4393      	bics	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fe fc62 	bl	8002f4c <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468c:	e009      	b.n	80046a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fe fc5d 	bl	8002f4c <HAL_GetTick>
 8004692:	0002      	movs	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	4a27      	ldr	r2, [pc, #156]	; (8004738 <HAL_RCC_ClockConfig+0x18c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e042      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	220c      	movs	r2, #12
 80046a8:	401a      	ands	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1ec      	bne.n	800468e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4013      	ands	r3, r2
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d211      	bcs.n	80046e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4393      	bics	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_RCC_ClockConfig+0x184>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e020      	b.n	8004728 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <HAL_RCC_ClockConfig+0x190>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004704:	f000 f820 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004708:	0001      	movs	r1, r0
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x188>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	220f      	movs	r2, #15
 8004712:	4013      	ands	r3, r2
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x194>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	000a      	movs	r2, r1
 800471a:	40da      	lsrs	r2, r3
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x198>)
 800471e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004720:	2000      	movs	r0, #0
 8004722:	f7fe fbcd 	bl	8002ec0 <HAL_InitTick>
  
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	00001388 	.word	0x00001388
 800473c:	fffff8ff 	.word	0xfffff8ff
 8004740:	0800601c 	.word	0x0800601c
 8004744:	20000000 	.word	0x20000000

08004748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b08f      	sub	sp, #60	; 0x3c
 800474c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800474e:	2314      	movs	r3, #20
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004754:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004756:	c313      	stmia	r3!, {r0, r1, r4}
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800475c:	1d3b      	adds	r3, r7, #4
 800475e:	4a29      	ldr	r2, [pc, #164]	; (8004804 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004760:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004762:	c313      	stmia	r3!, {r0, r1, r4}
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476c:	2300      	movs	r3, #0
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004770:	2300      	movs	r3, #0
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
 8004774:	2300      	movs	r3, #0
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_GetSysClockFreq+0xc0>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	220c      	movs	r2, #12
 8004786:	4013      	ands	r3, r2
 8004788:	2b04      	cmp	r3, #4
 800478a:	d002      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x4a>
 800478c:	2b08      	cmp	r3, #8
 800478e:	d003      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x50>
 8004790:	e02d      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004796:	e02d      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	0c9b      	lsrs	r3, r3, #18
 800479c:	220f      	movs	r2, #15
 800479e:	4013      	ands	r3, r2
 80047a0:	2214      	movs	r2, #20
 80047a2:	18ba      	adds	r2, r7, r2
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	220f      	movs	r2, #15
 80047ae:	4013      	ands	r3, r2
 80047b0:	1d3a      	adds	r2, r7, #4
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	4013      	ands	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c2:	4812      	ldr	r0, [pc, #72]	; (800480c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047c4:	f7fb fca0 	bl	8000108 <__udivsi3>
 80047c8:	0003      	movs	r3, r0
 80047ca:	001a      	movs	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	4353      	muls	r3, r2
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	e009      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047d6:	000a      	movs	r2, r1
 80047d8:	0152      	lsls	r2, r2, #5
 80047da:	1a52      	subs	r2, r2, r1
 80047dc:	0193      	lsls	r3, r2, #6
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	185b      	adds	r3, r3, r1
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b00f      	add	sp, #60	; 0x3c
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	08005f3c 	.word	0x08005f3c
 8004804:	08005f4c 	.word	0x08005f4c
 8004808:	40021000 	.word	0x40021000
 800480c:	007a1200 	.word	0x007a1200

08004810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <HAL_RCC_GetHCLKFreq+0x10>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	20000000 	.word	0x20000000

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004828:	f7ff fff2 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 800482c:	0001      	movs	r1, r0
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	2207      	movs	r2, #7
 8004836:	4013      	ands	r3, r2
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <HAL_RCC_GetPCLK1Freq+0x28>)
 800483a:	5cd3      	ldrb	r3, [r2, r3]
 800483c:	40d9      	lsrs	r1, r3
 800483e:	000b      	movs	r3, r1
}    
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	40021000 	.word	0x40021000
 800484c:	0800602c 	.word	0x0800602c

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	025b      	lsls	r3, r3, #9
 8004868:	4013      	ands	r3, r2
 800486a:	d100      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800486c:	e08e      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2017      	movs	r0, #23
 8004870:	183b      	adds	r3, r7, r0
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	055b      	lsls	r3, r3, #21
 800487e:	4013      	ands	r3, r2
 8004880:	d110      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	4b54      	ldr	r3, [pc, #336]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004888:	2180      	movs	r1, #128	; 0x80
 800488a:	0549      	lsls	r1, r1, #21
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	055b      	lsls	r3, r3, #21
 8004898:	4013      	ands	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489e:	183b      	adds	r3, r7, r0
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4013      	ands	r3, r2
 80048ae:	d11a      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	0049      	lsls	r1, r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7fe fb45 	bl	8002f4c <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	e008      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c8:	f7fe fb40 	bl	8002f4c <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e077      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	23c0      	movs	r3, #192	; 0xc0
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d034      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	23c0      	movs	r3, #192	; 0xc0
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4013      	ands	r3, r2
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d02c      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004912:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0249      	lsls	r1, r1, #9
 800491c:	430a      	orrs	r2, r1
 800491e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004926:	492e      	ldr	r1, [pc, #184]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004928:	400a      	ands	r2, r1
 800492a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	4013      	ands	r3, r2
 8004938:	d013      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493a:	f7fe fb07 	bl	8002f4c <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	e009      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fb02 	bl	8002f4c <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	4a25      	ldr	r2, [pc, #148]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e038      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	2202      	movs	r2, #2
 800495e:	4013      	ands	r3, r2
 8004960:	d0f0      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004968:	4013      	ands	r3, r2
 800496a:	0019      	movs	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004972:	430a      	orrs	r2, r1
 8004974:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004976:	2317      	movs	r3, #23
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004986:	4918      	ldr	r1, [pc, #96]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004988:	400a      	ands	r2, r1
 800498a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	4013      	ands	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2203      	movs	r2, #3
 800499c:	4393      	bics	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2220      	movs	r2, #32
 80049b0:	4013      	ands	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2210      	movs	r2, #16
 80049ba:	4393      	bics	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049c4:	430a      	orrs	r2, r1
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b006      	add	sp, #24
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
 80049dc:	fffffcff 	.word	0xfffffcff
 80049e0:	fffeffff 	.word	0xfffeffff
 80049e4:	00001388 	.word	0x00001388
 80049e8:	efffffff 	.word	0xefffffff

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e042      	b.n	8004a84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223d      	movs	r2, #61	; 0x3d
 8004a02:	5c9b      	ldrb	r3, [r3, r2]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	223c      	movs	r2, #60	; 0x3c
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7fe f853 	bl	8002ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	223d      	movs	r2, #61	; 0x3d
 8004a1e:	2102      	movs	r1, #2
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	0010      	movs	r0, r2
 8004a2e:	f000 fb29 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2246      	movs	r2, #70	; 0x46
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223e      	movs	r2, #62	; 0x3e
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223f      	movs	r2, #63	; 0x3f
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2240      	movs	r2, #64	; 0x40
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2241      	movs	r2, #65	; 0x41
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2242      	movs	r2, #66	; 0x42
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2243      	movs	r2, #67	; 0x43
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2244      	movs	r2, #68	; 0x44
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2245      	movs	r2, #69	; 0x45
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	223d      	movs	r2, #61	; 0x3d
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e042      	b.n	8004b24 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	223d      	movs	r2, #61	; 0x3d
 8004aa2:	5c9b      	ldrb	r3, [r3, r2]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	223c      	movs	r2, #60	; 0x3c
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fd ff9b 	bl	80029f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	223d      	movs	r2, #61	; 0x3d
 8004abe:	2102      	movs	r1, #2
 8004ac0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	0019      	movs	r1, r3
 8004acc:	0010      	movs	r0, r2
 8004ace:	f000 fad9 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2246      	movs	r2, #70	; 0x46
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223e      	movs	r2, #62	; 0x3e
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	223f      	movs	r2, #63	; 0x3f
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2241      	movs	r2, #65	; 0x41
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2242      	movs	r2, #66	; 0x42
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2243      	movs	r2, #67	; 0x43
 8004b06:	2101      	movs	r1, #1
 8004b08:	5499      	strb	r1, [r3, r2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2244      	movs	r2, #68	; 0x44
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2245      	movs	r2, #69	; 0x45
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223d      	movs	r2, #61	; 0x3d
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x22>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	223e      	movs	r2, #62	; 0x3e
 8004b40:	5c9b      	ldrb	r3, [r3, r2]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	1e5a      	subs	r2, r3, #1
 8004b48:	4193      	sbcs	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e01f      	b.n	8004b8e <HAL_TIM_PWM_Start+0x62>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d108      	bne.n	8004b66 <HAL_TIM_PWM_Start+0x3a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	223f      	movs	r2, #63	; 0x3f
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	4193      	sbcs	r3, r2
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e013      	b.n	8004b8e <HAL_TIM_PWM_Start+0x62>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x52>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2240      	movs	r2, #64	; 0x40
 8004b70:	5c9b      	ldrb	r3, [r3, r2]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	4193      	sbcs	r3, r2
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e007      	b.n	8004b8e <HAL_TIM_PWM_Start+0x62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2241      	movs	r2, #65	; 0x41
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	4193      	sbcs	r3, r2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06e      	b.n	8004c74 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x7a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	223e      	movs	r2, #62	; 0x3e
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	5499      	strb	r1, [r3, r2]
 8004ba4:	e013      	b.n	8004bce <HAL_TIM_PWM_Start+0xa2>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x8a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	223f      	movs	r2, #63	; 0x3f
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	5499      	strb	r1, [r3, r2]
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_PWM_Start+0xa2>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x9a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	5499      	strb	r1, [r3, r2]
 8004bc4:	e003      	b.n	8004bce <HAL_TIM_PWM_Start+0xa2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2241      	movs	r2, #65	; 0x41
 8004bca:	2102      	movs	r1, #2
 8004bcc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fcc6 	bl	8005568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <HAL_TIM_PWM_Start+0x150>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_TIM_PWM_Start+0xd8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <HAL_TIM_PWM_Start+0x154>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_TIM_PWM_Start+0xd8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <HAL_TIM_PWM_Start+0x158>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_PWM_Start+0xd8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <HAL_TIM_PWM_Start+0x15c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_PWM_Start+0xdc>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_TIM_PWM_Start+0xde>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2180      	movs	r1, #128	; 0x80
 8004c1a:	0209      	lsls	r1, r1, #8
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_TIM_PWM_Start+0x150>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x112>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <HAL_TIM_PWM_Start+0x160>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x112>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <HAL_TIM_PWM_Start+0x154>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d111      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2207      	movs	r2, #7
 8004c46:	4013      	ands	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d010      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c60:	e007      	b.n	8004c72 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b004      	add	sp, #16
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	40000400 	.word	0x40000400

08004c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d124      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2202      	movs	r2, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d11d      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4252      	negs	r2, r2
 8004cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2203      	movs	r2, #3
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 f9be 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e007      	b.n	8004cea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 f9b1 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f9bd 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d125      	bne.n	8004d4a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2204      	movs	r2, #4
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d11e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2205      	movs	r2, #5
 8004d12:	4252      	negs	r2, r2
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	23c0      	movs	r3, #192	; 0xc0
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f000 f991 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004d32:	e007      	b.n	8004d44 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 f984 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 f990 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2208      	movs	r2, #8
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d124      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11d      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2209      	movs	r2, #9
 8004d6c:	4252      	negs	r2, r2
 8004d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2204      	movs	r2, #4
 8004d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 f965 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004d8a:	e007      	b.n	8004d9c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 f958 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f964 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2210      	movs	r2, #16
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d125      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2210      	movs	r2, #16
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d11e      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2211      	movs	r2, #17
 8004dc4:	4252      	negs	r2, r2
 8004dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	23c0      	movs	r3, #192	; 0xc0
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 f938 	bl	8005054 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e007      	b.n	8004df6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f92b 	bl	8005044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f937 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2201      	movs	r2, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10f      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d108      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	4252      	negs	r2, r2
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 f905 	bl	8005034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2280      	movs	r2, #128	; 0x80
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d10f      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d108      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2281      	movs	r2, #129	; 0x81
 8004e4c:	4252      	negs	r2, r2
 8004e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fd00 	bl	8005858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2240      	movs	r2, #64	; 0x40
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d108      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2241      	movs	r2, #65	; 0x41
 8004e7a:	4252      	negs	r2, r2
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 f8f7 	bl	8005074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d10f      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d108      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2221      	movs	r2, #33	; 0x21
 8004ea8:	4252      	negs	r2, r2
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 fcca 	bl	8005848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	223c      	movs	r2, #60	; 0x3c
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e0a7      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	223c      	movs	r2, #60	; 0x3c
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	d100      	bne.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004ee4:	e076      	b.n	8004fd4 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	d900      	bls.n	8004eee <HAL_TIM_PWM_ConfigChannel+0x32>
 8004eec:	e095      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d04e      	beq.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d900      	bls.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x40>
 8004efa:	e08e      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d021      	beq.n	8004f4c <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004f08:	e087      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	0011      	movs	r1, r2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f92c 	bl	8005170 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2108      	movs	r1, #8
 8004f24:	430a      	orrs	r2, r1
 8004f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2104      	movs	r1, #4
 8004f34:	438a      	bics	r2, r1
 8004f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6999      	ldr	r1, [r3, #24]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	619a      	str	r2, [r3, #24]
      break;
 8004f4a:	e067      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	0011      	movs	r1, r2
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 f993 	bl	8005280 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0109      	lsls	r1, r1, #4
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	492e      	ldr	r1, [pc, #184]	; (8005030 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	021a      	lsls	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
      break;
 8004f90:	e044      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f9f4 	bl	8005388 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2108      	movs	r1, #8
 8004fac:	430a      	orrs	r2, r1
 8004fae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2104      	movs	r1, #4
 8004fbc:	438a      	bics	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69d9      	ldr	r1, [r3, #28]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	61da      	str	r2, [r3, #28]
      break;
 8004fd2:	e023      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	0011      	movs	r1, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 fa59 	bl	8005494 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2180      	movs	r1, #128	; 0x80
 8004fee:	0109      	lsls	r1, r1, #4
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	490c      	ldr	r1, [pc, #48]	; (8005030 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8005000:	400a      	ands	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69d9      	ldr	r1, [r3, #28]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	021a      	lsls	r2, r3, #8
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	61da      	str	r2, [r3, #28]
      break;
 8005018:	e000      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 800501a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	223c      	movs	r2, #60	; 0x3c
 8005020:	2100      	movs	r1, #0
 8005022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	fffffbff 	.word	0xfffffbff

08005034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <TIM_Base_SetConfig+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x20>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <TIM_Base_SetConfig+0xd4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2270      	movs	r2, #112	; 0x70
 80050a8:	4393      	bics	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a26      	ldr	r2, [pc, #152]	; (8005154 <TIM_Base_SetConfig+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a25      	ldr	r2, [pc, #148]	; (8005158 <TIM_Base_SetConfig+0xd4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00f      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a24      	ldr	r2, [pc, #144]	; (800515c <TIM_Base_SetConfig+0xd8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a23      	ldr	r2, [pc, #140]	; (8005160 <TIM_Base_SetConfig+0xdc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <TIM_Base_SetConfig+0xe0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0x62>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a21      	ldr	r2, [pc, #132]	; (8005168 <TIM_Base_SetConfig+0xe4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a20      	ldr	r2, [pc, #128]	; (800516c <TIM_Base_SetConfig+0xe8>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	4393      	bics	r3, r2
 80050fe:	001a      	movs	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <TIM_Base_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00b      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <TIM_Base_SetConfig+0xdc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <TIM_Base_SetConfig+0xe0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_Base_SetConfig+0xba>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <TIM_Base_SetConfig+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d103      	bne.n	8005146 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	615a      	str	r2, [r3, #20]
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40000400 	.word	0x40000400
 800515c:	40002000 	.word	0x40002000
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	fffffcff 	.word	0xfffffcff

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	2201      	movs	r2, #1
 8005180:	4393      	bics	r3, r2
 8005182:	001a      	movs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2270      	movs	r2, #112	; 0x70
 800519e:	4393      	bics	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2203      	movs	r2, #3
 80051a6:	4393      	bics	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2202      	movs	r2, #2
 80051b8:	4393      	bics	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <TIM_OC1_SetConfig+0xf8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_OC1_SetConfig+0x76>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <TIM_OC1_SetConfig+0xfc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_OC1_SetConfig+0x76>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a25      	ldr	r2, [pc, #148]	; (8005270 <TIM_OC1_SetConfig+0x100>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC1_SetConfig+0x76>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <TIM_OC1_SetConfig+0x104>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10c      	bne.n	8005200 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2208      	movs	r2, #8
 80051ea:	4393      	bics	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2204      	movs	r2, #4
 80051fc:	4393      	bics	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_OC1_SetConfig+0xf8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_OC1_SetConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <TIM_OC1_SetConfig+0xfc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_OC1_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a17      	ldr	r2, [pc, #92]	; (8005270 <TIM_OC1_SetConfig+0x100>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC1_SetConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <TIM_OC1_SetConfig+0x104>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <TIM_OC1_SetConfig+0x108>)
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <TIM_OC1_SetConfig+0x10c>)
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b006      	add	sp, #24
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800
 8005278:	fffffeff 	.word	0xfffffeff
 800527c:	fffffdff 	.word	0xfffffdff

08005280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	2210      	movs	r2, #16
 8005290:	4393      	bics	r3, r2
 8005292:	001a      	movs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a2e      	ldr	r2, [pc, #184]	; (8005368 <TIM_OC2_SetConfig+0xe8>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a2d      	ldr	r2, [pc, #180]	; (800536c <TIM_OC2_SetConfig+0xec>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2220      	movs	r2, #32
 80052ca:	4393      	bics	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a24      	ldr	r2, [pc, #144]	; (8005370 <TIM_OC2_SetConfig+0xf0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10d      	bne.n	80052fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	4393      	bics	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2240      	movs	r2, #64	; 0x40
 80052fa:	4393      	bics	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_OC2_SetConfig+0xf0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_OC2_SetConfig+0x9e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_OC2_SetConfig+0xf4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC2_SetConfig+0x9e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_OC2_SetConfig+0xf8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC2_SetConfig+0x9e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_OC2_SetConfig+0xfc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC2_SetConfig+0x100>)
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <TIM_OC2_SetConfig+0x104>)
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b006      	add	sp, #24
 8005366:	bd80      	pop	{r7, pc}
 8005368:	ffff8fff 	.word	0xffff8fff
 800536c:	fffffcff 	.word	0xfffffcff
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800
 8005380:	fffffbff 	.word	0xfffffbff
 8005384:	fffff7ff 	.word	0xfffff7ff

08005388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	4a35      	ldr	r2, [pc, #212]	; (800546c <TIM_OC3_SetConfig+0xe4>)
 8005398:	401a      	ands	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2270      	movs	r2, #112	; 0x70
 80053b4:	4393      	bics	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2203      	movs	r2, #3
 80053bc:	4393      	bics	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a28      	ldr	r2, [pc, #160]	; (8005470 <TIM_OC3_SetConfig+0xe8>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a24      	ldr	r2, [pc, #144]	; (8005474 <TIM_OC3_SetConfig+0xec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a23      	ldr	r2, [pc, #140]	; (8005478 <TIM_OC3_SetConfig+0xf0>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <TIM_OC3_SetConfig+0xf4>)
 80053fe:	4013      	ands	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <TIM_OC3_SetConfig+0xec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_OC3_SetConfig+0x9a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <TIM_OC3_SetConfig+0xf8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_OC3_SetConfig+0x9a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <TIM_OC3_SetConfig+0xfc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_OC3_SetConfig+0x9a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <TIM_OC3_SetConfig+0x100>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d113      	bne.n	800544a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <TIM_OC3_SetConfig+0x104>)
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <TIM_OC3_SetConfig+0x108>)
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b006      	add	sp, #24
 800546a:	bd80      	pop	{r7, pc}
 800546c:	fffffeff 	.word	0xfffffeff
 8005470:	fffffdff 	.word	0xfffffdff
 8005474:	40012c00 	.word	0x40012c00
 8005478:	fffff7ff 	.word	0xfffff7ff
 800547c:	fffffbff 	.word	0xfffffbff
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800
 800548c:	ffffefff 	.word	0xffffefff
 8005490:	ffffdfff 	.word	0xffffdfff

08005494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_OC4_SetConfig+0xb0>)
 80054a4:	401a      	ands	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <TIM_OC4_SetConfig+0xb4>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <TIM_OC4_SetConfig+0xb8>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <TIM_OC4_SetConfig+0xbc>)
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a19      	ldr	r2, [pc, #100]	; (8005554 <TIM_OC4_SetConfig+0xc0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00b      	beq.n	800550c <TIM_OC4_SetConfig+0x78>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <TIM_OC4_SetConfig+0xc4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <TIM_OC4_SetConfig+0x78>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <TIM_OC4_SetConfig+0xc8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_OC4_SetConfig+0x78>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <TIM_OC4_SetConfig+0xcc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d109      	bne.n	8005520 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC4_SetConfig+0xd0>)
 8005510:	4013      	ands	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b006      	add	sp, #24
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	ffffefff 	.word	0xffffefff
 8005548:	ffff8fff 	.word	0xffff8fff
 800554c:	fffffcff 	.word	0xfffffcff
 8005550:	ffffdfff 	.word	0xffffdfff
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40014000 	.word	0x40014000
 800555c:	40014400 	.word	0x40014400
 8005560:	40014800 	.word	0x40014800
 8005564:	ffffbfff 	.word	0xffffbfff

08005568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	221f      	movs	r2, #31
 8005578:	4013      	ands	r3, r2
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	0013      	movs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	43d2      	mvns	r2, r2
 800558a:	401a      	ands	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	211f      	movs	r1, #31
 8005598:	400b      	ands	r3, r1
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4099      	lsls	r1, r3
 800559e:	000b      	movs	r3, r1
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b006      	add	sp, #24
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d108      	bne.n	80055d2 <HAL_TIMEx_PWMN_Start+0x22>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2242      	movs	r2, #66	; 0x42
 80055c4:	5c9b      	ldrb	r3, [r3, r2]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	1e5a      	subs	r2, r3, #1
 80055cc:	4193      	sbcs	r3, r2
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	e01f      	b.n	8005612 <HAL_TIMEx_PWMN_Start+0x62>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d108      	bne.n	80055ea <HAL_TIMEx_PWMN_Start+0x3a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2243      	movs	r2, #67	; 0x43
 80055dc:	5c9b      	ldrb	r3, [r3, r2]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	1e5a      	subs	r2, r3, #1
 80055e4:	4193      	sbcs	r3, r2
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e013      	b.n	8005612 <HAL_TIMEx_PWMN_Start+0x62>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d108      	bne.n	8005602 <HAL_TIMEx_PWMN_Start+0x52>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2244      	movs	r2, #68	; 0x44
 80055f4:	5c9b      	ldrb	r3, [r3, r2]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	1e5a      	subs	r2, r3, #1
 80055fc:	4193      	sbcs	r3, r2
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	e007      	b.n	8005612 <HAL_TIMEx_PWMN_Start+0x62>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2245      	movs	r2, #69	; 0x45
 8005606:	5c9b      	ldrb	r3, [r3, r2]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	4193      	sbcs	r3, r2
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e055      	b.n	80056c6 <HAL_TIMEx_PWMN_Start+0x116>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_TIMEx_PWMN_Start+0x7a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2242      	movs	r2, #66	; 0x42
 8005624:	2102      	movs	r1, #2
 8005626:	5499      	strb	r1, [r3, r2]
 8005628:	e013      	b.n	8005652 <HAL_TIMEx_PWMN_Start+0xa2>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d104      	bne.n	800563a <HAL_TIMEx_PWMN_Start+0x8a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2243      	movs	r2, #67	; 0x43
 8005634:	2102      	movs	r1, #2
 8005636:	5499      	strb	r1, [r3, r2]
 8005638:	e00b      	b.n	8005652 <HAL_TIMEx_PWMN_Start+0xa2>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d104      	bne.n	800564a <HAL_TIMEx_PWMN_Start+0x9a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2244      	movs	r2, #68	; 0x44
 8005644:	2102      	movs	r1, #2
 8005646:	5499      	strb	r1, [r3, r2]
 8005648:	e003      	b.n	8005652 <HAL_TIMEx_PWMN_Start+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2245      	movs	r2, #69	; 0x45
 800564e:	2102      	movs	r1, #2
 8005650:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	2204      	movs	r2, #4
 800565a:	0018      	movs	r0, r3
 800565c:	f000 f904 	bl	8005868 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	0209      	lsls	r1, r1, #8
 800566e:	430a      	orrs	r2, r1
 8005670:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <HAL_TIMEx_PWMN_Start+0x120>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_TIMEx_PWMN_Start+0xe0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <HAL_TIMEx_PWMN_Start+0x124>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIMEx_PWMN_Start+0xe0>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <HAL_TIMEx_PWMN_Start+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d111      	bne.n	80056b4 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2207      	movs	r2, #7
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d010      	beq.n	80056c4 <HAL_TIMEx_PWMN_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	e007      	b.n	80056c4 <HAL_TIMEx_PWMN_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2101      	movs	r1, #1
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40014000 	.word	0x40014000

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	223c      	movs	r2, #60	; 0x3c
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e041      	b.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	223c      	movs	r2, #60	; 0x3c
 80056f8:	2101      	movs	r1, #1
 80056fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	223d      	movs	r2, #61	; 0x3d
 8005700:	2102      	movs	r1, #2
 8005702:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2270      	movs	r2, #112	; 0x70
 8005718:	4393      	bics	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a11      	ldr	r2, [pc, #68]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10c      	bne.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	4393      	bics	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223d      	movs	r2, #61	; 0x3d
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	223c      	movs	r2, #60	; 0x3c
 8005772:	2100      	movs	r1, #0
 8005774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40014000 	.word	0x40014000

0800578c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	223c      	movs	r2, #60	; 0x3c
 800579e:	5c9b      	ldrb	r3, [r3, r2]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e03e      	b.n	8005826 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	223c      	movs	r2, #60	; 0x3c
 80057ac:	2101      	movs	r1, #1
 80057ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	; 0xff
 80057b4:	4393      	bics	r3, r2
 80057b6:	001a      	movs	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80057c4:	401a      	ands	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80057d2:	401a      	ands	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80057e0:	401a      	ands	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80057ee:	401a      	ands	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a11      	ldr	r2, [pc, #68]	; (8005840 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80057fc:	401a      	ands	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800580a:	401a      	ands	r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	223c      	movs	r2, #60	; 0x3c
 8005820:	2100      	movs	r1, #0
 8005822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b004      	add	sp, #16
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	fffffcff 	.word	0xfffffcff
 8005834:	fffffbff 	.word	0xfffffbff
 8005838:	fffff7ff 	.word	0xfffff7ff
 800583c:	ffffefff 	.word	0xffffefff
 8005840:	ffffdfff 	.word	0xffffdfff
 8005844:	ffffbfff 	.word	0xffffbfff

08005848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	221f      	movs	r2, #31
 8005878:	4013      	ands	r3, r2
 800587a:	2204      	movs	r2, #4
 800587c:	409a      	lsls	r2, r3
 800587e:	0013      	movs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	43d2      	mvns	r2, r2
 800588a:	401a      	ands	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	211f      	movs	r1, #31
 8005898:	400b      	ands	r3, r1
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4099      	lsls	r1, r3
 800589e:	000b      	movs	r3, r1
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b006      	add	sp, #24
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e044      	b.n	800594c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d107      	bne.n	80058da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2274      	movs	r2, #116	; 0x74
 80058ce:	2100      	movs	r1, #0
 80058d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7fd fa43 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2224      	movs	r2, #36	; 0x24
 80058de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2101      	movs	r1, #1
 80058ec:	438a      	bics	r2, r1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 f830 	bl	8005958 <UART_SetConfig>
 80058f8:	0003      	movs	r3, r0
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e024      	b.n	800594c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f000 f963 	bl	8005bd8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	490d      	ldr	r1, [pc, #52]	; (8005954 <HAL_UART_Init+0xa4>)
 800591e:	400a      	ands	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2108      	movs	r1, #8
 800592e:	438a      	bics	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	430a      	orrs	r2, r1
 8005940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0018      	movs	r0, r3
 8005946:	f000 f9fb 	bl	8005d40 <UART_CheckIdleState>
 800594a:	0003      	movs	r3, r0
}
 800594c:	0018      	movs	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	b002      	add	sp, #8
 8005952:	bd80      	pop	{r7, pc}
 8005954:	fffff7ff 	.word	0xfffff7ff

08005958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005960:	231e      	movs	r3, #30
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a8d      	ldr	r2, [pc, #564]	; (8005bbc <UART_SetConfig+0x264>)
 8005988:	4013      	ands	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a88      	ldr	r2, [pc, #544]	; (8005bc0 <UART_SetConfig+0x268>)
 800599e:	4013      	ands	r3, r2
 80059a0:	0019      	movs	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a7f      	ldr	r2, [pc, #508]	; (8005bc4 <UART_SetConfig+0x26c>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a7b      	ldr	r2, [pc, #492]	; (8005bc8 <UART_SetConfig+0x270>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d127      	bne.n	8005a2e <UART_SetConfig+0xd6>
 80059de:	4b7b      	ldr	r3, [pc, #492]	; (8005bcc <UART_SetConfig+0x274>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	2203      	movs	r2, #3
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d00d      	beq.n	8005a06 <UART_SetConfig+0xae>
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0xcc>
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d014      	beq.n	8005a1a <UART_SetConfig+0xc2>
 80059f0:	d818      	bhi.n	8005a24 <UART_SetConfig+0xcc>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <UART_SetConfig+0xa4>
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00a      	beq.n	8005a10 <UART_SetConfig+0xb8>
 80059fa:	e013      	b.n	8005a24 <UART_SetConfig+0xcc>
 80059fc:	231f      	movs	r3, #31
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e021      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a06:	231f      	movs	r3, #31
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e01c      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a10:	231f      	movs	r3, #31
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2204      	movs	r2, #4
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e017      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a1a:	231f      	movs	r3, #31
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2208      	movs	r2, #8
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e012      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a24:	231f      	movs	r3, #31
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	2210      	movs	r2, #16
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e00d      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a67      	ldr	r2, [pc, #412]	; (8005bd0 <UART_SetConfig+0x278>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d104      	bne.n	8005a42 <UART_SetConfig+0xea>
 8005a38:	231f      	movs	r3, #31
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e003      	b.n	8005a4a <UART_SetConfig+0xf2>
 8005a42:	231f      	movs	r3, #31
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	2210      	movs	r2, #16
 8005a48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d15d      	bne.n	8005b12 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005a56:	231f      	movs	r3, #31
 8005a58:	18fb      	adds	r3, r7, r3
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d015      	beq.n	8005a8c <UART_SetConfig+0x134>
 8005a60:	dc18      	bgt.n	8005a94 <UART_SetConfig+0x13c>
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d00d      	beq.n	8005a82 <UART_SetConfig+0x12a>
 8005a66:	dc15      	bgt.n	8005a94 <UART_SetConfig+0x13c>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <UART_SetConfig+0x11a>
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d005      	beq.n	8005a7c <UART_SetConfig+0x124>
 8005a70:	e010      	b.n	8005a94 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a72:	f7fe fed7 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8005a76:	0003      	movs	r3, r0
 8005a78:	61bb      	str	r3, [r7, #24]
        break;
 8005a7a:	e012      	b.n	8005aa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a7c:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <UART_SetConfig+0x27c>)
 8005a7e:	61bb      	str	r3, [r7, #24]
        break;
 8005a80:	e00f      	b.n	8005aa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a82:	f7fe fe61 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8005a86:	0003      	movs	r3, r0
 8005a88:	61bb      	str	r3, [r7, #24]
        break;
 8005a8a:	e00a      	b.n	8005aa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	61bb      	str	r3, [r7, #24]
        break;
 8005a92:	e006      	b.n	8005aa2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a98:	231e      	movs	r3, #30
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
        break;
 8005aa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d100      	bne.n	8005aaa <UART_SetConfig+0x152>
 8005aa8:	e07b      	b.n	8005ba2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	005a      	lsls	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	18d2      	adds	r2, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	0019      	movs	r1, r3
 8005abc:	0010      	movs	r0, r2
 8005abe:	f7fa fb23 	bl	8000108 <__udivsi3>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b0f      	cmp	r3, #15
 8005acc:	d91c      	bls.n	8005b08 <UART_SetConfig+0x1b0>
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	025b      	lsls	r3, r3, #9
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d217      	bcs.n	8005b08 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	200e      	movs	r0, #14
 8005ade:	183b      	adds	r3, r7, r0
 8005ae0:	210f      	movs	r1, #15
 8005ae2:	438a      	bics	r2, r1
 8005ae4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2207      	movs	r2, #7
 8005aee:	4013      	ands	r3, r2
 8005af0:	b299      	uxth	r1, r3
 8005af2:	183b      	adds	r3, r7, r0
 8005af4:	183a      	adds	r2, r7, r0
 8005af6:	8812      	ldrh	r2, [r2, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	183a      	adds	r2, r7, r0
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e04c      	b.n	8005ba2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b08:	231e      	movs	r3, #30
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e047      	b.n	8005ba2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b12:	231f      	movs	r3, #31
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d015      	beq.n	8005b48 <UART_SetConfig+0x1f0>
 8005b1c:	dc18      	bgt.n	8005b50 <UART_SetConfig+0x1f8>
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d00d      	beq.n	8005b3e <UART_SetConfig+0x1e6>
 8005b22:	dc15      	bgt.n	8005b50 <UART_SetConfig+0x1f8>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <UART_SetConfig+0x1d6>
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d005      	beq.n	8005b38 <UART_SetConfig+0x1e0>
 8005b2c:	e010      	b.n	8005b50 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2e:	f7fe fe79 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8005b32:	0003      	movs	r3, r0
 8005b34:	61bb      	str	r3, [r7, #24]
        break;
 8005b36:	e012      	b.n	8005b5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <UART_SetConfig+0x27c>)
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e00f      	b.n	8005b5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe fe03 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8005b42:	0003      	movs	r3, r0
 8005b44:	61bb      	str	r3, [r7, #24]
        break;
 8005b46:	e00a      	b.n	8005b5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	61bb      	str	r3, [r7, #24]
        break;
 8005b4e:	e006      	b.n	8005b5e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b54:	231e      	movs	r3, #30
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
        break;
 8005b5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01e      	beq.n	8005ba2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	085a      	lsrs	r2, r3, #1
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	18d2      	adds	r2, r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	0019      	movs	r1, r3
 8005b74:	0010      	movs	r0, r2
 8005b76:	f7fa fac7 	bl	8000108 <__udivsi3>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d909      	bls.n	8005b9a <UART_SetConfig+0x242>
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	025b      	lsls	r3, r3, #9
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d204      	bcs.n	8005b9a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	e003      	b.n	8005ba2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9a:	231e      	movs	r3, #30
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bae:	231e      	movs	r3, #30
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b008      	add	sp, #32
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffff69f3 	.word	0xffff69f3
 8005bc0:	ffffcfff 	.word	0xffffcfff
 8005bc4:	fffff4ff 	.word	0xfffff4ff
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40004400 	.word	0x40004400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2201      	movs	r2, #1
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a4a      	ldr	r2, [pc, #296]	; (8005d1c <UART_AdvFeatureConfig+0x144>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2202      	movs	r2, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a43      	ldr	r2, [pc, #268]	; (8005d20 <UART_AdvFeatureConfig+0x148>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2204      	movs	r2, #4
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a3b      	ldr	r2, [pc, #236]	; (8005d24 <UART_AdvFeatureConfig+0x14c>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <UART_AdvFeatureConfig+0x150>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <UART_AdvFeatureConfig+0x154>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2220      	movs	r2, #32
 8005c90:	4013      	ands	r3, r2
 8005c92:	d00b      	beq.n	8005cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <UART_AdvFeatureConfig+0x158>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2240      	movs	r2, #64	; 0x40
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <UART_AdvFeatureConfig+0x15c>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	035b      	lsls	r3, r3, #13
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10b      	bne.n	8005cf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <UART_AdvFeatureConfig+0x160>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <UART_AdvFeatureConfig+0x164>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	fffdffff 	.word	0xfffdffff
 8005d20:	fffeffff 	.word	0xfffeffff
 8005d24:	fffbffff 	.word	0xfffbffff
 8005d28:	ffff7fff 	.word	0xffff7fff
 8005d2c:	ffffefff 	.word	0xffffefff
 8005d30:	ffffdfff 	.word	0xffffdfff
 8005d34:	ffefffff 	.word	0xffefffff
 8005d38:	ff9fffff 	.word	0xff9fffff
 8005d3c:	fff7ffff 	.word	0xfff7ffff

08005d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d50:	f7fd f8fc 	bl	8002f4c <HAL_GetTick>
 8005d54:	0003      	movs	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d10c      	bne.n	8005d80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	0391      	lsls	r1, r2, #14
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <UART_CheckIdleState+0x8c>)
 8005d70:	9200      	str	r2, [sp, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f000 f82c 	bl	8005dd0 <UART_WaitOnFlagUntilTimeout>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d001      	beq.n	8005d80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e021      	b.n	8005dc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2204      	movs	r2, #4
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d10c      	bne.n	8005da8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	03d1      	lsls	r1, r2, #15
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <UART_CheckIdleState+0x8c>)
 8005d98:	9200      	str	r2, [sp, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f000 f818 	bl	8005dd0 <UART_WaitOnFlagUntilTimeout>
 8005da0:	1e03      	subs	r3, r0, #0
 8005da2:	d001      	beq.n	8005da8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e00d      	b.n	8005dc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2274      	movs	r2, #116	; 0x74
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b004      	add	sp, #16
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	01ffffff 	.word	0x01ffffff

08005dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	1dfb      	adds	r3, r7, #7
 8005dde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	e05e      	b.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	3301      	adds	r3, #1
 8005de6:	d05b      	beq.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7fd f8b0 	bl	8002f4c <HAL_GetTick>
 8005dec:	0002      	movs	r2, r0
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11b      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	492f      	ldr	r1, [pc, #188]	; (8005ec8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	438a      	bics	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2274      	movs	r2, #116	; 0x74
 8005e2e:	2100      	movs	r1, #0
 8005e30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e044      	b.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d02e      	beq.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d124      	bne.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	0112      	lsls	r2, r2, #4
 8005e5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4917      	ldr	r1, [pc, #92]	; (8005ec8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	2120      	movs	r1, #32
 8005e92:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2274      	movs	r2, #116	; 0x74
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e00f      	b.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	425a      	negs	r2, r3
 8005eb0:	4153      	adcs	r3, r2
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	1dfb      	adds	r3, r7, #7
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d091      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	fffffe5f 	.word	0xfffffe5f

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	2600      	movs	r6, #0
 8005ed0:	4d0c      	ldr	r5, [pc, #48]	; (8005f04 <__libc_init_array+0x38>)
 8005ed2:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed4:	1b64      	subs	r4, r4, r5
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	2600      	movs	r6, #0
 8005ede:	f000 f821 	bl	8005f24 <_init>
 8005ee2:	4d0a      	ldr	r5, [pc, #40]	; (8005f0c <__libc_init_array+0x40>)
 8005ee4:	4c0a      	ldr	r4, [pc, #40]	; (8005f10 <__libc_init_array+0x44>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	00b3      	lsls	r3, r6, #2
 8005ef2:	58eb      	ldr	r3, [r5, r3]
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	00b3      	lsls	r3, r6, #2
 8005efc:	58eb      	ldr	r3, [r5, r3]
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08006034 	.word	0x08006034
 8005f08:	08006034 	.word	0x08006034
 8005f0c:	08006034 	.word	0x08006034
 8005f10:	08006038 	.word	0x08006038

08005f14 <memset>:
 8005f14:	0003      	movs	r3, r0
 8005f16:	1882      	adds	r2, r0, r2
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d100      	bne.n	8005f1e <memset+0xa>
 8005f1c:	4770      	bx	lr
 8005f1e:	7019      	strb	r1, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	e7f9      	b.n	8005f18 <memset+0x4>

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
