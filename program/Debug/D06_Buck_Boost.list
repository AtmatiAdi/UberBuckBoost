
D06_Buck_Boost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd0  08004dd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd0  08004dd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd0  08004dd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08004de4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004de4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d19c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d3  00000000  00000000  0002d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0002f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00030310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a26  00000000  00000000  00030f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106b6  00000000  00000000  00041996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063dcd  00000000  00000000  0005204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd0  00000000  00000000  000b5e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d00 	.word	0x08004d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004d00 	.word	0x08004d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4681      	mov	r9, r0
 800022e:	0005      	movs	r5, r0
 8000230:	030c      	lsls	r4, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	4692      	mov	sl, r2
 8000236:	001f      	movs	r7, r3
 8000238:	b085      	sub	sp, #20
 800023a:	0b24      	lsrs	r4, r4, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fce      	lsrs	r6, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d059      	beq.n	80002f8 <__aeabi_ddiv+0xd8>
 8000244:	4b87      	ldr	r3, [pc, #540]	; (8000464 <__aeabi_ddiv+0x244>)
 8000246:	4298      	cmp	r0, r3
 8000248:	d100      	bne.n	800024c <__aeabi_ddiv+0x2c>
 800024a:	e098      	b.n	800037e <__aeabi_ddiv+0x15e>
 800024c:	0f6b      	lsrs	r3, r5, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	431c      	orrs	r4, r3
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	041b      	lsls	r3, r3, #16
 8000256:	4323      	orrs	r3, r4
 8000258:	4698      	mov	r8, r3
 800025a:	4b83      	ldr	r3, [pc, #524]	; (8000468 <__aeabi_ddiv+0x248>)
 800025c:	00ed      	lsls	r5, r5, #3
 800025e:	469b      	mov	fp, r3
 8000260:	2300      	movs	r3, #0
 8000262:	4699      	mov	r9, r3
 8000264:	4483      	add	fp, r0
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	033c      	lsls	r4, r7, #12
 800026a:	007b      	lsls	r3, r7, #1
 800026c:	4650      	mov	r0, sl
 800026e:	0b24      	lsrs	r4, r4, #12
 8000270:	0d5b      	lsrs	r3, r3, #21
 8000272:	0fff      	lsrs	r7, r7, #31
 8000274:	2b00      	cmp	r3, #0
 8000276:	d067      	beq.n	8000348 <__aeabi_ddiv+0x128>
 8000278:	4a7a      	ldr	r2, [pc, #488]	; (8000464 <__aeabi_ddiv+0x244>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d018      	beq.n	80002b0 <__aeabi_ddiv+0x90>
 800027e:	497a      	ldr	r1, [pc, #488]	; (8000468 <__aeabi_ddiv+0x248>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	00e4      	lsls	r4, r4, #3
 8000286:	4659      	mov	r1, fp
 8000288:	4314      	orrs	r4, r2
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	4463      	add	r3, ip
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	1acb      	subs	r3, r1, r3
 8000292:	4314      	orrs	r4, r2
 8000294:	469b      	mov	fp, r3
 8000296:	00c2      	lsls	r2, r0, #3
 8000298:	2000      	movs	r0, #0
 800029a:	0033      	movs	r3, r6
 800029c:	407b      	eors	r3, r7
 800029e:	469a      	mov	sl, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	d900      	bls.n	80002a8 <__aeabi_ddiv+0x88>
 80002a6:	e0ef      	b.n	8000488 <__aeabi_ddiv+0x268>
 80002a8:	4970      	ldr	r1, [pc, #448]	; (800046c <__aeabi_ddiv+0x24c>)
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58cb      	ldr	r3, [r1, r3]
 80002ae:	469f      	mov	pc, r3
 80002b0:	4b6f      	ldr	r3, [pc, #444]	; (8000470 <__aeabi_ddiv+0x250>)
 80002b2:	4652      	mov	r2, sl
 80002b4:	469c      	mov	ip, r3
 80002b6:	4322      	orrs	r2, r4
 80002b8:	44e3      	add	fp, ip
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d000      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 80002be:	e095      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 80002c0:	4649      	mov	r1, r9
 80002c2:	2302      	movs	r3, #2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	4689      	mov	r9, r1
 80002c8:	2400      	movs	r4, #0
 80002ca:	2002      	movs	r0, #2
 80002cc:	e7e5      	b.n	800029a <__aeabi_ddiv+0x7a>
 80002ce:	2300      	movs	r3, #0
 80002d0:	2400      	movs	r4, #0
 80002d2:	2500      	movs	r5, #0
 80002d4:	4652      	mov	r2, sl
 80002d6:	051b      	lsls	r3, r3, #20
 80002d8:	4323      	orrs	r3, r4
 80002da:	07d2      	lsls	r2, r2, #31
 80002dc:	4313      	orrs	r3, r2
 80002de:	0028      	movs	r0, r5
 80002e0:	0019      	movs	r1, r3
 80002e2:	b005      	add	sp, #20
 80002e4:	bcf0      	pop	{r4, r5, r6, r7}
 80002e6:	46bb      	mov	fp, r7
 80002e8:	46b2      	mov	sl, r6
 80002ea:	46a9      	mov	r9, r5
 80002ec:	46a0      	mov	r8, r4
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	2400      	movs	r4, #0
 80002f2:	2500      	movs	r5, #0
 80002f4:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <__aeabi_ddiv+0x244>)
 80002f6:	e7ed      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80002f8:	464b      	mov	r3, r9
 80002fa:	4323      	orrs	r3, r4
 80002fc:	4698      	mov	r8, r3
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xe2>
 8000300:	e089      	b.n	8000416 <__aeabi_ddiv+0x1f6>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d100      	bne.n	8000308 <__aeabi_ddiv+0xe8>
 8000306:	e1e0      	b.n	80006ca <__aeabi_ddiv+0x4aa>
 8000308:	0020      	movs	r0, r4
 800030a:	f000 fd95 	bl	8000e38 <__clzsi2>
 800030e:	0001      	movs	r1, r0
 8000310:	0002      	movs	r2, r0
 8000312:	390b      	subs	r1, #11
 8000314:	231d      	movs	r3, #29
 8000316:	1a5b      	subs	r3, r3, r1
 8000318:	4649      	mov	r1, r9
 800031a:	0010      	movs	r0, r2
 800031c:	40d9      	lsrs	r1, r3
 800031e:	3808      	subs	r0, #8
 8000320:	4084      	lsls	r4, r0
 8000322:	000b      	movs	r3, r1
 8000324:	464d      	mov	r5, r9
 8000326:	4323      	orrs	r3, r4
 8000328:	4698      	mov	r8, r3
 800032a:	4085      	lsls	r5, r0
 800032c:	4851      	ldr	r0, [pc, #324]	; (8000474 <__aeabi_ddiv+0x254>)
 800032e:	033c      	lsls	r4, r7, #12
 8000330:	1a83      	subs	r3, r0, r2
 8000332:	469b      	mov	fp, r3
 8000334:	2300      	movs	r3, #0
 8000336:	4699      	mov	r9, r3
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	007b      	lsls	r3, r7, #1
 800033c:	4650      	mov	r0, sl
 800033e:	0b24      	lsrs	r4, r4, #12
 8000340:	0d5b      	lsrs	r3, r3, #21
 8000342:	0fff      	lsrs	r7, r7, #31
 8000344:	2b00      	cmp	r3, #0
 8000346:	d197      	bne.n	8000278 <__aeabi_ddiv+0x58>
 8000348:	4652      	mov	r2, sl
 800034a:	4322      	orrs	r2, r4
 800034c:	d055      	beq.n	80003fa <__aeabi_ddiv+0x1da>
 800034e:	2c00      	cmp	r4, #0
 8000350:	d100      	bne.n	8000354 <__aeabi_ddiv+0x134>
 8000352:	e1ca      	b.n	80006ea <__aeabi_ddiv+0x4ca>
 8000354:	0020      	movs	r0, r4
 8000356:	f000 fd6f 	bl	8000e38 <__clzsi2>
 800035a:	0002      	movs	r2, r0
 800035c:	3a0b      	subs	r2, #11
 800035e:	231d      	movs	r3, #29
 8000360:	0001      	movs	r1, r0
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	3908      	subs	r1, #8
 8000368:	40da      	lsrs	r2, r3
 800036a:	408c      	lsls	r4, r1
 800036c:	4314      	orrs	r4, r2
 800036e:	4652      	mov	r2, sl
 8000370:	408a      	lsls	r2, r1
 8000372:	4b41      	ldr	r3, [pc, #260]	; (8000478 <__aeabi_ddiv+0x258>)
 8000374:	4458      	add	r0, fp
 8000376:	469b      	mov	fp, r3
 8000378:	4483      	add	fp, r0
 800037a:	2000      	movs	r0, #0
 800037c:	e78d      	b.n	800029a <__aeabi_ddiv+0x7a>
 800037e:	464b      	mov	r3, r9
 8000380:	4323      	orrs	r3, r4
 8000382:	4698      	mov	r8, r3
 8000384:	d140      	bne.n	8000408 <__aeabi_ddiv+0x1e8>
 8000386:	2308      	movs	r3, #8
 8000388:	4699      	mov	r9, r3
 800038a:	3b06      	subs	r3, #6
 800038c:	2500      	movs	r5, #0
 800038e:	4683      	mov	fp, r0
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	e769      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000394:	46b2      	mov	sl, r6
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d0a9      	beq.n	80002f0 <__aeabi_ddiv+0xd0>
 800039c:	2b03      	cmp	r3, #3
 800039e:	d100      	bne.n	80003a2 <__aeabi_ddiv+0x182>
 80003a0:	e211      	b.n	80007c6 <__aeabi_ddiv+0x5a6>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d093      	beq.n	80002ce <__aeabi_ddiv+0xae>
 80003a6:	4a35      	ldr	r2, [pc, #212]	; (800047c <__aeabi_ddiv+0x25c>)
 80003a8:	445a      	add	r2, fp
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	dc00      	bgt.n	80003b0 <__aeabi_ddiv+0x190>
 80003ae:	e13c      	b.n	800062a <__aeabi_ddiv+0x40a>
 80003b0:	076b      	lsls	r3, r5, #29
 80003b2:	d000      	beq.n	80003b6 <__aeabi_ddiv+0x196>
 80003b4:	e1a7      	b.n	8000706 <__aeabi_ddiv+0x4e6>
 80003b6:	08ed      	lsrs	r5, r5, #3
 80003b8:	4643      	mov	r3, r8
 80003ba:	01db      	lsls	r3, r3, #7
 80003bc:	d506      	bpl.n	80003cc <__aeabi_ddiv+0x1ac>
 80003be:	4642      	mov	r2, r8
 80003c0:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <__aeabi_ddiv+0x260>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	4690      	mov	r8, r2
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	00d2      	lsls	r2, r2, #3
 80003ca:	445a      	add	r2, fp
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <__aeabi_ddiv+0x264>)
 80003ce:	429a      	cmp	r2, r3
 80003d0:	dc8e      	bgt.n	80002f0 <__aeabi_ddiv+0xd0>
 80003d2:	4643      	mov	r3, r8
 80003d4:	0552      	lsls	r2, r2, #21
 80003d6:	0758      	lsls	r0, r3, #29
 80003d8:	025c      	lsls	r4, r3, #9
 80003da:	4305      	orrs	r5, r0
 80003dc:	0b24      	lsrs	r4, r4, #12
 80003de:	0d53      	lsrs	r3, r2, #21
 80003e0:	e778      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80003e2:	46ba      	mov	sl, r7
 80003e4:	46a0      	mov	r8, r4
 80003e6:	0015      	movs	r5, r2
 80003e8:	9000      	str	r0, [sp, #0]
 80003ea:	e7d4      	b.n	8000396 <__aeabi_ddiv+0x176>
 80003ec:	464a      	mov	r2, r9
 80003ee:	2303      	movs	r3, #3
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	2003      	movs	r0, #3
 80003f6:	4652      	mov	r2, sl
 80003f8:	e74f      	b.n	800029a <__aeabi_ddiv+0x7a>
 80003fa:	4649      	mov	r1, r9
 80003fc:	2301      	movs	r3, #1
 80003fe:	4319      	orrs	r1, r3
 8000400:	4689      	mov	r9, r1
 8000402:	2400      	movs	r4, #0
 8000404:	2001      	movs	r0, #1
 8000406:	e748      	b.n	800029a <__aeabi_ddiv+0x7a>
 8000408:	230c      	movs	r3, #12
 800040a:	4699      	mov	r9, r3
 800040c:	3b09      	subs	r3, #9
 800040e:	46a0      	mov	r8, r4
 8000410:	4683      	mov	fp, r0
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	e728      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000416:	2304      	movs	r3, #4
 8000418:	4699      	mov	r9, r3
 800041a:	2300      	movs	r3, #0
 800041c:	469b      	mov	fp, r3
 800041e:	3301      	adds	r3, #1
 8000420:	2500      	movs	r5, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	e720      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000426:	2300      	movs	r3, #0
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	469a      	mov	sl, r3
 800042c:	2500      	movs	r5, #0
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <__aeabi_ddiv+0x244>)
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	e74f      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	4641      	mov	r1, r8
 8000438:	031b      	lsls	r3, r3, #12
 800043a:	4219      	tst	r1, r3
 800043c:	d008      	beq.n	8000450 <__aeabi_ddiv+0x230>
 800043e:	421c      	tst	r4, r3
 8000440:	d106      	bne.n	8000450 <__aeabi_ddiv+0x230>
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	46ba      	mov	sl, r7
 8000448:	0015      	movs	r5, r2
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <__aeabi_ddiv+0x244>)
 800044c:	0b24      	lsrs	r4, r4, #12
 800044e:	e741      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000450:	2480      	movs	r4, #128	; 0x80
 8000452:	4643      	mov	r3, r8
 8000454:	0324      	lsls	r4, r4, #12
 8000456:	431c      	orrs	r4, r3
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	46b2      	mov	sl, r6
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <__aeabi_ddiv+0x244>)
 800045e:	0b24      	lsrs	r4, r4, #12
 8000460:	e738      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	000007ff 	.word	0x000007ff
 8000468:	fffffc01 	.word	0xfffffc01
 800046c:	08004d38 	.word	0x08004d38
 8000470:	fffff801 	.word	0xfffff801
 8000474:	fffffc0d 	.word	0xfffffc0d
 8000478:	000003f3 	.word	0x000003f3
 800047c:	000003ff 	.word	0x000003ff
 8000480:	feffffff 	.word	0xfeffffff
 8000484:	000007fe 	.word	0x000007fe
 8000488:	4544      	cmp	r4, r8
 800048a:	d200      	bcs.n	800048e <__aeabi_ddiv+0x26e>
 800048c:	e116      	b.n	80006bc <__aeabi_ddiv+0x49c>
 800048e:	d100      	bne.n	8000492 <__aeabi_ddiv+0x272>
 8000490:	e111      	b.n	80006b6 <__aeabi_ddiv+0x496>
 8000492:	2301      	movs	r3, #1
 8000494:	425b      	negs	r3, r3
 8000496:	469c      	mov	ip, r3
 8000498:	002e      	movs	r6, r5
 800049a:	4640      	mov	r0, r8
 800049c:	2500      	movs	r5, #0
 800049e:	44e3      	add	fp, ip
 80004a0:	0223      	lsls	r3, r4, #8
 80004a2:	0e14      	lsrs	r4, r2, #24
 80004a4:	431c      	orrs	r4, r3
 80004a6:	0c1b      	lsrs	r3, r3, #16
 80004a8:	4699      	mov	r9, r3
 80004aa:	0423      	lsls	r3, r4, #16
 80004ac:	0c1f      	lsrs	r7, r3, #16
 80004ae:	0212      	lsls	r2, r2, #8
 80004b0:	4649      	mov	r1, r9
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9701      	str	r7, [sp, #4]
 80004b6:	f7ff fead 	bl	8000214 <__aeabi_uidivmod>
 80004ba:	0002      	movs	r2, r0
 80004bc:	437a      	muls	r2, r7
 80004be:	040b      	lsls	r3, r1, #16
 80004c0:	0c31      	lsrs	r1, r6, #16
 80004c2:	4680      	mov	r8, r0
 80004c4:	4319      	orrs	r1, r3
 80004c6:	428a      	cmp	r2, r1
 80004c8:	d90b      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	469c      	mov	ip, r3
 80004d0:	1909      	adds	r1, r1, r4
 80004d2:	44e0      	add	r8, ip
 80004d4:	428c      	cmp	r4, r1
 80004d6:	d804      	bhi.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004d8:	428a      	cmp	r2, r1
 80004da:	d902      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004dc:	1e83      	subs	r3, r0, #2
 80004de:	4698      	mov	r8, r3
 80004e0:	1909      	adds	r1, r1, r4
 80004e2:	1a88      	subs	r0, r1, r2
 80004e4:	4649      	mov	r1, r9
 80004e6:	f7ff fe95 	bl	8000214 <__aeabi_uidivmod>
 80004ea:	0409      	lsls	r1, r1, #16
 80004ec:	468c      	mov	ip, r1
 80004ee:	0431      	lsls	r1, r6, #16
 80004f0:	4666      	mov	r6, ip
 80004f2:	9a01      	ldr	r2, [sp, #4]
 80004f4:	0c09      	lsrs	r1, r1, #16
 80004f6:	4342      	muls	r2, r0
 80004f8:	0003      	movs	r3, r0
 80004fa:	4331      	orrs	r1, r6
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d904      	bls.n	800050a <__aeabi_ddiv+0x2ea>
 8000500:	1909      	adds	r1, r1, r4
 8000502:	3b01      	subs	r3, #1
 8000504:	428c      	cmp	r4, r1
 8000506:	d800      	bhi.n	800050a <__aeabi_ddiv+0x2ea>
 8000508:	e111      	b.n	800072e <__aeabi_ddiv+0x50e>
 800050a:	1a89      	subs	r1, r1, r2
 800050c:	4642      	mov	r2, r8
 800050e:	9e00      	ldr	r6, [sp, #0]
 8000510:	0412      	lsls	r2, r2, #16
 8000512:	431a      	orrs	r2, r3
 8000514:	0c33      	lsrs	r3, r6, #16
 8000516:	001f      	movs	r7, r3
 8000518:	0c10      	lsrs	r0, r2, #16
 800051a:	4690      	mov	r8, r2
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	0413      	lsls	r3, r2, #16
 8000520:	0432      	lsls	r2, r6, #16
 8000522:	0c16      	lsrs	r6, r2, #16
 8000524:	0032      	movs	r2, r6
 8000526:	0c1b      	lsrs	r3, r3, #16
 8000528:	435a      	muls	r2, r3
 800052a:	9603      	str	r6, [sp, #12]
 800052c:	437b      	muls	r3, r7
 800052e:	4346      	muls	r6, r0
 8000530:	4378      	muls	r0, r7
 8000532:	0c17      	lsrs	r7, r2, #16
 8000534:	46bc      	mov	ip, r7
 8000536:	199b      	adds	r3, r3, r6
 8000538:	4463      	add	r3, ip
 800053a:	429e      	cmp	r6, r3
 800053c:	d903      	bls.n	8000546 <__aeabi_ddiv+0x326>
 800053e:	2680      	movs	r6, #128	; 0x80
 8000540:	0276      	lsls	r6, r6, #9
 8000542:	46b4      	mov	ip, r6
 8000544:	4460      	add	r0, ip
 8000546:	0c1e      	lsrs	r6, r3, #16
 8000548:	1830      	adds	r0, r6, r0
 800054a:	0416      	lsls	r6, r2, #16
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	0c36      	lsrs	r6, r6, #16
 8000550:	199e      	adds	r6, r3, r6
 8000552:	4281      	cmp	r1, r0
 8000554:	d200      	bcs.n	8000558 <__aeabi_ddiv+0x338>
 8000556:	e09c      	b.n	8000692 <__aeabi_ddiv+0x472>
 8000558:	d100      	bne.n	800055c <__aeabi_ddiv+0x33c>
 800055a:	e097      	b.n	800068c <__aeabi_ddiv+0x46c>
 800055c:	1bae      	subs	r6, r5, r6
 800055e:	1a09      	subs	r1, r1, r0
 8000560:	42b5      	cmp	r5, r6
 8000562:	4180      	sbcs	r0, r0
 8000564:	4240      	negs	r0, r0
 8000566:	1a08      	subs	r0, r1, r0
 8000568:	4284      	cmp	r4, r0
 800056a:	d100      	bne.n	800056e <__aeabi_ddiv+0x34e>
 800056c:	e111      	b.n	8000792 <__aeabi_ddiv+0x572>
 800056e:	4649      	mov	r1, r9
 8000570:	f7ff fe50 	bl	8000214 <__aeabi_uidivmod>
 8000574:	9a01      	ldr	r2, [sp, #4]
 8000576:	040b      	lsls	r3, r1, #16
 8000578:	4342      	muls	r2, r0
 800057a:	0c31      	lsrs	r1, r6, #16
 800057c:	0005      	movs	r5, r0
 800057e:	4319      	orrs	r1, r3
 8000580:	428a      	cmp	r2, r1
 8000582:	d907      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000584:	1909      	adds	r1, r1, r4
 8000586:	3d01      	subs	r5, #1
 8000588:	428c      	cmp	r4, r1
 800058a:	d803      	bhi.n	8000594 <__aeabi_ddiv+0x374>
 800058c:	428a      	cmp	r2, r1
 800058e:	d901      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000590:	1e85      	subs	r5, r0, #2
 8000592:	1909      	adds	r1, r1, r4
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	4649      	mov	r1, r9
 8000598:	f7ff fe3c 	bl	8000214 <__aeabi_uidivmod>
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	468c      	mov	ip, r1
 80005a0:	0431      	lsls	r1, r6, #16
 80005a2:	4666      	mov	r6, ip
 80005a4:	9a01      	ldr	r2, [sp, #4]
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4342      	muls	r2, r0
 80005aa:	0003      	movs	r3, r0
 80005ac:	4331      	orrs	r1, r6
 80005ae:	428a      	cmp	r2, r1
 80005b0:	d907      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005b2:	1909      	adds	r1, r1, r4
 80005b4:	3b01      	subs	r3, #1
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d803      	bhi.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005ba:	428a      	cmp	r2, r1
 80005bc:	d901      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005be:	1e83      	subs	r3, r0, #2
 80005c0:	1909      	adds	r1, r1, r4
 80005c2:	9e03      	ldr	r6, [sp, #12]
 80005c4:	1a89      	subs	r1, r1, r2
 80005c6:	0032      	movs	r2, r6
 80005c8:	042d      	lsls	r5, r5, #16
 80005ca:	431d      	orrs	r5, r3
 80005cc:	9f02      	ldr	r7, [sp, #8]
 80005ce:	042b      	lsls	r3, r5, #16
 80005d0:	0c1b      	lsrs	r3, r3, #16
 80005d2:	435a      	muls	r2, r3
 80005d4:	437b      	muls	r3, r7
 80005d6:	469c      	mov	ip, r3
 80005d8:	0c28      	lsrs	r0, r5, #16
 80005da:	4346      	muls	r6, r0
 80005dc:	0c13      	lsrs	r3, r2, #16
 80005de:	44b4      	add	ip, r6
 80005e0:	4463      	add	r3, ip
 80005e2:	4378      	muls	r0, r7
 80005e4:	429e      	cmp	r6, r3
 80005e6:	d903      	bls.n	80005f0 <__aeabi_ddiv+0x3d0>
 80005e8:	2680      	movs	r6, #128	; 0x80
 80005ea:	0276      	lsls	r6, r6, #9
 80005ec:	46b4      	mov	ip, r6
 80005ee:	4460      	add	r0, ip
 80005f0:	0c1e      	lsrs	r6, r3, #16
 80005f2:	0412      	lsls	r2, r2, #16
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	1830      	adds	r0, r6, r0
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	4281      	cmp	r1, r0
 80005fe:	d306      	bcc.n	800060e <__aeabi_ddiv+0x3ee>
 8000600:	d002      	beq.n	8000608 <__aeabi_ddiv+0x3e8>
 8000602:	2301      	movs	r3, #1
 8000604:	431d      	orrs	r5, r3
 8000606:	e6ce      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_ddiv+0x3ee>
 800060c:	e6cb      	b.n	80003a6 <__aeabi_ddiv+0x186>
 800060e:	1861      	adds	r1, r4, r1
 8000610:	1e6e      	subs	r6, r5, #1
 8000612:	42a1      	cmp	r1, r4
 8000614:	d200      	bcs.n	8000618 <__aeabi_ddiv+0x3f8>
 8000616:	e0a4      	b.n	8000762 <__aeabi_ddiv+0x542>
 8000618:	4281      	cmp	r1, r0
 800061a:	d200      	bcs.n	800061e <__aeabi_ddiv+0x3fe>
 800061c:	e0c9      	b.n	80007b2 <__aeabi_ddiv+0x592>
 800061e:	d100      	bne.n	8000622 <__aeabi_ddiv+0x402>
 8000620:	e0d9      	b.n	80007d6 <__aeabi_ddiv+0x5b6>
 8000622:	0035      	movs	r5, r6
 8000624:	e7ed      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000626:	2501      	movs	r5, #1
 8000628:	426d      	negs	r5, r5
 800062a:	2101      	movs	r1, #1
 800062c:	1a89      	subs	r1, r1, r2
 800062e:	2938      	cmp	r1, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_ddiv+0x414>
 8000632:	e64c      	b.n	80002ce <__aeabi_ddiv+0xae>
 8000634:	291f      	cmp	r1, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_ddiv+0x41a>
 8000638:	e07f      	b.n	800073a <__aeabi_ddiv+0x51a>
 800063a:	231f      	movs	r3, #31
 800063c:	425b      	negs	r3, r3
 800063e:	1a9a      	subs	r2, r3, r2
 8000640:	4643      	mov	r3, r8
 8000642:	40d3      	lsrs	r3, r2
 8000644:	2920      	cmp	r1, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_ddiv+0x432>
 8000648:	4644      	mov	r4, r8
 800064a:	4a65      	ldr	r2, [pc, #404]	; (80007e0 <__aeabi_ddiv+0x5c0>)
 800064c:	445a      	add	r2, fp
 800064e:	4094      	lsls	r4, r2
 8000650:	4325      	orrs	r5, r4
 8000652:	1e6a      	subs	r2, r5, #1
 8000654:	4195      	sbcs	r5, r2
 8000656:	2207      	movs	r2, #7
 8000658:	432b      	orrs	r3, r5
 800065a:	0015      	movs	r5, r2
 800065c:	2400      	movs	r4, #0
 800065e:	401d      	ands	r5, r3
 8000660:	421a      	tst	r2, r3
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0x446>
 8000664:	e0a1      	b.n	80007aa <__aeabi_ddiv+0x58a>
 8000666:	220f      	movs	r2, #15
 8000668:	2400      	movs	r4, #0
 800066a:	401a      	ands	r2, r3
 800066c:	2a04      	cmp	r2, #4
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000670:	e098      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	429a      	cmp	r2, r3
 8000676:	419b      	sbcs	r3, r3
 8000678:	425b      	negs	r3, r3
 800067a:	18e4      	adds	r4, r4, r3
 800067c:	0013      	movs	r3, r2
 800067e:	0222      	lsls	r2, r4, #8
 8000680:	d400      	bmi.n	8000684 <__aeabi_ddiv+0x464>
 8000682:	e08f      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000684:	2301      	movs	r3, #1
 8000686:	2400      	movs	r4, #0
 8000688:	2500      	movs	r5, #0
 800068a:	e623      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 800068c:	42b5      	cmp	r5, r6
 800068e:	d300      	bcc.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e764      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000692:	4643      	mov	r3, r8
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	9b00      	ldr	r3, [sp, #0]
 8000698:	469c      	mov	ip, r3
 800069a:	4465      	add	r5, ip
 800069c:	001f      	movs	r7, r3
 800069e:	429d      	cmp	r5, r3
 80006a0:	419b      	sbcs	r3, r3
 80006a2:	425b      	negs	r3, r3
 80006a4:	191b      	adds	r3, r3, r4
 80006a6:	18c9      	adds	r1, r1, r3
 80006a8:	428c      	cmp	r4, r1
 80006aa:	d23a      	bcs.n	8000722 <__aeabi_ddiv+0x502>
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d863      	bhi.n	8000778 <__aeabi_ddiv+0x558>
 80006b0:	d060      	beq.n	8000774 <__aeabi_ddiv+0x554>
 80006b2:	4690      	mov	r8, r2
 80006b4:	e752      	b.n	800055c <__aeabi_ddiv+0x33c>
 80006b6:	42aa      	cmp	r2, r5
 80006b8:	d900      	bls.n	80006bc <__aeabi_ddiv+0x49c>
 80006ba:	e6ea      	b.n	8000492 <__aeabi_ddiv+0x272>
 80006bc:	4643      	mov	r3, r8
 80006be:	07de      	lsls	r6, r3, #31
 80006c0:	0858      	lsrs	r0, r3, #1
 80006c2:	086b      	lsrs	r3, r5, #1
 80006c4:	431e      	orrs	r6, r3
 80006c6:	07ed      	lsls	r5, r5, #31
 80006c8:	e6ea      	b.n	80004a0 <__aeabi_ddiv+0x280>
 80006ca:	4648      	mov	r0, r9
 80006cc:	f000 fbb4 	bl	8000e38 <__clzsi2>
 80006d0:	0001      	movs	r1, r0
 80006d2:	0002      	movs	r2, r0
 80006d4:	3115      	adds	r1, #21
 80006d6:	3220      	adds	r2, #32
 80006d8:	291c      	cmp	r1, #28
 80006da:	dc00      	bgt.n	80006de <__aeabi_ddiv+0x4be>
 80006dc:	e61a      	b.n	8000314 <__aeabi_ddiv+0xf4>
 80006de:	464b      	mov	r3, r9
 80006e0:	3808      	subs	r0, #8
 80006e2:	4083      	lsls	r3, r0
 80006e4:	2500      	movs	r5, #0
 80006e6:	4698      	mov	r8, r3
 80006e8:	e620      	b.n	800032c <__aeabi_ddiv+0x10c>
 80006ea:	f000 fba5 	bl	8000e38 <__clzsi2>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	3215      	adds	r2, #21
 80006f4:	3020      	adds	r0, #32
 80006f6:	2a1c      	cmp	r2, #28
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_ddiv+0x4dc>
 80006fa:	e630      	b.n	800035e <__aeabi_ddiv+0x13e>
 80006fc:	4654      	mov	r4, sl
 80006fe:	3b08      	subs	r3, #8
 8000700:	2200      	movs	r2, #0
 8000702:	409c      	lsls	r4, r3
 8000704:	e635      	b.n	8000372 <__aeabi_ddiv+0x152>
 8000706:	230f      	movs	r3, #15
 8000708:	402b      	ands	r3, r5
 800070a:	2b04      	cmp	r3, #4
 800070c:	d100      	bne.n	8000710 <__aeabi_ddiv+0x4f0>
 800070e:	e652      	b.n	80003b6 <__aeabi_ddiv+0x196>
 8000710:	2305      	movs	r3, #5
 8000712:	425b      	negs	r3, r3
 8000714:	42ab      	cmp	r3, r5
 8000716:	419b      	sbcs	r3, r3
 8000718:	3504      	adds	r5, #4
 800071a:	425b      	negs	r3, r3
 800071c:	08ed      	lsrs	r5, r5, #3
 800071e:	4498      	add	r8, r3
 8000720:	e64a      	b.n	80003b8 <__aeabi_ddiv+0x198>
 8000722:	428c      	cmp	r4, r1
 8000724:	d1c5      	bne.n	80006b2 <__aeabi_ddiv+0x492>
 8000726:	42af      	cmp	r7, r5
 8000728:	d9c0      	bls.n	80006ac <__aeabi_ddiv+0x48c>
 800072a:	4690      	mov	r8, r2
 800072c:	e716      	b.n	800055c <__aeabi_ddiv+0x33c>
 800072e:	428a      	cmp	r2, r1
 8000730:	d800      	bhi.n	8000734 <__aeabi_ddiv+0x514>
 8000732:	e6ea      	b.n	800050a <__aeabi_ddiv+0x2ea>
 8000734:	1e83      	subs	r3, r0, #2
 8000736:	1909      	adds	r1, r1, r4
 8000738:	e6e7      	b.n	800050a <__aeabi_ddiv+0x2ea>
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <__aeabi_ddiv+0x5c4>)
 800073c:	0028      	movs	r0, r5
 800073e:	445a      	add	r2, fp
 8000740:	4643      	mov	r3, r8
 8000742:	4095      	lsls	r5, r2
 8000744:	4093      	lsls	r3, r2
 8000746:	40c8      	lsrs	r0, r1
 8000748:	1e6a      	subs	r2, r5, #1
 800074a:	4195      	sbcs	r5, r2
 800074c:	4644      	mov	r4, r8
 800074e:	4303      	orrs	r3, r0
 8000750:	432b      	orrs	r3, r5
 8000752:	40cc      	lsrs	r4, r1
 8000754:	075a      	lsls	r2, r3, #29
 8000756:	d092      	beq.n	800067e <__aeabi_ddiv+0x45e>
 8000758:	220f      	movs	r2, #15
 800075a:	401a      	ands	r2, r3
 800075c:	2a04      	cmp	r2, #4
 800075e:	d188      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000760:	e78d      	b.n	800067e <__aeabi_ddiv+0x45e>
 8000762:	0035      	movs	r5, r6
 8000764:	4281      	cmp	r1, r0
 8000766:	d000      	beq.n	800076a <__aeabi_ddiv+0x54a>
 8000768:	e74b      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 800076a:	9a00      	ldr	r2, [sp, #0]
 800076c:	4293      	cmp	r3, r2
 800076e:	d000      	beq.n	8000772 <__aeabi_ddiv+0x552>
 8000770:	e747      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000772:	e618      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000774:	42ae      	cmp	r6, r5
 8000776:	d99c      	bls.n	80006b2 <__aeabi_ddiv+0x492>
 8000778:	2302      	movs	r3, #2
 800077a:	425b      	negs	r3, r3
 800077c:	469c      	mov	ip, r3
 800077e:	9b00      	ldr	r3, [sp, #0]
 8000780:	44e0      	add	r8, ip
 8000782:	469c      	mov	ip, r3
 8000784:	4465      	add	r5, ip
 8000786:	429d      	cmp	r5, r3
 8000788:	419b      	sbcs	r3, r3
 800078a:	425b      	negs	r3, r3
 800078c:	191b      	adds	r3, r3, r4
 800078e:	18c9      	adds	r1, r1, r3
 8000790:	e6e4      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <__aeabi_ddiv+0x5c8>)
 8000794:	445a      	add	r2, fp
 8000796:	2a00      	cmp	r2, #0
 8000798:	dc00      	bgt.n	800079c <__aeabi_ddiv+0x57c>
 800079a:	e744      	b.n	8000626 <__aeabi_ddiv+0x406>
 800079c:	2301      	movs	r3, #1
 800079e:	2500      	movs	r5, #0
 80007a0:	4498      	add	r8, r3
 80007a2:	e609      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80007a4:	0765      	lsls	r5, r4, #29
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	0b24      	lsrs	r4, r4, #12
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	431d      	orrs	r5, r3
 80007ae:	2300      	movs	r3, #0
 80007b0:	e590      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007b2:	9e00      	ldr	r6, [sp, #0]
 80007b4:	3d02      	subs	r5, #2
 80007b6:	0072      	lsls	r2, r6, #1
 80007b8:	42b2      	cmp	r2, r6
 80007ba:	41bf      	sbcs	r7, r7
 80007bc:	427f      	negs	r7, r7
 80007be:	193c      	adds	r4, r7, r4
 80007c0:	1909      	adds	r1, r1, r4
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	e7ce      	b.n	8000764 <__aeabi_ddiv+0x544>
 80007c6:	2480      	movs	r4, #128	; 0x80
 80007c8:	4643      	mov	r3, r8
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	431c      	orrs	r4, r3
 80007ce:	0324      	lsls	r4, r4, #12
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <__aeabi_ddiv+0x5cc>)
 80007d2:	0b24      	lsrs	r4, r4, #12
 80007d4:	e57e      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007d6:	9a00      	ldr	r2, [sp, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3ea      	bcc.n	80007b2 <__aeabi_ddiv+0x592>
 80007dc:	0035      	movs	r5, r6
 80007de:	e7c4      	b.n	800076a <__aeabi_ddiv+0x54a>
 80007e0:	0000043e 	.word	0x0000043e
 80007e4:	0000041e 	.word	0x0000041e
 80007e8:	000003ff 	.word	0x000003ff
 80007ec:	000007ff 	.word	0x000007ff

080007f0 <__aeabi_dmul>:
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	4657      	mov	r7, sl
 80007f4:	464e      	mov	r6, r9
 80007f6:	4645      	mov	r5, r8
 80007f8:	46de      	mov	lr, fp
 80007fa:	b5e0      	push	{r5, r6, r7, lr}
 80007fc:	4698      	mov	r8, r3
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004b      	lsls	r3, r1, #1
 8000802:	0006      	movs	r6, r0
 8000804:	4692      	mov	sl, r2
 8000806:	b087      	sub	sp, #28
 8000808:	0b24      	lsrs	r4, r4, #12
 800080a:	0d5b      	lsrs	r3, r3, #21
 800080c:	0fcf      	lsrs	r7, r1, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d06c      	beq.n	80008ec <__aeabi_dmul+0xfc>
 8000812:	4add      	ldr	r2, [pc, #884]	; (8000b88 <__aeabi_dmul+0x398>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d100      	bne.n	800081a <__aeabi_dmul+0x2a>
 8000818:	e086      	b.n	8000928 <__aeabi_dmul+0x138>
 800081a:	0f42      	lsrs	r2, r0, #29
 800081c:	00e4      	lsls	r4, r4, #3
 800081e:	4314      	orrs	r4, r2
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0412      	lsls	r2, r2, #16
 8000824:	4314      	orrs	r4, r2
 8000826:	4ad9      	ldr	r2, [pc, #868]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000828:	00c5      	lsls	r5, r0, #3
 800082a:	4694      	mov	ip, r2
 800082c:	4463      	add	r3, ip
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	4699      	mov	r9, r3
 8000834:	469b      	mov	fp, r3
 8000836:	4643      	mov	r3, r8
 8000838:	4642      	mov	r2, r8
 800083a:	031e      	lsls	r6, r3, #12
 800083c:	0fd2      	lsrs	r2, r2, #31
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4650      	mov	r0, sl
 8000842:	4690      	mov	r8, r2
 8000844:	0b36      	lsrs	r6, r6, #12
 8000846:	0d5b      	lsrs	r3, r3, #21
 8000848:	d100      	bne.n	800084c <__aeabi_dmul+0x5c>
 800084a:	e078      	b.n	800093e <__aeabi_dmul+0x14e>
 800084c:	4ace      	ldr	r2, [pc, #824]	; (8000b88 <__aeabi_dmul+0x398>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d01d      	beq.n	800088e <__aeabi_dmul+0x9e>
 8000852:	49ce      	ldr	r1, [pc, #824]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000854:	0f42      	lsrs	r2, r0, #29
 8000856:	468c      	mov	ip, r1
 8000858:	9900      	ldr	r1, [sp, #0]
 800085a:	4463      	add	r3, ip
 800085c:	00f6      	lsls	r6, r6, #3
 800085e:	468c      	mov	ip, r1
 8000860:	4316      	orrs	r6, r2
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	449c      	add	ip, r3
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	4663      	mov	r3, ip
 800086a:	4316      	orrs	r6, r2
 800086c:	00c2      	lsls	r2, r0, #3
 800086e:	2000      	movs	r0, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	9900      	ldr	r1, [sp, #0]
 8000874:	4643      	mov	r3, r8
 8000876:	3101      	adds	r1, #1
 8000878:	468c      	mov	ip, r1
 800087a:	4649      	mov	r1, r9
 800087c:	407b      	eors	r3, r7
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	290f      	cmp	r1, #15
 8000882:	d900      	bls.n	8000886 <__aeabi_dmul+0x96>
 8000884:	e07e      	b.n	8000984 <__aeabi_dmul+0x194>
 8000886:	4bc2      	ldr	r3, [pc, #776]	; (8000b90 <__aeabi_dmul+0x3a0>)
 8000888:	0089      	lsls	r1, r1, #2
 800088a:	5859      	ldr	r1, [r3, r1]
 800088c:	468f      	mov	pc, r1
 800088e:	4652      	mov	r2, sl
 8000890:	9b00      	ldr	r3, [sp, #0]
 8000892:	4332      	orrs	r2, r6
 8000894:	d000      	beq.n	8000898 <__aeabi_dmul+0xa8>
 8000896:	e156      	b.n	8000b46 <__aeabi_dmul+0x356>
 8000898:	49bb      	ldr	r1, [pc, #748]	; (8000b88 <__aeabi_dmul+0x398>)
 800089a:	2600      	movs	r6, #0
 800089c:	468c      	mov	ip, r1
 800089e:	4463      	add	r3, ip
 80008a0:	4649      	mov	r1, r9
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4319      	orrs	r1, r3
 80008a8:	4689      	mov	r9, r1
 80008aa:	2002      	movs	r0, #2
 80008ac:	e7e1      	b.n	8000872 <__aeabi_dmul+0x82>
 80008ae:	4643      	mov	r3, r8
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	0034      	movs	r4, r6
 80008b4:	0015      	movs	r5, r2
 80008b6:	4683      	mov	fp, r0
 80008b8:	465b      	mov	r3, fp
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d05e      	beq.n	800097c <__aeabi_dmul+0x18c>
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dmul+0xd4>
 80008c2:	e1f3      	b.n	8000cac <__aeabi_dmul+0x4bc>
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d000      	beq.n	80008ca <__aeabi_dmul+0xda>
 80008c8:	e118      	b.n	8000afc <__aeabi_dmul+0x30c>
 80008ca:	2200      	movs	r2, #0
 80008cc:	2400      	movs	r4, #0
 80008ce:	2500      	movs	r5, #0
 80008d0:	9b01      	ldr	r3, [sp, #4]
 80008d2:	0512      	lsls	r2, r2, #20
 80008d4:	4322      	orrs	r2, r4
 80008d6:	07db      	lsls	r3, r3, #31
 80008d8:	431a      	orrs	r2, r3
 80008da:	0028      	movs	r0, r5
 80008dc:	0011      	movs	r1, r2
 80008de:	b007      	add	sp, #28
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	46bb      	mov	fp, r7
 80008e4:	46b2      	mov	sl, r6
 80008e6:	46a9      	mov	r9, r5
 80008e8:	46a0      	mov	r8, r4
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ec:	0025      	movs	r5, r4
 80008ee:	4305      	orrs	r5, r0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dmul+0x104>
 80008f2:	e141      	b.n	8000b78 <__aeabi_dmul+0x388>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_dmul+0x10a>
 80008f8:	e1ad      	b.n	8000c56 <__aeabi_dmul+0x466>
 80008fa:	0020      	movs	r0, r4
 80008fc:	f000 fa9c 	bl	8000e38 <__clzsi2>
 8000900:	0001      	movs	r1, r0
 8000902:	0002      	movs	r2, r0
 8000904:	390b      	subs	r1, #11
 8000906:	231d      	movs	r3, #29
 8000908:	0010      	movs	r0, r2
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	0031      	movs	r1, r6
 800090e:	0035      	movs	r5, r6
 8000910:	3808      	subs	r0, #8
 8000912:	4084      	lsls	r4, r0
 8000914:	40d9      	lsrs	r1, r3
 8000916:	4085      	lsls	r5, r0
 8000918:	430c      	orrs	r4, r1
 800091a:	489e      	ldr	r0, [pc, #632]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800091c:	1a83      	subs	r3, r0, r2
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	4699      	mov	r9, r3
 8000924:	469b      	mov	fp, r3
 8000926:	e786      	b.n	8000836 <__aeabi_dmul+0x46>
 8000928:	0005      	movs	r5, r0
 800092a:	4325      	orrs	r5, r4
 800092c:	d000      	beq.n	8000930 <__aeabi_dmul+0x140>
 800092e:	e11c      	b.n	8000b6a <__aeabi_dmul+0x37a>
 8000930:	2208      	movs	r2, #8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2302      	movs	r3, #2
 8000936:	2400      	movs	r4, #0
 8000938:	4691      	mov	r9, r2
 800093a:	469b      	mov	fp, r3
 800093c:	e77b      	b.n	8000836 <__aeabi_dmul+0x46>
 800093e:	4652      	mov	r2, sl
 8000940:	4332      	orrs	r2, r6
 8000942:	d100      	bne.n	8000946 <__aeabi_dmul+0x156>
 8000944:	e10a      	b.n	8000b5c <__aeabi_dmul+0x36c>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dmul+0x15c>
 800094a:	e176      	b.n	8000c3a <__aeabi_dmul+0x44a>
 800094c:	0030      	movs	r0, r6
 800094e:	f000 fa73 	bl	8000e38 <__clzsi2>
 8000952:	0002      	movs	r2, r0
 8000954:	3a0b      	subs	r2, #11
 8000956:	231d      	movs	r3, #29
 8000958:	0001      	movs	r1, r0
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	4652      	mov	r2, sl
 800095e:	3908      	subs	r1, #8
 8000960:	40da      	lsrs	r2, r3
 8000962:	408e      	lsls	r6, r1
 8000964:	4316      	orrs	r6, r2
 8000966:	4652      	mov	r2, sl
 8000968:	408a      	lsls	r2, r1
 800096a:	9b00      	ldr	r3, [sp, #0]
 800096c:	4989      	ldr	r1, [pc, #548]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800096e:	1a18      	subs	r0, r3, r0
 8000970:	0003      	movs	r3, r0
 8000972:	468c      	mov	ip, r1
 8000974:	4463      	add	r3, ip
 8000976:	2000      	movs	r0, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	e77a      	b.n	8000872 <__aeabi_dmul+0x82>
 800097c:	2400      	movs	r4, #0
 800097e:	2500      	movs	r5, #0
 8000980:	4a81      	ldr	r2, [pc, #516]	; (8000b88 <__aeabi_dmul+0x398>)
 8000982:	e7a5      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000984:	0c2f      	lsrs	r7, r5, #16
 8000986:	042d      	lsls	r5, r5, #16
 8000988:	0c2d      	lsrs	r5, r5, #16
 800098a:	002b      	movs	r3, r5
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	0412      	lsls	r2, r2, #16
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	4353      	muls	r3, r2
 8000994:	4698      	mov	r8, r3
 8000996:	0013      	movs	r3, r2
 8000998:	0028      	movs	r0, r5
 800099a:	437b      	muls	r3, r7
 800099c:	4699      	mov	r9, r3
 800099e:	4348      	muls	r0, r1
 80009a0:	4448      	add	r0, r9
 80009a2:	4683      	mov	fp, r0
 80009a4:	4640      	mov	r0, r8
 80009a6:	000b      	movs	r3, r1
 80009a8:	0c00      	lsrs	r0, r0, #16
 80009aa:	4682      	mov	sl, r0
 80009ac:	4658      	mov	r0, fp
 80009ae:	437b      	muls	r3, r7
 80009b0:	4450      	add	r0, sl
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	4581      	cmp	r9, r0
 80009b6:	d906      	bls.n	80009c6 <__aeabi_dmul+0x1d6>
 80009b8:	469a      	mov	sl, r3
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	025b      	lsls	r3, r3, #9
 80009be:	4699      	mov	r9, r3
 80009c0:	44ca      	add	sl, r9
 80009c2:	4653      	mov	r3, sl
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	469b      	mov	fp, r3
 80009ca:	4643      	mov	r3, r8
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	0400      	lsls	r0, r0, #16
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	4698      	mov	r8, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4443      	add	r3, r8
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	0c33      	lsrs	r3, r6, #16
 80009dc:	4699      	mov	r9, r3
 80009de:	002b      	movs	r3, r5
 80009e0:	0436      	lsls	r6, r6, #16
 80009e2:	0c36      	lsrs	r6, r6, #16
 80009e4:	4373      	muls	r3, r6
 80009e6:	4698      	mov	r8, r3
 80009e8:	0033      	movs	r3, r6
 80009ea:	437b      	muls	r3, r7
 80009ec:	469a      	mov	sl, r3
 80009ee:	464b      	mov	r3, r9
 80009f0:	435d      	muls	r5, r3
 80009f2:	435f      	muls	r7, r3
 80009f4:	4643      	mov	r3, r8
 80009f6:	4455      	add	r5, sl
 80009f8:	0c18      	lsrs	r0, r3, #16
 80009fa:	1940      	adds	r0, r0, r5
 80009fc:	4582      	cmp	sl, r0
 80009fe:	d903      	bls.n	8000a08 <__aeabi_dmul+0x218>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	469a      	mov	sl, r3
 8000a06:	4457      	add	r7, sl
 8000a08:	0c05      	lsrs	r5, r0, #16
 8000a0a:	19eb      	adds	r3, r5, r7
 8000a0c:	9305      	str	r3, [sp, #20]
 8000a0e:	4643      	mov	r3, r8
 8000a10:	041d      	lsls	r5, r3, #16
 8000a12:	0c2d      	lsrs	r5, r5, #16
 8000a14:	0400      	lsls	r0, r0, #16
 8000a16:	1940      	adds	r0, r0, r5
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	0424      	lsls	r4, r4, #16
 8000a1c:	0c24      	lsrs	r4, r4, #16
 8000a1e:	0027      	movs	r7, r4
 8000a20:	4357      	muls	r7, r2
 8000a22:	436a      	muls	r2, r5
 8000a24:	4690      	mov	r8, r2
 8000a26:	002a      	movs	r2, r5
 8000a28:	0c3b      	lsrs	r3, r7, #16
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	434a      	muls	r2, r1
 8000a2e:	4361      	muls	r1, r4
 8000a30:	4441      	add	r1, r8
 8000a32:	4451      	add	r1, sl
 8000a34:	4483      	add	fp, r0
 8000a36:	4588      	cmp	r8, r1
 8000a38:	d903      	bls.n	8000a42 <__aeabi_dmul+0x252>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	4698      	mov	r8, r3
 8000a40:	4442      	add	r2, r8
 8000a42:	043f      	lsls	r7, r7, #16
 8000a44:	0c0b      	lsrs	r3, r1, #16
 8000a46:	0c3f      	lsrs	r7, r7, #16
 8000a48:	0409      	lsls	r1, r1, #16
 8000a4a:	19c9      	adds	r1, r1, r7
 8000a4c:	0027      	movs	r7, r4
 8000a4e:	4698      	mov	r8, r3
 8000a50:	464b      	mov	r3, r9
 8000a52:	4377      	muls	r7, r6
 8000a54:	435c      	muls	r4, r3
 8000a56:	436e      	muls	r6, r5
 8000a58:	435d      	muls	r5, r3
 8000a5a:	0c3b      	lsrs	r3, r7, #16
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	19a4      	adds	r4, r4, r6
 8000a60:	444c      	add	r4, r9
 8000a62:	4442      	add	r2, r8
 8000a64:	9503      	str	r5, [sp, #12]
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d904      	bls.n	8000a74 <__aeabi_dmul+0x284>
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	4698      	mov	r8, r3
 8000a70:	4445      	add	r5, r8
 8000a72:	9503      	str	r5, [sp, #12]
 8000a74:	9b02      	ldr	r3, [sp, #8]
 8000a76:	043f      	lsls	r7, r7, #16
 8000a78:	445b      	add	r3, fp
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	4283      	cmp	r3, r0
 8000a7e:	4180      	sbcs	r0, r0
 8000a80:	0423      	lsls	r3, r4, #16
 8000a82:	4698      	mov	r8, r3
 8000a84:	9b05      	ldr	r3, [sp, #20]
 8000a86:	0c3f      	lsrs	r7, r7, #16
 8000a88:	4447      	add	r7, r8
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	1876      	adds	r6, r6, r1
 8000a8e:	428e      	cmp	r6, r1
 8000a90:	4189      	sbcs	r1, r1
 8000a92:	4447      	add	r7, r8
 8000a94:	4240      	negs	r0, r0
 8000a96:	183d      	adds	r5, r7, r0
 8000a98:	46a8      	mov	r8, r5
 8000a9a:	4693      	mov	fp, r2
 8000a9c:	4249      	negs	r1, r1
 8000a9e:	468a      	mov	sl, r1
 8000aa0:	44c3      	add	fp, r8
 8000aa2:	429f      	cmp	r7, r3
 8000aa4:	41bf      	sbcs	r7, r7
 8000aa6:	4580      	cmp	r8, r0
 8000aa8:	4180      	sbcs	r0, r0
 8000aaa:	9b03      	ldr	r3, [sp, #12]
 8000aac:	44da      	add	sl, fp
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	427f      	negs	r7, r7
 8000ab6:	4307      	orrs	r7, r0
 8000ab8:	0c24      	lsrs	r4, r4, #16
 8000aba:	4593      	cmp	fp, r2
 8000abc:	4192      	sbcs	r2, r2
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	4189      	sbcs	r1, r1
 8000ac2:	193f      	adds	r7, r7, r4
 8000ac4:	0ddc      	lsrs	r4, r3, #23
 8000ac6:	9b04      	ldr	r3, [sp, #16]
 8000ac8:	0275      	lsls	r5, r6, #9
 8000aca:	431d      	orrs	r5, r3
 8000acc:	1e68      	subs	r0, r5, #1
 8000ace:	4185      	sbcs	r5, r0
 8000ad0:	4653      	mov	r3, sl
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	18bf      	adds	r7, r7, r2
 8000ada:	4447      	add	r7, r8
 8000adc:	0df6      	lsrs	r6, r6, #23
 8000ade:	027f      	lsls	r7, r7, #9
 8000ae0:	4335      	orrs	r5, r6
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	433c      	orrs	r4, r7
 8000ae6:	4315      	orrs	r5, r2
 8000ae8:	01fb      	lsls	r3, r7, #7
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dmul+0x2fe>
 8000aec:	e0c1      	b.n	8000c72 <__aeabi_dmul+0x482>
 8000aee:	2101      	movs	r1, #1
 8000af0:	086a      	lsrs	r2, r5, #1
 8000af2:	400d      	ands	r5, r1
 8000af4:	4315      	orrs	r5, r2
 8000af6:	07e2      	lsls	r2, r4, #31
 8000af8:	4315      	orrs	r5, r2
 8000afa:	0864      	lsrs	r4, r4, #1
 8000afc:	4926      	ldr	r1, [pc, #152]	; (8000b98 <__aeabi_dmul+0x3a8>)
 8000afe:	4461      	add	r1, ip
 8000b00:	2900      	cmp	r1, #0
 8000b02:	dd56      	ble.n	8000bb2 <__aeabi_dmul+0x3c2>
 8000b04:	076b      	lsls	r3, r5, #29
 8000b06:	d009      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b08:	220f      	movs	r2, #15
 8000b0a:	402a      	ands	r2, r5
 8000b0c:	2a04      	cmp	r2, #4
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b10:	1d2a      	adds	r2, r5, #4
 8000b12:	42aa      	cmp	r2, r5
 8000b14:	41ad      	sbcs	r5, r5
 8000b16:	426d      	negs	r5, r5
 8000b18:	1964      	adds	r4, r4, r5
 8000b1a:	0015      	movs	r5, r2
 8000b1c:	01e3      	lsls	r3, r4, #7
 8000b1e:	d504      	bpl.n	8000b2a <__aeabi_dmul+0x33a>
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <__aeabi_dmul+0x3ac>)
 8000b24:	00c9      	lsls	r1, r1, #3
 8000b26:	4014      	ands	r4, r2
 8000b28:	4461      	add	r1, ip
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <__aeabi_dmul+0x3b0>)
 8000b2c:	4291      	cmp	r1, r2
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_dmul+0x342>
 8000b30:	e724      	b.n	800097c <__aeabi_dmul+0x18c>
 8000b32:	0762      	lsls	r2, r4, #29
 8000b34:	08ed      	lsrs	r5, r5, #3
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	0b24      	lsrs	r4, r4, #12
 8000b3e:	0d4a      	lsrs	r2, r1, #21
 8000b40:	e6c6      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000b42:	9701      	str	r7, [sp, #4]
 8000b44:	e6b8      	b.n	80008b8 <__aeabi_dmul+0xc8>
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <__aeabi_dmul+0x398>)
 8000b48:	2003      	movs	r0, #3
 8000b4a:	4694      	mov	ip, r2
 8000b4c:	4463      	add	r3, ip
 8000b4e:	464a      	mov	r2, r9
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4691      	mov	r9, r2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	e68a      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b5c:	4649      	mov	r1, r9
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4319      	orrs	r1, r3
 8000b62:	4689      	mov	r9, r1
 8000b64:	2600      	movs	r6, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	e683      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	0005      	movs	r5, r0
 8000b72:	4691      	mov	r9, r2
 8000b74:	469b      	mov	fp, r3
 8000b76:	e65e      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	2400      	movs	r4, #0
 8000b84:	469b      	mov	fp, r3
 8000b86:	e656      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	fffffc01 	.word	0xfffffc01
 8000b90:	08004d78 	.word	0x08004d78
 8000b94:	fffffc0d 	.word	0xfffffc0d
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2480      	movs	r4, #128	; 0x80
 8000ba8:	2500      	movs	r5, #0
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	0324      	lsls	r4, r4, #12
 8000bb0:	e68e      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	1a40      	subs	r0, r0, r1
 8000bb6:	2838      	cmp	r0, #56	; 0x38
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_dmul+0x3cc>
 8000bba:	e686      	b.n	80008ca <__aeabi_dmul+0xda>
 8000bbc:	281f      	cmp	r0, #31
 8000bbe:	dd5b      	ble.n	8000c78 <__aeabi_dmul+0x488>
 8000bc0:	221f      	movs	r2, #31
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	1a51      	subs	r1, r2, r1
 8000bc8:	40cb      	lsrs	r3, r1
 8000bca:	0019      	movs	r1, r3
 8000bcc:	2820      	cmp	r0, #32
 8000bce:	d003      	beq.n	8000bd8 <__aeabi_dmul+0x3e8>
 8000bd0:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <__aeabi_dmul+0x4d0>)
 8000bd2:	4462      	add	r2, ip
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	4325      	orrs	r5, r4
 8000bd8:	1e6a      	subs	r2, r5, #1
 8000bda:	4195      	sbcs	r5, r2
 8000bdc:	002a      	movs	r2, r5
 8000bde:	430a      	orrs	r2, r1
 8000be0:	2107      	movs	r1, #7
 8000be2:	000d      	movs	r5, r1
 8000be4:	2400      	movs	r4, #0
 8000be6:	4015      	ands	r5, r2
 8000be8:	4211      	tst	r1, r2
 8000bea:	d05b      	beq.n	8000ca4 <__aeabi_dmul+0x4b4>
 8000bec:	210f      	movs	r1, #15
 8000bee:	2400      	movs	r4, #0
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2904      	cmp	r1, #4
 8000bf4:	d053      	beq.n	8000c9e <__aeabi_dmul+0x4ae>
 8000bf6:	1d11      	adds	r1, r2, #4
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	4192      	sbcs	r2, r2
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	18a4      	adds	r4, r4, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	0223      	lsls	r3, r4, #8
 8000c04:	d54b      	bpl.n	8000c9e <__aeabi_dmul+0x4ae>
 8000c06:	2201      	movs	r2, #1
 8000c08:	2400      	movs	r4, #0
 8000c0a:	2500      	movs	r5, #0
 8000c0c:	e660      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	421c      	tst	r4, r3
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dmul+0x43a>
 8000c16:	421e      	tst	r6, r3
 8000c18:	d107      	bne.n	8000c2a <__aeabi_dmul+0x43a>
 8000c1a:	4333      	orrs	r3, r6
 8000c1c:	031c      	lsls	r4, r3, #12
 8000c1e:	4643      	mov	r3, r8
 8000c20:	0015      	movs	r5, r2
 8000c22:	0b24      	lsrs	r4, r4, #12
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e652      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0312      	lsls	r2, r2, #12
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	0324      	lsls	r4, r4, #12
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	9701      	str	r7, [sp, #4]
 8000c38:	e64a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c3a:	f000 f8fd 	bl	8000e38 <__clzsi2>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	001a      	movs	r2, r3
 8000c42:	3215      	adds	r2, #21
 8000c44:	3020      	adds	r0, #32
 8000c46:	2a1c      	cmp	r2, #28
 8000c48:	dc00      	bgt.n	8000c4c <__aeabi_dmul+0x45c>
 8000c4a:	e684      	b.n	8000956 <__aeabi_dmul+0x166>
 8000c4c:	4656      	mov	r6, sl
 8000c4e:	3b08      	subs	r3, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	409e      	lsls	r6, r3
 8000c54:	e689      	b.n	800096a <__aeabi_dmul+0x17a>
 8000c56:	f000 f8ef 	bl	8000e38 <__clzsi2>
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	3115      	adds	r1, #21
 8000c60:	3220      	adds	r2, #32
 8000c62:	291c      	cmp	r1, #28
 8000c64:	dc00      	bgt.n	8000c68 <__aeabi_dmul+0x478>
 8000c66:	e64e      	b.n	8000906 <__aeabi_dmul+0x116>
 8000c68:	0034      	movs	r4, r6
 8000c6a:	3808      	subs	r0, #8
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	4084      	lsls	r4, r0
 8000c70:	e653      	b.n	800091a <__aeabi_dmul+0x12a>
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	469c      	mov	ip, r3
 8000c76:	e741      	b.n	8000afc <__aeabi_dmul+0x30c>
 8000c78:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <__aeabi_dmul+0x4d4>)
 8000c7a:	0022      	movs	r2, r4
 8000c7c:	4461      	add	r1, ip
 8000c7e:	002e      	movs	r6, r5
 8000c80:	408d      	lsls	r5, r1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	40c6      	lsrs	r6, r0
 8000c86:	1e69      	subs	r1, r5, #1
 8000c88:	418d      	sbcs	r5, r1
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	432a      	orrs	r2, r5
 8000c8e:	40c4      	lsrs	r4, r0
 8000c90:	0753      	lsls	r3, r2, #29
 8000c92:	d0b6      	beq.n	8000c02 <__aeabi_dmul+0x412>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4011      	ands	r1, r2
 8000c98:	2904      	cmp	r1, #4
 8000c9a:	d1ac      	bne.n	8000bf6 <__aeabi_dmul+0x406>
 8000c9c:	e7b1      	b.n	8000c02 <__aeabi_dmul+0x412>
 8000c9e:	0765      	lsls	r5, r4, #29
 8000ca0:	0264      	lsls	r4, r4, #9
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	08d2      	lsrs	r2, r2, #3
 8000ca6:	4315      	orrs	r5, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e611      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0312      	lsls	r2, r2, #12
 8000cb0:	4314      	orrs	r4, r2
 8000cb2:	0324      	lsls	r4, r4, #12
 8000cb4:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000cb6:	0b24      	lsrs	r4, r4, #12
 8000cb8:	e60a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	0000043e 	.word	0x0000043e
 8000cc4:	0000041e 	.word	0x0000041e

08000cc8 <__aeabi_i2d>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d016      	beq.n	8000cfc <__aeabi_i2d+0x34>
 8000cce:	17c3      	asrs	r3, r0, #31
 8000cd0:	18c5      	adds	r5, r0, r3
 8000cd2:	405d      	eors	r5, r3
 8000cd4:	0fc4      	lsrs	r4, r0, #31
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f000 f8ae 	bl	8000e38 <__clzsi2>
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <__aeabi_i2d+0x5c>)
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	280a      	cmp	r0, #10
 8000ce2:	dc16      	bgt.n	8000d12 <__aeabi_i2d+0x4a>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	002e      	movs	r6, r5
 8000ce8:	3315      	adds	r3, #21
 8000cea:	409e      	lsls	r6, r3
 8000cec:	230b      	movs	r3, #11
 8000cee:	1a18      	subs	r0, r3, r0
 8000cf0:	40c5      	lsrs	r5, r0
 8000cf2:	0553      	lsls	r3, r2, #21
 8000cf4:	032d      	lsls	r5, r5, #12
 8000cf6:	0b2d      	lsrs	r5, r5, #12
 8000cf8:	0d5b      	lsrs	r3, r3, #21
 8000cfa:	e003      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2500      	movs	r5, #0
 8000d02:	2600      	movs	r6, #0
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	432b      	orrs	r3, r5
 8000d08:	07e4      	lsls	r4, r4, #31
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	0019      	movs	r1, r3
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	380b      	subs	r0, #11
 8000d14:	4085      	lsls	r5, r0
 8000d16:	0553      	lsls	r3, r2, #21
 8000d18:	032d      	lsls	r5, r5, #12
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	0b2d      	lsrs	r5, r5, #12
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	e7f0      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	0000041e 	.word	0x0000041e

08000d28 <__aeabi_d2f>:
 8000d28:	0002      	movs	r2, r0
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	0308      	lsls	r0, r1, #12
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	4e3d      	ldr	r6, [pc, #244]	; (8000e28 <__aeabi_d2f+0x100>)
 8000d34:	0fcc      	lsrs	r4, r1, #31
 8000d36:	0a40      	lsrs	r0, r0, #9
 8000d38:	0f51      	lsrs	r1, r2, #29
 8000d3a:	1c5f      	adds	r7, r3, #1
 8000d3c:	4308      	orrs	r0, r1
 8000d3e:	00d5      	lsls	r5, r2, #3
 8000d40:	4237      	tst	r7, r6
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_d2f+0x32>
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <__aeabi_d2f+0x104>)
 8000d46:	185e      	adds	r6, r3, r1
 8000d48:	2efe      	cmp	r6, #254	; 0xfe
 8000d4a:	dd16      	ble.n	8000d7a <__aeabi_d2f+0x52>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	2100      	movs	r1, #0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	430b      	orrs	r3, r1
 8000d54:	07e0      	lsls	r0, r4, #31
 8000d56:	4318      	orrs	r0, r3
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <__aeabi_d2f+0x44>
 8000d5e:	4328      	orrs	r0, r5
 8000d60:	d027      	beq.n	8000db2 <__aeabi_d2f+0x8a>
 8000d62:	2105      	movs	r1, #5
 8000d64:	0189      	lsls	r1, r1, #6
 8000d66:	0a49      	lsrs	r1, r1, #9
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d6c:	4305      	orrs	r5, r0
 8000d6e:	d0ed      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	03c9      	lsls	r1, r1, #15
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	4301      	orrs	r1, r0
 8000d78:	e7ea      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	dd1c      	ble.n	8000db8 <__aeabi_d2f+0x90>
 8000d7e:	0192      	lsls	r2, r2, #6
 8000d80:	0011      	movs	r1, r2
 8000d82:	1e4a      	subs	r2, r1, #1
 8000d84:	4191      	sbcs	r1, r2
 8000d86:	00c0      	lsls	r0, r0, #3
 8000d88:	0f6d      	lsrs	r5, r5, #29
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	4329      	orrs	r1, r5
 8000d8e:	074b      	lsls	r3, r1, #29
 8000d90:	d048      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000d92:	230f      	movs	r3, #15
 8000d94:	400b      	ands	r3, r1
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_d2f+0x74>
 8000d9a:	3104      	adds	r1, #4
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	04db      	lsls	r3, r3, #19
 8000da0:	400b      	ands	r3, r1
 8000da2:	d03f      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000da4:	1c72      	adds	r2, r6, #1
 8000da6:	2efe      	cmp	r6, #254	; 0xfe
 8000da8:	d0d0      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000daa:	0189      	lsls	r1, r1, #6
 8000dac:	0a49      	lsrs	r1, r1, #9
 8000dae:	b2d3      	uxtb	r3, r2
 8000db0:	e7ce      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	e7cb      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db8:	0032      	movs	r2, r6
 8000dba:	3217      	adds	r2, #23
 8000dbc:	db22      	blt.n	8000e04 <__aeabi_d2f+0xdc>
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	221e      	movs	r2, #30
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	4308      	orrs	r0, r1
 8000dc6:	1b92      	subs	r2, r2, r6
 8000dc8:	2a1f      	cmp	r2, #31
 8000dca:	dd1d      	ble.n	8000e08 <__aeabi_d2f+0xe0>
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4249      	negs	r1, r1
 8000dd0:	1b8e      	subs	r6, r1, r6
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	40f1      	lsrs	r1, r6
 8000dd6:	000e      	movs	r6, r1
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d004      	beq.n	8000de6 <__aeabi_d2f+0xbe>
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <__aeabi_d2f+0x108>)
 8000dde:	4694      	mov	ip, r2
 8000de0:	4463      	add	r3, ip
 8000de2:	4098      	lsls	r0, r3
 8000de4:	4305      	orrs	r5, r0
 8000de6:	0029      	movs	r1, r5
 8000de8:	1e4d      	subs	r5, r1, #1
 8000dea:	41a9      	sbcs	r1, r5
 8000dec:	4331      	orrs	r1, r6
 8000dee:	2600      	movs	r6, #0
 8000df0:	074b      	lsls	r3, r1, #29
 8000df2:	d1ce      	bne.n	8000d92 <__aeabi_d2f+0x6a>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	000b      	movs	r3, r1
 8000df8:	04c0      	lsls	r0, r0, #19
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4003      	ands	r3, r0
 8000dfe:	4201      	tst	r1, r0
 8000e00:	d1d3      	bne.n	8000daa <__aeabi_d2f+0x82>
 8000e02:	e7af      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	e7ac      	b.n	8000d62 <__aeabi_d2f+0x3a>
 8000e08:	490a      	ldr	r1, [pc, #40]	; (8000e34 <__aeabi_d2f+0x10c>)
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	0029      	movs	r1, r5
 8000e0e:	4463      	add	r3, ip
 8000e10:	40d1      	lsrs	r1, r2
 8000e12:	409d      	lsls	r5, r3
 8000e14:	000a      	movs	r2, r1
 8000e16:	0029      	movs	r1, r5
 8000e18:	4098      	lsls	r0, r3
 8000e1a:	1e4d      	subs	r5, r1, #1
 8000e1c:	41a9      	sbcs	r1, r5
 8000e1e:	4301      	orrs	r1, r0
 8000e20:	4311      	orrs	r1, r2
 8000e22:	e7e4      	b.n	8000dee <__aeabi_d2f+0xc6>
 8000e24:	0033      	movs	r3, r6
 8000e26:	e79d      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e28:	000007fe 	.word	0x000007fe
 8000e2c:	fffffc80 	.word	0xfffffc80
 8000e30:	fffffca2 	.word	0xfffffca2
 8000e34:	fffffc82 	.word	0xfffffc82

08000e38 <__clzsi2>:
 8000e38:	211c      	movs	r1, #28
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d301      	bcc.n	8000e46 <__clzsi2+0xe>
 8000e42:	0c00      	lsrs	r0, r0, #16
 8000e44:	3910      	subs	r1, #16
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	d301      	bcc.n	8000e50 <__clzsi2+0x18>
 8000e4c:	0a00      	lsrs	r0, r0, #8
 8000e4e:	3908      	subs	r1, #8
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	4298      	cmp	r0, r3
 8000e54:	d301      	bcc.n	8000e5a <__clzsi2+0x22>
 8000e56:	0900      	lsrs	r0, r0, #4
 8000e58:	3904      	subs	r1, #4
 8000e5a:	a202      	add	r2, pc, #8	; (adr r2, 8000e64 <__clzsi2+0x2c>)
 8000e5c:	5c10      	ldrb	r0, [r2, r0]
 8000e5e:	1840      	adds	r0, r0, r1
 8000e60:	4770      	bx	lr
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	02020304 	.word	0x02020304
 8000e68:	01010101 	.word	0x01010101
	...

08000e74 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	230c      	movs	r3, #12
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f003 ff34 	bl	8004cf0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000e8a:	4a3a      	ldr	r2, [pc, #232]	; (8000f74 <MX_ADC_Init+0x100>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ec6:	22c2      	movs	r2, #194	; 0xc2
 8000ec8:	32ff      	adds	r2, #255	; 0xff
 8000eca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ed4:	2224      	movs	r2, #36	; 0x24
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 ff88 	bl	8001df8 <HAL_ADC_Init>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000eec:	f000 fa65 	bl	80013ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	0152      	lsls	r2, r2, #5
 8000efc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2207      	movs	r2, #7
 8000f02:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 f946 	bl	800219c <HAL_ADC_ConfigChannel>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000f14:	f000 fa51 	bl	80013ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f1e:	1d3a      	adds	r2, r7, #4
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 f939 	bl	800219c <HAL_ADC_ConfigChannel>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000f2e:	f000 fa44 	bl	80013ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2203      	movs	r2, #3
 8000f36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f38:	1d3a      	adds	r2, r7, #4
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 f92c 	bl	800219c <HAL_ADC_ConfigChannel>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000f48:	f000 fa37 	bl	80013ba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2204      	movs	r2, #4
 8000f50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f52:	1d3a      	adds	r2, r7, #4
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_ADC_Init+0xfc>)
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f001 f91f 	bl	800219c <HAL_ADC_ConfigChannel>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000f62:	f000 fa2a 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	2000007c 	.word	0x2000007c
 8000f74:	40012400 	.word	0x40012400

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	; 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	2414      	movs	r4, #20
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	001a      	movs	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f003 feb0 	bl	8004cf0 <memset>
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <HAL_ADC_MspInit+0xd4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d153      	bne.n	8001042 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0089      	lsls	r1, r1, #2
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0289      	lsls	r1, r1, #10
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_ADC_MspInit+0xd8>)
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = ADC_Pin|I_OUT_ADC_Pin|U_IN_ADC_Pin|U_OUT_ADC_Pin;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	221d      	movs	r2, #29
 8000fd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2203      	movs	r2, #3
 8000fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	193a      	adds	r2, r7, r4
 8000fe6:	2390      	movs	r3, #144	; 0x90
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 fd41 	bl	8002a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 800101c:	2220      	movs	r2, #32
 800101e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 8001028:	0018      	movs	r0, r3
 800102a:	f001 fb8b 	bl	8002744 <HAL_DMA_Init>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001032:	f000 f9c2 	bl	80013ba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_ADC_MspInit+0xdc>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b00b      	add	sp, #44	; 0x2c
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40012400 	.word	0x40012400
 8001050:	40021000 	.word	0x40021000
 8001054:	20000038 	.word	0x20000038
 8001058:	40020008 	.word	0x40020008

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_DMA_Init+0x38>)
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_DMA_Init+0x38>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_DMA_Init+0x38>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2009      	movs	r0, #9
 8001080:	f001 fb2e 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001084:	2009      	movs	r0, #9
 8001086:	f001 fb40 	bl	800270a <HAL_NVIC_EnableIRQ>

}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40021000 	.word	0x40021000

08001098 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	240c      	movs	r4, #12
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	0018      	movs	r0, r3
 80010a4:	2314      	movs	r3, #20
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f003 fe21 	bl	8004cf0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0309      	lsls	r1, r1, #12
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	031b      	lsls	r3, r3, #12
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	02c9      	lsls	r1, r1, #11
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	02db      	lsls	r3, r3, #11
 80010fc:	4013      	ands	r3, r2
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = U_L_COMP_Pin;
 8001102:	193b      	adds	r3, r7, r4
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	0192      	lsls	r2, r2, #6
 8001108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_GPIO_Init+0xd4>)
 800110e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(U_L_COMP_GPIO_Port, &GPIO_InitStruct);
 8001116:	193b      	adds	r3, r7, r4
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_GPIO_Init+0xd8>)
 800111a:	0019      	movs	r1, r3
 800111c:	0010      	movs	r0, r2
 800111e:	f001 fca9 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IS_boost_COMP_Pin|U_OUT_COMP_Pin;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2222      	movs	r2, #34	; 0x22
 8001126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <MX_GPIO_Init+0xd4>)
 800112c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	193a      	adds	r2, r7, r4
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f001 fc99 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_OUT_COMPB2_Pin;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2204      	movs	r2, #4
 8001146:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <MX_GPIO_Init+0xd4>)
 800114c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I_OUT_COMPB2_GPIO_Port, &GPIO_InitStruct);
 8001154:	193b      	adds	r3, r7, r4
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <MX_GPIO_Init+0xdc>)
 8001158:	0019      	movs	r1, r3
 800115a:	0010      	movs	r0, r2
 800115c:	f001 fc8a 	bl	8002a74 <HAL_GPIO_Init>

}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b009      	add	sp, #36	; 0x24
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	10110000 	.word	0x10110000
 8001170:	48000800 	.word	0x48000800
 8001174:	48000400 	.word	0x48000400

08001178 <HAL_ADC_ConvCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	U_Input		= (adc_buff[0] * 0.00080566);
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fd9f 	bl	8000cc8 <__aeabi_i2d>
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <HAL_ADC_ConvCpltCallback+0xd4>)
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 800118e:	f7ff fb2f 	bl	80007f0 <__aeabi_dmul>
 8001192:	0002      	movs	r2, r0
 8001194:	000b      	movs	r3, r1
 8001196:	0010      	movs	r0, r2
 8001198:	0019      	movs	r1, r3
 800119a:	f7ff fdc5 	bl	8000d28 <__aeabi_d2f>
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_ADC_ConvCpltCallback+0xdc>)
 80011a2:	601a      	str	r2, [r3, #0]
	I_B_Side 	= (adc_buff[1] * 0.00080566) / 0.33;
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_ADC_ConvCpltCallback+0xd0>)
 80011a6:	885b      	ldrh	r3, [r3, #2]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fd8d 	bl	8000cc8 <__aeabi_i2d>
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_ADC_ConvCpltCallback+0xd4>)
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 80011b2:	f7ff fb1d 	bl	80007f0 <__aeabi_dmul>
 80011b6:	0002      	movs	r2, r0
 80011b8:	000b      	movs	r3, r1
 80011ba:	0010      	movs	r0, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_ADC_ConvCpltCallback+0xe4>)
 80011c2:	f7ff f82d 	bl	8000220 <__aeabi_ddiv>
 80011c6:	0002      	movs	r2, r0
 80011c8:	000b      	movs	r3, r1
 80011ca:	0010      	movs	r0, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	f7ff fdab 	bl	8000d28 <__aeabi_d2f>
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_ADC_ConvCpltCallback+0xe8>)
 80011d6:	601a      	str	r2, [r3, #0]
	U_A_Side	= (adc_buff[2] * 0.00080566) * 11;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_ADC_ConvCpltCallback+0xd0>)
 80011da:	889b      	ldrh	r3, [r3, #4]
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fd73 	bl	8000cc8 <__aeabi_i2d>
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_ADC_ConvCpltCallback+0xd4>)
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 80011e6:	f7ff fb03 	bl	80007f0 <__aeabi_dmul>
 80011ea:	0002      	movs	r2, r0
 80011ec:	000b      	movs	r3, r1
 80011ee:	0010      	movs	r0, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_ADC_ConvCpltCallback+0xec>)
 80011f6:	f7ff fafb 	bl	80007f0 <__aeabi_dmul>
 80011fa:	0002      	movs	r2, r0
 80011fc:	000b      	movs	r3, r1
 80011fe:	0010      	movs	r0, r2
 8001200:	0019      	movs	r1, r3
 8001202:	f7ff fd91 	bl	8000d28 <__aeabi_d2f>
 8001206:	1c02      	adds	r2, r0, #0
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_ADC_ConvCpltCallback+0xf0>)
 800120a:	601a      	str	r2, [r3, #0]
	U_B_Side	= (adc_buff[3] * 0.00080566) * 15.70588235;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_ADC_ConvCpltCallback+0xd0>)
 800120e:	88db      	ldrh	r3, [r3, #6]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fd59 	bl	8000cc8 <__aeabi_i2d>
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 800121a:	f7ff fae9 	bl	80007f0 <__aeabi_dmul>
 800121e:	0002      	movs	r2, r0
 8001220:	000b      	movs	r3, r1
 8001222:	0010      	movs	r0, r2
 8001224:	0019      	movs	r1, r3
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_ADC_ConvCpltCallback+0xf8>)
 800122a:	f7ff fae1 	bl	80007f0 <__aeabi_dmul>
 800122e:	0002      	movs	r2, r0
 8001230:	000b      	movs	r3, r1
 8001232:	0010      	movs	r0, r2
 8001234:	0019      	movs	r1, r3
 8001236:	f7ff fd77 	bl	8000d28 <__aeabi_d2f>
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_ADC_ConvCpltCallback+0xfc>)
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000bc 	.word	0x200000bc
 800124c:	ad045a83 	.word	0xad045a83
 8001250:	3f4a665d 	.word	0x3f4a665d
 8001254:	20000034 	.word	0x20000034
 8001258:	51eb851f 	.word	0x51eb851f
 800125c:	3fd51eb8 	.word	0x3fd51eb8
 8001260:	20000030 	.word	0x20000030
 8001264:	40260000 	.word	0x40260000
 8001268:	20000028 	.word	0x20000028
 800126c:	695025b2 	.word	0x695025b2
 8001270:	402f6969 	.word	0x402f6969
 8001274:	2000002c 	.word	0x2000002c

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fd34 	bl	8001ce8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f834 	bl	80012ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001284:	f7ff ff08 	bl	8001098 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001288:	f000 f8f6 	bl	8001478 <MX_TIM1_Init>
  MX_DMA_Init();		// Before ADC_Init !!
 800128c:	f7ff fee6 	bl	800105c <MX_DMA_Init>
  MX_ADC_Init();
 8001290:	f7ff fdf0 	bl	8000e74 <MX_ADC_Init>
  MX_TIM14_Init();
 8001294:	f000 f9fe 	bl	8001694 <MX_TIM14_Init>
  MX_TIM3_Init();
 8001298:	f000 f990 	bl	80015bc <MX_TIM3_Init>
  MX_TIM16_Init();
 800129c:	f000 fa4a 	bl	8001734 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80012a0:	f000 fc56 	bl	8001b50 <MX_USART1_UART_Init>


  HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f000 fd83 	bl	8001db0 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, (uint16_t *)adc_buff, 4);
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <main+0x68>)
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <main+0x6c>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fee1 	bl	8002078 <HAL_ADC_Start_DMA>

  //lHAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <main+0x70>)
 80012b8:	2100      	movs	r1, #0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 fb24 	bl	8003908 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <main+0x70>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f003 f861 	bl	800438c <HAL_TIMEx_PWMN_Start>

  while (1)
  {
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_buff[0]/4);
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <main+0x68>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <main+0x70>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(100);
 80012d8:	2064      	movs	r0, #100	; 0x64
 80012da:	f000 fd69 	bl	8001db0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_buff[0]/4);
 80012de:	e7f4      	b.n	80012ca <main+0x52>
 80012e0:	200000bc 	.word	0x200000bc
 80012e4:	2000007c 	.word	0x2000007c
 80012e8:	2000010c 	.word	0x2000010c

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b095      	sub	sp, #84	; 0x54
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	2420      	movs	r4, #32
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	0018      	movs	r0, r3
 80012f8:	2330      	movs	r3, #48	; 0x30
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f003 fcf7 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001302:	2310      	movs	r3, #16
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	0018      	movs	r0, r3
 8001308:	2310      	movs	r3, #16
 800130a:	001a      	movs	r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	f003 fcef 	bl	8004cf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001312:	003b      	movs	r3, r7
 8001314:	0018      	movs	r0, r3
 8001316:	2310      	movs	r3, #16
 8001318:	001a      	movs	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	f003 fce8 	bl	8004cf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001320:	0021      	movs	r1, r4
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2212      	movs	r2, #18
 8001326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2201      	movs	r2, #1
 800132c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2201      	movs	r2, #1
 8001332:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2210      	movs	r2, #16
 8001338:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2210      	movs	r2, #16
 800133e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2202      	movs	r2, #2
 8001344:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	22a0      	movs	r2, #160	; 0xa0
 8001350:	0392      	lsls	r2, r2, #14
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	187b      	adds	r3, r7, r1
 800135c:	0018      	movs	r0, r3
 800135e:	f001 fcf9 	bl	8002d54 <HAL_RCC_OscConfig>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001366:	f000 f828 	bl	80013ba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	2110      	movs	r1, #16
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2207      	movs	r2, #7
 8001370:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2202      	movs	r2, #2
 8001376:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2101      	movs	r1, #1
 8001388:	0018      	movs	r0, r3
 800138a:	f001 fffd 	bl	8003388 <HAL_RCC_ClockConfig>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001392:	f000 f812 	bl	80013ba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001396:	003b      	movs	r3, r7
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800139c:	003b      	movs	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	003b      	movs	r3, r7
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 f941 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013ae:	f000 f804 	bl	80013ba <Error_Handler>
  }
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b015      	add	sp, #84	; 0x54
 80013b8:	bd90      	pop	{r4, r7, pc}

080013ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013be:	b672      	cpsid	i
}
 80013c0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	430a      	orrs	r2, r1
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2201      	movs	r2, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0549      	lsls	r1, r1, #21
 80013ec:	430a      	orrs	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_MspInit+0x44>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 fca2 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <DMA1_Channel1_IRQHandler+0x14>)
 8001442:	0018      	movs	r0, r3
 8001444:	f001 fa2c 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000038 	.word	0x20000038

08001454 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800145a:	0018      	movs	r0, r3
 800145c:	f002 fb06 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	2000010c 	.word	0x2000010c

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b092      	sub	sp, #72	; 0x48
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	0018      	movs	r0, r3
 8001484:	2308      	movs	r3, #8
 8001486:	001a      	movs	r2, r3
 8001488:	2100      	movs	r1, #0
 800148a:	f003 fc31 	bl	8004cf0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	2324      	movs	r3, #36	; 0x24
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	0018      	movs	r0, r3
 8001494:	231c      	movs	r3, #28
 8001496:	001a      	movs	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f003 fc29 	bl	8004cf0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	0018      	movs	r0, r3
 80014a2:	2320      	movs	r3, #32
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f003 fc22 	bl	8004cf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <MX_TIM1_Init+0x140>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014b2:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	00d2      	lsls	r2, r2, #3
 80014c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f002 f9c4 	bl	8003868 <HAL_TIM_PWM_Init>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80014e4:	f7ff ff69 	bl	80013ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f6:	187a      	adds	r2, r7, r1
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f002 ffdb 	bl	80044b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	1e03      	subs	r3, r0, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001506:	f7ff ff58 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2124      	movs	r1, #36	; 0x24
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2260      	movs	r2, #96	; 0x60
 8001510:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001536:	1879      	adds	r1, r7, r1
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM1_Init+0x13c>)
 800153a:	2200      	movs	r2, #0
 800153c:	0018      	movs	r0, r3
 800153e:	f002 fbab 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001546:	f7ff ff38 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800154a:	2324      	movs	r3, #36	; 0x24
 800154c:	18f9      	adds	r1, r7, r3
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM1_Init+0x13c>)
 8001550:	2204      	movs	r2, #4
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fba0 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 800155c:	f7ff ff2d 	bl	80013ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 128;
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	0152      	lsls	r2, r2, #5
 800157e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	0192      	lsls	r2, r2, #6
 8001586:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800158e:	1d3a      	adds	r2, r7, #4
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_TIM1_Init+0x13c>)
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f002 ffe7 	bl	8004568 <HAL_TIMEx_ConfigBreakDeadTime>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800159e:	f7ff ff0c 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f9e9 	bl	800197c <HAL_TIM_MspPostInit>

}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b012      	add	sp, #72	; 0x48
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	2000010c 	.word	0x2000010c
 80015b8:	40012c00 	.word	0x40012c00

080015bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c2:	2320      	movs	r3, #32
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	0018      	movs	r0, r3
 80015c8:	2308      	movs	r3, #8
 80015ca:	001a      	movs	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f003 fb8f 	bl	8004cf0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	0018      	movs	r0, r3
 80015d6:	231c      	movs	r3, #28
 80015d8:	001a      	movs	r2, r3
 80015da:	2100      	movs	r1, #0
 80015dc:	f003 fb88 	bl	8004cf0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <MX_TIM3_Init+0xcc>)
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <MX_TIM3_Init+0xd0>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <MX_TIM3_Init+0xcc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_TIM3_Init+0xcc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <MX_TIM3_Init+0xcc>)
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <MX_TIM3_Init+0xd4>)
 80015f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_TIM3_Init+0xcc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001606:	0018      	movs	r0, r3
 8001608:	f002 f92e 	bl	8003868 <HAL_TIM_PWM_Init>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001610:	f7ff fed3 	bl	80013ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2120      	movs	r1, #32
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001622:	187a      	adds	r2, r7, r1
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f002 ff45 	bl	80044b8 <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001632:	f7ff fec2 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2260      	movs	r2, #96	; 0x60
 800163a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164e:	1d39      	adds	r1, r7, #4
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001652:	2200      	movs	r2, #0
 8001654:	0018      	movs	r0, r3
 8001656:	f002 fb1f 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800165e:	f7ff feac 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001662:	1d39      	adds	r1, r7, #4
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001666:	2204      	movs	r2, #4
 8001668:	0018      	movs	r0, r3
 800166a:	f002 fb15 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001672:	f7ff fea2 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <MX_TIM3_Init+0xcc>)
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f97f 	bl	800197c <HAL_TIM_MspPostInit>

}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b00a      	add	sp, #40	; 0x28
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	200000c4 	.word	0x200000c4
 800168c:	40000400 	.word	0x40000400
 8001690:	0000ffff 	.word	0x0000ffff

08001694 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	0018      	movs	r0, r3
 800169e:	231c      	movs	r3, #28
 80016a0:	001a      	movs	r2, r3
 80016a2:	2100      	movs	r1, #0
 80016a4:	f003 fb24 	bl	8004cf0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM14_Init+0x98>)
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <MX_TIM14_Init+0x9c>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM14_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM14_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM14_Init+0x98>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM14_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_TIM14_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_TIM14_Init+0x98>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f002 f879 	bl	80037c8 <HAL_TIM_Base_Init>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80016da:	f7ff fe6e 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_TIM14_Init+0x98>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f002 f8c1 	bl	8003868 <HAL_TIM_PWM_Init>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80016ea:	f7ff fe66 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2260      	movs	r2, #96	; 0x60
 80016f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1024;
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	00d2      	lsls	r2, r2, #3
 80016fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	1d39      	adds	r1, r7, #4
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_TIM14_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f002 fac2 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8001718:	f7ff fe4f 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <MX_TIM14_Init+0x98>)
 800171e:	0018      	movs	r0, r3
 8001720:	f000 f92c 	bl	800197c <HAL_TIM_MspPostInit>

}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b008      	add	sp, #32
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000154 	.word	0x20000154
 8001730:	40002000 	.word	0x40002000

08001734 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b090      	sub	sp, #64	; 0x40
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800173a:	2324      	movs	r3, #36	; 0x24
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	0018      	movs	r0, r3
 8001740:	231c      	movs	r3, #28
 8001742:	001a      	movs	r2, r3
 8001744:	2100      	movs	r1, #0
 8001746:	f003 fad3 	bl	8004cf0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	0018      	movs	r0, r3
 800174e:	2320      	movs	r3, #32
 8001750:	001a      	movs	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	f003 facc 	bl	8004cf0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <MX_TIM16_Init+0x100>)
 800175a:	4a37      	ldr	r2, [pc, #220]	; (8001838 <MX_TIM16_Init+0x104>)
 800175c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_TIM16_Init+0x100>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <MX_TIM16_Init+0x100>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <MX_TIM16_Init+0x100>)
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <MX_TIM16_Init+0x108>)
 800176e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <MX_TIM16_Init+0x100>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_TIM16_Init+0x100>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_TIM16_Init+0x100>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <MX_TIM16_Init+0x100>)
 8001784:	0018      	movs	r0, r3
 8001786:	f002 f81f 	bl	80037c8 <HAL_TIM_Base_Init>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800178e:	f7ff fe14 	bl	80013ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_TIM16_Init+0x100>)
 8001794:	0018      	movs	r0, r3
 8001796:	f002 f867 	bl	8003868 <HAL_TIM_PWM_Init>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800179e:	f7ff fe0c 	bl	80013ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2124      	movs	r1, #36	; 0x24
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2260      	movs	r2, #96	; 0x60
 80017a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	1879      	adds	r1, r7, r1
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM16_Init+0x100>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	0018      	movs	r0, r3
 80017d6:	f002 fa5f 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80017de:	f7ff fdec 	bl	80013ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	0192      	lsls	r2, r2, #6
 8001806:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800180e:	1d3a      	adds	r2, r7, #4
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_TIM16_Init+0x100>)
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f002 fea7 	bl	8004568 <HAL_TIMEx_ConfigBreakDeadTime>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800181e:	f7ff fdcc 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <MX_TIM16_Init+0x100>)
 8001824:	0018      	movs	r0, r3
 8001826:	f000 f8a9 	bl	800197c <HAL_TIM_MspPostInit>

}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b010      	add	sp, #64	; 0x40
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	2000019c 	.word	0x2000019c
 8001838:	40014400 	.word	0x40014400
 800183c:	0000ffff 	.word	0x0000ffff

08001840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	2414      	movs	r4, #20
 800184a:	193b      	adds	r3, r7, r4
 800184c:	0018      	movs	r0, r3
 800184e:	2314      	movs	r3, #20
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f003 fa4c 	bl	8004cf0 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	; (8001904 <HAL_TIM_PWM_MspInit+0xc4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d13b      	bne.n	80018da <HAL_TIM_PWM_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0109      	lsls	r1, r1, #4
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0289      	lsls	r1, r1, #10
 8001888:	430a      	orrs	r2, r1
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = I_OUT_COMP_Pin;
 800189a:	0021      	movs	r1, r4
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2202      	movs	r2, #2
 80018a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2202      	movs	r2, #2
 80018b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I_OUT_COMP_GPIO_Port, &GPIO_InitStruct);
 80018ba:	187a      	adds	r2, r7, r1
 80018bc:	2390      	movs	r3, #144	; 0x90
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f001 f8d6 	bl	8002a74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	200d      	movs	r0, #13
 80018ce:	f000 ff07 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80018d2:	200d      	movs	r0, #13
 80018d4:	f000 ff19 	bl	800270a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018d8:	e010      	b.n	80018fc <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_TIM_PWM_MspInit+0xcc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10b      	bne.n	80018fc <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 80018ea:	2102      	movs	r1, #2
 80018ec:	430a      	orrs	r2, r1
 80018ee:	61da      	str	r2, [r3, #28]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_TIM_PWM_MspInit+0xc8>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b00b      	add	sp, #44	; 0x2c
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40000400 	.word	0x40000400

08001910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_Base_MspInit+0x60>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0049      	lsls	r1, r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	61da      	str	r2, [r3, #28]
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800193e:	e012      	b.n	8001966 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM16)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_TIM_Base_MspInit+0x68>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10d      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0289      	lsls	r1, r1, #10
 8001954:	430a      	orrs	r2, r1
 8001956:	619a      	str	r2, [r3, #24]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_TIM_Base_MspInit+0x64>)
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40002000 	.word	0x40002000
 8001974:	40021000 	.word	0x40021000
 8001978:	40014400 	.word	0x40014400

0800197c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b08d      	sub	sp, #52	; 0x34
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	241c      	movs	r4, #28
 8001986:	193b      	adds	r3, r7, r4
 8001988:	0018      	movs	r0, r3
 800198a:	2314      	movs	r3, #20
 800198c:	001a      	movs	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	f003 f9ae 	bl	8004cf0 <memset>
  if(timHandle->Instance==TIM1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_TIM_MspPostInit+0x1bc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d149      	bne.n	8001a32 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0289      	lsls	r1, r1, #10
 80019a8:	430a      	orrs	r2, r1
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	029b      	lsls	r3, r3, #10
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	02c9      	lsls	r1, r1, #11
 80019c4:	430a      	orrs	r2, r1
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	02db      	lsls	r3, r3, #11
 80019d0:	4013      	ands	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UB_ctrl_Pin|UA_ctrl_Pin|UC_ctrl_Pin;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	22e0      	movs	r2, #224	; 0xe0
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	2202      	movs	r2, #2
 80019e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	2202      	movs	r2, #2
 80019f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	193a      	adds	r2, r7, r4
 80019f8:	2390      	movs	r3, #144	; 0x90
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 f838 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UD_ctrl_Pin;
 8001a04:	0021      	movs	r1, r4
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2202      	movs	r2, #2
 8001a10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2202      	movs	r2, #2
 8001a22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UD_ctrl_GPIO_Port, &GPIO_InitStruct);
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_TIM_MspPostInit+0x1c4>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f001 f822 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a30:	e07d      	b.n	8001b2e <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM3)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a43      	ldr	r2, [pc, #268]	; (8001b44 <HAL_TIM_MspPostInit+0x1c8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d124      	bne.n	8001a86 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	02c9      	lsls	r1, r1, #11
 8001a46:	430a      	orrs	r2, r1
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	02db      	lsls	r3, r3, #11
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I_OUT_COMP_PWM_Pin|U_OUT_COMP_PWM_Pin;
 8001a58:	211c      	movs	r1, #28
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2230      	movs	r2, #48	; 0x30
 8001a5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2202      	movs	r2, #2
 8001a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2201      	movs	r2, #1
 8001a76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <HAL_TIM_MspPostInit+0x1c4>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f000 fff8 	bl	8002a74 <HAL_GPIO_Init>
}
 8001a84:	e053      	b.n	8001b2e <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM14)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_TIM_MspPostInit+0x1cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d124      	bne.n	8001ada <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	02c9      	lsls	r1, r1, #11
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	615a      	str	r2, [r3, #20]
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	02db      	lsls	r3, r3, #11
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UE_ctrl_Pin;
 8001aac:	211c      	movs	r1, #28
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UE_ctrl_GPIO_Port, &GPIO_InitStruct);
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_TIM_MspPostInit+0x1c4>)
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	f000 ffce 	bl	8002a74 <HAL_GPIO_Init>
}
 8001ad8:	e029      	b.n	8001b2e <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM16)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_TIM_MspPostInit+0x1d0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d124      	bne.n	8001b2e <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	02c9      	lsls	r1, r1, #11
 8001aee:	430a      	orrs	r2, r1
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_TIM_MspPostInit+0x1c0>)
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	02db      	lsls	r3, r3, #11
 8001afa:	4013      	ands	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IS_boost_COMP_PWM_Pin;
 8001b00:	211c      	movs	r1, #28
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	0052      	lsls	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2202      	movs	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IS_boost_COMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_TIM_MspPostInit+0x1c4>)
 8001b26:	0019      	movs	r1, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	f000 ffa3 	bl	8002a74 <HAL_GPIO_Init>
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b00d      	add	sp, #52	; 0x34
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40002000 	.word	0x40002000
 8001b4c:	40014400 	.word	0x40014400

08001b50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_USART1_UART_Init+0x5c>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2296      	movs	r2, #150	; 0x96
 8001b5e:	0212      	lsls	r2, r2, #8
 8001b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <MX_USART1_UART_Init+0x58>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 fd79 	bl	800468c <HAL_UART_Init>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f7ff fc0c 	bl	80013ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200001e4 	.word	0x200001e4
 8001bac:	40013800 	.word	0x40013800

08001bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b08b      	sub	sp, #44	; 0x2c
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	2414      	movs	r4, #20
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	2314      	movs	r3, #20
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f003 f894 	bl	8004cf0 <memset>
  if(uartHandle->Instance==USART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <HAL_UART_MspInit+0xd8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d156      	bne.n	8001c80 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	01c9      	lsls	r1, r1, #7
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0289      	lsls	r1, r1, #10
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	02c9      	lsls	r1, r1, #11
 8001c14:	430a      	orrs	r2, r1
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_UART_MspInit+0xdc>)
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	02db      	lsls	r3, r3, #11
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	00d2      	lsls	r2, r2, #3
 8001c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2202      	movs	r2, #2
 8001c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	2201      	movs	r2, #1
 8001c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	193a      	adds	r2, r7, r4
 8001c48:	2390      	movs	r3, #144	; 0x90
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 ff10 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c54:	0021      	movs	r1, r4
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2202      	movs	r2, #2
 8001c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_UART_MspInit+0xe0>)
 8001c78:	0019      	movs	r1, r3
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	f000 fefa 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00b      	add	sp, #44	; 0x2c
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000400 	.word	0x48000400

08001c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <LoopForever+0xe>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb0:	4c0b      	ldr	r4, [pc, #44]	; (8001ce0 <LoopForever+0x16>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cbe:	f7ff fbd5 	bl	800146c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001cc2:	f002 fff1 	bl	8004ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc6:	f7ff fad7 	bl	8001278 <main>

08001cca <LoopForever>:

LoopForever:
    b LoopForever
 8001cca:	e7fe      	b.n	8001cca <LoopForever>
  ldr   r0, =_estack
 8001ccc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cd8:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 8001cdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ce0:	2000026c 	.word	0x2000026c

08001ce4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC1_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_Init+0x24>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_Init+0x24>)
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f809 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfe:	f7ff fb61 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40022000 	.word	0x40022000

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_InitTick+0x5c>)
 8001d1a:	681c      	ldr	r4, [r3, #0]
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_InitTick+0x60>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	0019      	movs	r1, r3
 8001d22:	23fa      	movs	r3, #250	; 0xfa
 8001d24:	0098      	lsls	r0, r3, #2
 8001d26:	f7fe f9ef 	bl	8000108 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	0020      	movs	r0, r4
 8001d30:	f7fe f9ea 	bl	8000108 <__udivsi3>
 8001d34:	0003      	movs	r3, r0
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fcf7 	bl	800272a <HAL_SYSTICK_Config>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e00f      	b.n	8001d64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d80b      	bhi.n	8001d62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	425b      	negs	r3, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 fcc4 	bl	80026e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_InitTick+0x64>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b003      	add	sp, #12
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	001a      	movs	r2, r3
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x20>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	18d2      	adds	r2, r2, r3
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_IncTick+0x20>)
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000268 	.word	0x20000268

08001d9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_GetTick+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	20000268 	.word	0x20000268

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_Delay+0x44>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	f7ff ffe0 	bl	8001d9c <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e125      	b.n	8002062 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2234      	movs	r2, #52	; 0x34
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff f8a2 	bl	8000f78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	2210      	movs	r2, #16
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d000      	beq.n	8001e40 <HAL_ADC_Init+0x48>
 8001e3e:	e103      	b.n	8002048 <HAL_ADC_Init+0x250>
 8001e40:	230f      	movs	r3, #15
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d000      	beq.n	8001e4c <HAL_ADC_Init+0x54>
 8001e4a:	e0fd      	b.n	8002048 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001e56:	d000      	beq.n	8001e5a <HAL_ADC_Init+0x62>
 8001e58:	e0f6      	b.n	8002048 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	4a83      	ldr	r2, [pc, #524]	; (800206c <HAL_ADC_Init+0x274>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	2202      	movs	r2, #2
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d112      	bne.n	8001e9e <HAL_ADC_Init+0xa6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d009      	beq.n	8001e9a <HAL_ADC_Init+0xa2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	401a      	ands	r2, r3
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0xa6>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_Init+0xa8>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d116      	bne.n	8001ed2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2218      	movs	r2, #24
 8001eac:	4393      	bics	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	0899      	lsrs	r1, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4964      	ldr	r1, [pc, #400]	; (8002070 <HAL_ADC_Init+0x278>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7e1b      	ldrb	r3, [r3, #24]
 8001ee6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e5b      	ldrb	r3, [r3, #25]
 8001eec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e9b      	ldrb	r3, [r3, #26]
 8001ef4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ef6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d002      	beq.n	8001f06 <HAL_ADC_Init+0x10e>
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_Init+0x110>
 8001f06:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f08:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f0e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_Init+0x124>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_Init+0x126>
 8001f1c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2124      	movs	r1, #36	; 0x24
 8001f24:	5c5b      	ldrb	r3, [r3, r1]
 8001f26:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f28:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7edb      	ldrb	r3, [r3, #27]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d115      	bne.n	8001f64 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7e9b      	ldrb	r3, [r3, #26]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	0252      	lsls	r2, r2, #9
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	e00b      	b.n	8001f64 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	2220      	movs	r2, #32
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	23c2      	movs	r3, #194	; 0xc2
 8001f6a:	33ff      	adds	r3, #255	; 0xff
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d007      	beq.n	8001f80 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	055b      	lsls	r3, r3, #21
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d017      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d013      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d00f      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d00b      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d007      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d003      	beq.n	8001fd4 <HAL_ADC_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	d112      	bne.n	8001ffa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6959      	ldr	r1, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	2207      	movs	r2, #7
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_ADC_Init+0x27c>)
 8002002:	4013      	ands	r3, r2
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	429a      	cmp	r2, r3
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	2203      	movs	r2, #3
 8002016:	4393      	bics	r3, r2
 8002018:	2201      	movs	r2, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002020:	e01c      	b.n	800205c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	2212      	movs	r2, #18
 8002028:	4393      	bics	r3, r2
 800202a:	2210      	movs	r2, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	2201      	movs	r2, #1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800203e:	230f      	movs	r3, #15
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002046:	e009      	b.n	800205c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	2210      	movs	r2, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	fffffefd 	.word	0xfffffefd
 8002070:	fffe0219 	.word	0xfffe0219
 8002074:	833fffe7 	.word	0x833fffe7

08002078 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2317      	movs	r3, #23
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d15e      	bne.n	8002156 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2234      	movs	r2, #52	; 0x34
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start_DMA+0x2e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e05e      	b.n	8002164 <HAL_ADC_Start_DMA+0xec>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2234      	movs	r2, #52	; 0x34
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	7e5b      	ldrb	r3, [r3, #25]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d007      	beq.n	80020c6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80020b6:	2317      	movs	r3, #23
 80020b8:	18fc      	adds	r4, r7, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f963 	bl	8002388 <ADC_Enable>
 80020c2:	0003      	movs	r3, r0
 80020c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d146      	bne.n	800215e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_ADC_Start_DMA+0xf4>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	0052      	lsls	r2, r2, #1
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2234      	movs	r2, #52	; 0x34
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_ADC_Start_DMA+0xf8>)
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_ADC_Start_DMA+0xfc>)
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_ADC_Start_DMA+0x100>)
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	221c      	movs	r2, #28
 800210e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2110      	movs	r1, #16
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3340      	adds	r3, #64	; 0x40
 800213a:	0019      	movs	r1, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f000 fb48 	bl	80027d4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2104      	movs	r1, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	e003      	b.n	800215e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b007      	add	sp, #28
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	fffff0fe 	.word	0xfffff0fe
 8002170:	08002481 	.word	0x08002481
 8002174:	08002535 	.word	0x08002535
 8002178:	08002553 	.word	0x08002553

0800217c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	055b      	lsls	r3, r3, #21
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d011      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x46>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d00d      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x46>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d009      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x46>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d005      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x46>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d001      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x46>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2234      	movs	r2, #52	; 0x34
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x54>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0bb      	b.n	8002368 <HAL_ADC_ConfigChannel+0x1cc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2234      	movs	r2, #52	; 0x34
 80021f4:	2101      	movs	r1, #1
 80021f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d000      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x6a>
 8002204:	e09f      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a59      	ldr	r2, [pc, #356]	; (8002370 <HAL_ADC_ConfigChannel+0x1d4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x76>
 8002210:	e077      	b.n	8002302 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	055b      	lsls	r3, r3, #21
 8002230:	429a      	cmp	r2, r3
 8002232:	d037      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d033      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b02      	cmp	r3, #2
 8002242:	d02f      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	2b03      	cmp	r3, #3
 800224a:	d02b      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b04      	cmp	r3, #4
 8002252:	d027      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b05      	cmp	r3, #5
 800225a:	d023      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	2b06      	cmp	r3, #6
 8002262:	d01f      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2b07      	cmp	r3, #7
 800226a:	d01b      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2107      	movs	r1, #7
 8002278:	400b      	ands	r3, r1
 800227a:	429a      	cmp	r2, r3
 800227c:	d012      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2107      	movs	r1, #7
 800228a:	438a      	bics	r2, r1
 800228c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6959      	ldr	r1, [r3, #20]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2207      	movs	r2, #7
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d003      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x118>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d152      	bne.n	800235a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_ADC_ConfigChannel+0x1d8>)
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d102      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x12a>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	e001      	b.n	80022ca <HAL_ADC_ConfigChannel+0x12e>
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	03db      	lsls	r3, r3, #15
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_ADC_ConfigChannel+0x1d8>)
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d140      	bne.n	800235a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_ADC_ConfigChannel+0x1dc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4927      	ldr	r1, [pc, #156]	; (800237c <HAL_ADC_ConfigChannel+0x1e0>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fd ff12 	bl	8000108 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	001a      	movs	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f2:	e002      	b.n	80022fa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x158>
 8002300:	e02b      	b.n	800235a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	4099      	lsls	r1, r3
 8002310:	000b      	movs	r3, r1
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b10      	cmp	r3, #16
 8002322:	d003      	beq.n	800232c <HAL_ADC_ConfigChannel+0x190>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b11      	cmp	r3, #17
 800232a:	d116      	bne.n	800235a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_ADC_ConfigChannel+0x1d8>)
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b10      	cmp	r3, #16
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1a0>
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_ADC_ConfigChannel+0x1e4>)
 800233a:	e000      	b.n	800233e <HAL_ADC_ConfigChannel+0x1a2>
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x1e8>)
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_ADC_ConfigChannel+0x1d8>)
 8002340:	400a      	ands	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e009      	b.n	800235a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	2220      	movs	r2, #32
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2234      	movs	r2, #52	; 0x34
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}
 8002370:	00001001 	.word	0x00001001
 8002374:	40012708 	.word	0x40012708
 8002378:	20000000 	.word	0x20000000
 800237c:	000f4240 	.word	0x000f4240
 8002380:	ff7fffff 	.word	0xff7fffff
 8002384:	ffbfffff 	.word	0xffbfffff

08002388 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2203      	movs	r2, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d112      	bne.n	80023cc <ADC_Enable+0x44>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d009      	beq.n	80023c8 <ADC_Enable+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	401a      	ands	r2, r3
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d101      	bne.n	80023cc <ADC_Enable+0x44>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <ADC_Enable+0x46>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d14b      	bne.n	800246a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <ADC_Enable+0xec>)
 80023da:	4013      	ands	r3, r2
 80023dc:	d00d      	beq.n	80023fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2210      	movs	r2, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2201      	movs	r2, #1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e038      	b.n	800246c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <ADC_Enable+0xf0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	491b      	ldr	r1, [pc, #108]	; (800247c <ADC_Enable+0xf4>)
 8002410:	0018      	movs	r0, r3
 8002412:	f7fd fe79 	bl	8000108 <__udivsi3>
 8002416:	0003      	movs	r3, r0
 8002418:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800241a:	e002      	b.n	8002422 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3b01      	subs	r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002428:	f7ff fcb8 	bl	8001d9c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002430:	e014      	b.n	800245c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002432:	f7ff fcb3 	bl	8001d9c <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d90d      	bls.n	800245c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2210      	movs	r2, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	2201      	movs	r2, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	2b01      	cmp	r3, #1
 8002468:	d1e3      	bne.n	8002432 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}
 8002474:	80000017 	.word	0x80000017
 8002478:	20000000 	.word	0x20000000
 800247c:	000f4240 	.word	0x000f4240

08002480 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	2250      	movs	r2, #80	; 0x50
 8002494:	4013      	ands	r3, r2
 8002496:	d140      	bne.n	800251a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	23c0      	movs	r3, #192	; 0xc0
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	d12d      	bne.n	8002510 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d129      	bne.n	8002510 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d122      	bne.n	8002510 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2204      	movs	r2, #4
 80024d2:	4013      	ands	r3, r2
 80024d4:	d110      	bne.n	80024f8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	210c      	movs	r1, #12
 80024e2:	438a      	bics	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <ADC_DMAConvCplt+0xb0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	2201      	movs	r2, #1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
 80024f6:	e00b      	b.n	8002510 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	2220      	movs	r2, #32
 80024fe:	431a      	orrs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	2201      	movs	r2, #1
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0018      	movs	r0, r3
 8002514:	f7fe fe30 	bl	8001178 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002518:	e005      	b.n	8002526 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	0010      	movs	r0, r2
 8002524:	4798      	blx	r3
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	fffffefe 	.word	0xfffffefe

08002534 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff fe19 	bl	800217c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2204      	movs	r2, #4
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0018      	movs	r0, r3
 800257c:	f7ff fe06 	bl	800218c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b004      	add	sp, #16
 8002586:	bd80      	pop	{r7, pc}

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	0002      	movs	r2, r0
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b7f      	cmp	r3, #127	; 0x7f
 800259a:	d809      	bhi.n	80025b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	001a      	movs	r2, r3
 80025a2:	231f      	movs	r3, #31
 80025a4:	401a      	ands	r2, r3
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_EnableIRQ+0x30>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	4091      	lsls	r1, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
  }
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	0002      	movs	r2, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b7f      	cmp	r3, #127	; 0x7f
 80025d0:	d828      	bhi.n	8002624 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d2:	4a2f      	ldr	r2, [pc, #188]	; (8002690 <__NVIC_SetPriority+0xd4>)
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	33c0      	adds	r3, #192	; 0xc0
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	589b      	ldr	r3, [r3, r2]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	0011      	movs	r1, r2
 80025e8:	2203      	movs	r2, #3
 80025ea:	400a      	ands	r2, r1
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	21ff      	movs	r1, #255	; 0xff
 80025f0:	4091      	lsls	r1, r2
 80025f2:	000a      	movs	r2, r1
 80025f4:	43d2      	mvns	r2, r2
 80025f6:	401a      	ands	r2, r3
 80025f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	019b      	lsls	r3, r3, #6
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	401a      	ands	r2, r3
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	0018      	movs	r0, r3
 8002608:	2303      	movs	r3, #3
 800260a:	4003      	ands	r3, r0
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <__NVIC_SetPriority+0xd4>)
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b25b      	sxtb	r3, r3
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	430a      	orrs	r2, r1
 800261c:	33c0      	adds	r3, #192	; 0xc0
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002622:	e031      	b.n	8002688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <__NVIC_SetPriority+0xd8>)
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0019      	movs	r1, r3
 800262c:	230f      	movs	r3, #15
 800262e:	400b      	ands	r3, r1
 8002630:	3b08      	subs	r3, #8
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3306      	adds	r3, #6
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	3304      	adds	r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1dfa      	adds	r2, r7, #7
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0011      	movs	r1, r2
 8002644:	2203      	movs	r2, #3
 8002646:	400a      	ands	r2, r1
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	21ff      	movs	r1, #255	; 0xff
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	43d2      	mvns	r2, r2
 8002652:	401a      	ands	r2, r3
 8002654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	401a      	ands	r2, r3
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	2303      	movs	r3, #3
 8002666:	4003      	ands	r3, r0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <__NVIC_SetPriority+0xd8>)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	001c      	movs	r4, r3
 8002674:	230f      	movs	r3, #15
 8002676:	4023      	ands	r3, r4
 8002678:	3b08      	subs	r3, #8
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	430a      	orrs	r2, r1
 800267e:	3306      	adds	r3, #6
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	18c3      	adds	r3, r0, r3
 8002684:	3304      	adds	r3, #4
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b003      	add	sp, #12
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	045b      	lsls	r3, r3, #17
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d301      	bcc.n	80026b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ac:	2301      	movs	r3, #1
 80026ae:	e010      	b.n	80026d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <SysTick_Config+0x44>)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b8:	2301      	movs	r3, #1
 80026ba:	425b      	negs	r3, r3
 80026bc:	2103      	movs	r1, #3
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff ff7c 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x44>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x44>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b002      	add	sp, #8
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	210f      	movs	r1, #15
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	1c02      	adds	r2, r0, #0
 80026f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ff5d 	bl	80025bc <__NVIC_SetPriority>
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	0002      	movs	r2, r0
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002716:	1dfb      	adds	r3, r7, #7
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b25b      	sxtb	r3, r3
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff33 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ffaf 	bl	8002698 <SysTick_Config>
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e036      	b.n	80027c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2221      	movs	r2, #33	; 0x21
 800275e:	2102      	movs	r1, #2
 8002760:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_DMA_Init+0x8c>)
 800276e:	4013      	ands	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 f946 	bl	8002a3c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2221      	movs	r2, #33	; 0x21
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	2100      	movs	r1, #0
 80027c4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}  
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	ffffc00f 	.word	0xffffc00f

080027d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2317      	movs	r3, #23
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_DMA_Start_IT+0x24>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e04f      	b.n	8002898 <HAL_DMA_Start_IT+0xc4>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2221      	movs	r2, #33	; 0x21
 8002804:	5c9b      	ldrb	r3, [r3, r2]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d13a      	bne.n	8002882 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2221      	movs	r2, #33	; 0x21
 8002810:	2102      	movs	r1, #2
 8002812:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f8d7 	bl	80029e4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	210e      	movs	r1, #14
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e00f      	b.n	8002870 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	210a      	movs	r1, #10
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2104      	movs	r1, #4
 800286c:	438a      	bics	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e007      	b.n	8002892 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	2100      	movs	r1, #0
 8002888:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800288a:	2317      	movs	r3, #23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002892:	2317      	movs	r3, #23
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	781b      	ldrb	r3, [r3, #0]
} 
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	d024      	beq.n	8002912 <HAL_DMA_IRQHandler+0x72>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2204      	movs	r2, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	d020      	beq.n	8002912 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2220      	movs	r2, #32
 80028d8:	4013      	ands	r3, r2
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2104      	movs	r1, #4
 80028e8:	438a      	bics	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	2104      	movs	r1, #4
 80028f6:	4091      	lsls	r1, r2
 80028f8:	000a      	movs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <HAL_DMA_IRQHandler+0x66>
 8002904:	e06a      	b.n	80029dc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	0010      	movs	r0, r2
 800290e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002910:	e064      	b.n	80029dc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2202      	movs	r2, #2
 8002918:	409a      	lsls	r2, r3
 800291a:	0013      	movs	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_DMA_IRQHandler+0xda>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2220      	movs	r2, #32
 8002932:	4013      	ands	r3, r2
 8002934:	d10b      	bne.n	800294e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	210a      	movs	r1, #10
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2221      	movs	r2, #33	; 0x21
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2102      	movs	r1, #2
 8002958:	4091      	lsls	r1, r2
 800295a:	000a      	movs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	0010      	movs	r0, r2
 8002976:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002978:	e030      	b.n	80029dc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2208      	movs	r2, #8
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	d028      	beq.n	80029dc <HAL_DMA_IRQHandler+0x13c>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	d024      	beq.n	80029dc <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	210e      	movs	r1, #14
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2101      	movs	r1, #1
 80029ac:	4091      	lsls	r1, r2
 80029ae:	000a      	movs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	0010      	movs	r0, r2
 80029d8:	4798      	blx	r3
    }
   }
}  
 80029da:	e7ff      	b.n	80029dc <HAL_DMA_IRQHandler+0x13c>
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	2101      	movs	r1, #1
 80029fc:	4091      	lsls	r1, r2
 80029fe:	000a      	movs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d108      	bne.n	8002a24 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a22:	e007      	b.n	8002a34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <DMA_CalcBaseAndBitshift+0x30>)
 8002a4a:	4694      	mov	ip, r2
 8002a4c:	4463      	add	r3, ip
 8002a4e:	2114      	movs	r1, #20
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fd fb59 	bl	8000108 <__udivsi3>
 8002a56:	0003      	movs	r3, r0
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <DMA_CalcBaseAndBitshift+0x34>)
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	bffdfff8 	.word	0xbffdfff8
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e14f      	b.n	8002d24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4091      	lsls	r1, r2
 8002a8e:	000a      	movs	r2, r1
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d100      	bne.n	8002a9c <HAL_GPIO_Init+0x28>
 8002a9a:	e140      	b.n	8002d1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00b      	beq.n	8002abc <HAL_GPIO_Init+0x48>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	43da      	mvns	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	409a      	lsls	r2, r3
 8002ade:	0013      	movs	r3, r2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af2:	2201      	movs	r2, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	43da      	mvns	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	2201      	movs	r2, #1
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0xea>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d123      	bne.n	8002ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	58d3      	ldr	r3, [r2, r3]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2207      	movs	r2, #7
 8002b70:	4013      	ands	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2107      	movs	r1, #7
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	6939      	ldr	r1, [r7, #16]
 8002ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_GPIO_Init+0x174>
 8002be6:	e09a      	b.n	8002d1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be8:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x2c8>)
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_GPIO_Init+0x2c8>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_GPIO_Init+0x2c8>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x2cc>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	589b      	ldr	r3, [r3, r2]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	2390      	movs	r3, #144	; 0x90
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0x1e2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <HAL_GPIO_Init+0x2d0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00d      	beq.n	8002c52 <HAL_GPIO_Init+0x1de>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_GPIO_Init+0x2d4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x1da>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a42      	ldr	r2, [pc, #264]	; (8002d4c <HAL_GPIO_Init+0x2d8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_GPIO_Init+0x1d6>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x1e4>
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x1e4>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x1e4>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x1e4>
 8002c56:	2300      	movs	r3, #0
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x2cc>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	025b      	lsls	r3, r3, #9
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	035b      	lsls	r3, r3, #13
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	039b      	lsls	r3, r3, #14
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	40da      	lsrs	r2, r3
 8002d2c:	1e13      	subs	r3, r2, #0
 8002d2e:	d000      	beq.n	8002d32 <HAL_GPIO_Init+0x2be>
 8002d30:	e6a8      	b.n	8002a84 <HAL_GPIO_Init+0x10>
  } 
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b006      	add	sp, #24
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010000 	.word	0x40010000
 8002d44:	48000400 	.word	0x48000400
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	48000c00 	.word	0x48000c00
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e301      	b.n	800336a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <HAL_RCC_OscConfig+0x1e>
 8002d70:	e08d      	b.n	8002e8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d72:	4bc3      	ldr	r3, [pc, #780]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	220c      	movs	r2, #12
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00e      	beq.n	8002d9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d7e:	4bc0      	ldr	r3, [pc, #768]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	220c      	movs	r2, #12
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d116      	bne.n	8002db8 <HAL_RCC_OscConfig+0x64>
 8002d8a:	4bbd      	ldr	r3, [pc, #756]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	025b      	lsls	r3, r3, #9
 8002d92:	401a      	ands	r2, r3
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10d      	bne.n	8002db8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4bb8      	ldr	r3, [pc, #736]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <HAL_RCC_OscConfig+0x56>
 8002da8:	e070      	b.n	8002e8c <HAL_RCC_OscConfig+0x138>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d000      	beq.n	8002db4 <HAL_RCC_OscConfig+0x60>
 8002db2:	e06b      	b.n	8002e8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e2d8      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x7c>
 8002dc0:	4baf      	ldr	r3, [pc, #700]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4bae      	ldr	r3, [pc, #696]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	0249      	lsls	r1, r1, #9
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e02f      	b.n	8002e30 <HAL_RCC_OscConfig+0xdc>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10c      	bne.n	8002df2 <HAL_RCC_OscConfig+0x9e>
 8002dd8:	4ba9      	ldr	r3, [pc, #676]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4ba8      	ldr	r3, [pc, #672]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dde:	49a9      	ldr	r1, [pc, #676]	; (8003084 <HAL_RCC_OscConfig+0x330>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	4ba6      	ldr	r3, [pc, #664]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4ba5      	ldr	r3, [pc, #660]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dea:	49a7      	ldr	r1, [pc, #668]	; (8003088 <HAL_RCC_OscConfig+0x334>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e01e      	b.n	8002e30 <HAL_RCC_OscConfig+0xdc>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d10e      	bne.n	8002e18 <HAL_RCC_OscConfig+0xc4>
 8002dfa:	4ba1      	ldr	r3, [pc, #644]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4ba0      	ldr	r3, [pc, #640]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	02c9      	lsls	r1, r1, #11
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	4b9d      	ldr	r3, [pc, #628]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b9c      	ldr	r3, [pc, #624]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0249      	lsls	r1, r1, #9
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xdc>
 8002e18:	4b99      	ldr	r3, [pc, #612]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b98      	ldr	r3, [pc, #608]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	4999      	ldr	r1, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x330>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b96      	ldr	r3, [pc, #600]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b95      	ldr	r3, [pc, #596]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e2a:	4997      	ldr	r1, [pc, #604]	; (8003088 <HAL_RCC_OscConfig+0x334>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d014      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffb0 	bl	8001d9c <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e42:	f7fe ffab 	bl	8001d9c <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e28a      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0xee>
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe ff9b 	bl	8001d9c <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe ff96 	bl	8001d9c <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e275      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b80      	ldr	r3, [pc, #512]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	4013      	ands	r3, r2
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x118>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d100      	bne.n	8002e9a <HAL_RCC_OscConfig+0x146>
 8002e98:	e069      	b.n	8002f6e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e9a:	4b79      	ldr	r3, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d00b      	beq.n	8002ebc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ea4:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d11c      	bne.n	8002eea <HAL_RCC_OscConfig+0x196>
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	025b      	lsls	r3, r3, #9
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d116      	bne.n	8002eea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	4b70      	ldr	r3, [pc, #448]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e24b      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b6b      	ldr	r3, [pc, #428]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	22f8      	movs	r2, #248	; 0xf8
 8002ed8:	4393      	bics	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00da      	lsls	r2, r3, #3
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee8:	e041      	b.n	8002f6e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe ff4d 	bl	8001d9c <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe ff48 	bl	8001d9c <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e227      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d0f1      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	22f8      	movs	r2, #248	; 0xf8
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00da      	lsls	r2, r3, #3
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe ff28 	bl	8001d9c <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe ff23 	bl	8001d9c <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e202      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f1      	bne.n	8002f52 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	4013      	ands	r3, r2
 8002f76:	d036      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d019      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe ff06 	bl	8001d9c <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe ff01 	bl	8001d9c <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1e0      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d0f1      	beq.n	8002f96 <HAL_RCC_OscConfig+0x242>
 8002fb2:	e018      	b.n	8002fe6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe feec 	bl	8001d9c <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe fee7 	bl	8001d9c <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1c6      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1f1      	bne.n	8002fca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x29e>
 8002ff0:	e0b4      	b.n	800315c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	201f      	movs	r0, #31
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	055b      	lsls	r3, r3, #21
 8003002:	4013      	ands	r3, r2
 8003004:	d110      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0549      	lsls	r1, r1, #21
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	055b      	lsls	r3, r3, #21
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003022:	183b      	adds	r3, r7, r0
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_RCC_OscConfig+0x338>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d11a      	bne.n	800306a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCC_OscConfig+0x338>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_RCC_OscConfig+0x338>)
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	0049      	lsls	r1, r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe feab 	bl	8001d9c <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe fea6 	bl	8001d9c <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e185      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x338>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4013      	ands	r3, r2
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10e      	bne.n	8003090 <HAL_RCC_OscConfig+0x33c>
 8003072:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	4b02      	ldr	r3, [pc, #8]	; (8003080 <HAL_RCC_OscConfig+0x32c>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	621a      	str	r2, [r3, #32]
 800307e:	e035      	b.n	80030ec <HAL_RCC_OscConfig+0x398>
 8003080:	40021000 	.word	0x40021000
 8003084:	fffeffff 	.word	0xfffeffff
 8003088:	fffbffff 	.word	0xfffbffff
 800308c:	40007000 	.word	0x40007000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x35e>
 8003098:	4bb6      	ldr	r3, [pc, #728]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	4bb5      	ldr	r3, [pc, #724]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800309e:	2101      	movs	r1, #1
 80030a0:	438a      	bics	r2, r1
 80030a2:	621a      	str	r2, [r3, #32]
 80030a4:	4bb3      	ldr	r3, [pc, #716]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	4bb2      	ldr	r3, [pc, #712]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030aa:	2104      	movs	r1, #4
 80030ac:	438a      	bics	r2, r1
 80030ae:	621a      	str	r2, [r3, #32]
 80030b0:	e01c      	b.n	80030ec <HAL_RCC_OscConfig+0x398>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x380>
 80030ba:	4bae      	ldr	r3, [pc, #696]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	4bad      	ldr	r3, [pc, #692]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030c0:	2104      	movs	r1, #4
 80030c2:	430a      	orrs	r2, r1
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	4bab      	ldr	r3, [pc, #684]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	4baa      	ldr	r3, [pc, #680]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030cc:	2101      	movs	r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	621a      	str	r2, [r3, #32]
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0x398>
 80030d4:	4ba7      	ldr	r3, [pc, #668]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	4ba6      	ldr	r3, [pc, #664]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030da:	2101      	movs	r1, #1
 80030dc:	438a      	bics	r2, r1
 80030de:	621a      	str	r2, [r3, #32]
 80030e0:	4ba4      	ldr	r3, [pc, #656]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80030e6:	2104      	movs	r1, #4
 80030e8:	438a      	bics	r2, r1
 80030ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d014      	beq.n	800311e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7fe fe52 	bl	8001d9c <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	e009      	b.n	8003112 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fe4d 	bl	8001d9c <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	4a9b      	ldr	r2, [pc, #620]	; (8003378 <HAL_RCC_OscConfig+0x624>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e12b      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	4b98      	ldr	r3, [pc, #608]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x3aa>
 800311c:	e013      	b.n	8003146 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe fe3d 	bl	8001d9c <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	e009      	b.n	800313c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fe38 	bl	8001d9c <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	4a91      	ldr	r2, [pc, #580]	; (8003378 <HAL_RCC_OscConfig+0x624>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e116      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	4b8d      	ldr	r3, [pc, #564]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	4b87      	ldr	r3, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003156:	4989      	ldr	r1, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0x628>)
 8003158:	400a      	ands	r2, r1
 800315a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	4013      	ands	r3, r2
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d12a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003174:	2104      	movs	r1, #4
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800317c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003180:	2101      	movs	r1, #1
 8003182:	430a      	orrs	r2, r1
 8003184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fe09 	bl	8001d9c <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003190:	f7fe fe04 	bl	8001d9c <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0e3      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031a2:	4b74      	ldr	r3, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d0f1      	beq.n	8003190 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031ac:	4b71      	ldr	r3, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	22f8      	movs	r2, #248	; 0xf8
 80031b2:	4393      	bics	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	00da      	lsls	r2, r3, #3
 80031bc:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
 80031c2:	e034      	b.n	800322e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	3305      	adds	r3, #5
 80031ca:	d111      	bne.n	80031f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031cc:	4b69      	ldr	r3, [pc, #420]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d0:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031d2:	2104      	movs	r1, #4
 80031d4:	438a      	bics	r2, r1
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	22f8      	movs	r2, #248	; 0xf8
 80031de:	4393      	bics	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	00da      	lsls	r2, r3, #3
 80031e8:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	e01e      	b.n	800322e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031f0:	4b60      	ldr	r3, [pc, #384]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031f6:	2104      	movs	r1, #4
 80031f8:	430a      	orrs	r2, r1
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031fc:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003202:	2101      	movs	r1, #1
 8003204:	438a      	bics	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe fdc8 	bl	8001d9c <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003212:	f7fe fdc3 	bl	8001d9c <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0a2      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	2202      	movs	r2, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d1f1      	bne.n	8003212 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d100      	bne.n	8003238 <HAL_RCC_OscConfig+0x4e4>
 8003236:	e097      	b.n	8003368 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003238:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	220c      	movs	r2, #12
 800323e:	4013      	ands	r3, r2
 8003240:	2b08      	cmp	r3, #8
 8003242:	d100      	bne.n	8003246 <HAL_RCC_OscConfig+0x4f2>
 8003244:	e06b      	b.n	800331e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d14c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b49      	ldr	r3, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b48      	ldr	r3, [pc, #288]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003254:	494a      	ldr	r1, [pc, #296]	; (8003380 <HAL_RCC_OscConfig+0x62c>)
 8003256:	400a      	ands	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fd9f 	bl	8001d9c <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe fd9a 	bl	8001d9c <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e079      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003276:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	049b      	lsls	r3, r3, #18
 800327e:	4013      	ands	r3, r2
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	220f      	movs	r2, #15
 8003288:	4393      	bics	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003292:	430a      	orrs	r2, r1
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <HAL_RCC_OscConfig+0x630>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	431a      	orrs	r2, r3
 80032aa:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0449      	lsls	r1, r1, #17
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fd6d 	bl	8001d9c <HAL_GetTick>
 80032c2:	0003      	movs	r3, r0
 80032c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fd68 	bl	8001d9c <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e047      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	049b      	lsls	r3, r3, #18
 80032e2:	4013      	ands	r3, r2
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x574>
 80032e6:	e03f      	b.n	8003368 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b21      	ldr	r3, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 80032ee:	4924      	ldr	r1, [pc, #144]	; (8003380 <HAL_RCC_OscConfig+0x62c>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fd52 	bl	8001d9c <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fd4d 	bl	8001d9c <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e02c      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	049b      	lsls	r3, r3, #18
 8003318:	4013      	ands	r3, r2
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x5aa>
 800331c:	e024      	b.n	8003368 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e01f      	b.n	800336a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCC_OscConfig+0x620>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	025b      	lsls	r3, r3, #9
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	429a      	cmp	r2, r3
 8003344:	d10e      	bne.n	8003364 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	220f      	movs	r2, #15
 800334a:	401a      	ands	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	23f0      	movs	r3, #240	; 0xf0
 8003358:	039b      	lsls	r3, r3, #14
 800335a:	401a      	ands	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b008      	add	sp, #32
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	40021000 	.word	0x40021000
 8003378:	00001388 	.word	0x00001388
 800337c:	efffffff 	.word	0xefffffff
 8003380:	feffffff 	.word	0xfeffffff
 8003384:	ffc2ffff 	.word	0xffc2ffff

08003388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b3      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b5b      	ldr	r3, [pc, #364]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d911      	bls.n	80033ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	4393      	bics	r3, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e09a      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	4013      	ands	r3, r2
 80033d6:	d015      	beq.n	8003404 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2204      	movs	r2, #4
 80033de:	4013      	ands	r3, r2
 80033e0:	d006      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033e2:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80033e8:	21e0      	movs	r1, #224	; 0xe0
 80033ea:	00c9      	lsls	r1, r1, #3
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	22f0      	movs	r2, #240	; 0xf0
 80033f6:	4393      	bics	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d040      	beq.n	8003490 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	4013      	ands	r3, r2
 8003420:	d114      	bne.n	800344c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06e      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	4013      	ands	r3, r2
 8003438:	d108      	bne.n	800344c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e062      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e05b      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	4393      	bics	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fe fc9c 	bl	8001d9c <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	e009      	b.n	800347e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7fe fc97 	bl	8001d9c <HAL_GetTick>
 800346e:	0002      	movs	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_RCC_ClockConfig+0x18c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e042      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	220c      	movs	r2, #12
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1ec      	bne.n	800346a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d211      	bcs.n	80034c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	4393      	bics	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x184>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e020      	b.n	8003504 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a11      	ldr	r2, [pc, #68]	; (8003518 <HAL_RCC_ClockConfig+0x190>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034e0:	f000 f820 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034e4:	0001      	movs	r1, r0
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x188>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	220f      	movs	r2, #15
 80034ee:	4013      	ands	r3, r2
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x194>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	000a      	movs	r2, r1
 80034f6:	40da      	lsrs	r2, r3
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x198>)
 80034fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fe fc07 	bl	8001d10 <HAL_InitTick>
  
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40022000 	.word	0x40022000
 8003510:	40021000 	.word	0x40021000
 8003514:	00001388 	.word	0x00001388
 8003518:	fffff8ff 	.word	0xfffff8ff
 800351c:	08004db8 	.word	0x08004db8
 8003520:	20000000 	.word	0x20000000

08003524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b08f      	sub	sp, #60	; 0x3c
 8003528:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800352a:	2314      	movs	r3, #20
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003530:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003532:	c313      	stmia	r3!, {r0, r1, r4}
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800353c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800353e:	c313      	stmia	r3!, {r0, r1, r4}
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
 800354c:	2300      	movs	r3, #0
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	220c      	movs	r2, #12
 8003562:	4013      	ands	r3, r2
 8003564:	2b04      	cmp	r3, #4
 8003566:	d002      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x4a>
 8003568:	2b08      	cmp	r3, #8
 800356a:	d003      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x50>
 800356c:	e02d      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003572:	e02d      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	220f      	movs	r2, #15
 800357a:	4013      	ands	r3, r2
 800357c:	2214      	movs	r2, #20
 800357e:	18ba      	adds	r2, r7, r2
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	220f      	movs	r2, #15
 800358a:	4013      	ands	r3, r2
 800358c:	1d3a      	adds	r2, r7, #4
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	025b      	lsls	r3, r3, #9
 8003598:	4013      	ands	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800359c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359e:	4812      	ldr	r0, [pc, #72]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a0:	f7fc fdb2 	bl	8000108 <__udivsi3>
 80035a4:	0003      	movs	r3, r0
 80035a6:	001a      	movs	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	4353      	muls	r3, r2
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	e009      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b2:	000a      	movs	r2, r1
 80035b4:	0152      	lsls	r2, r2, #5
 80035b6:	1a52      	subs	r2, r2, r1
 80035b8:	0193      	lsls	r3, r2, #6
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	185b      	adds	r3, r3, r1
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035c8:	e002      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b00f      	add	sp, #60	; 0x3c
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	08004d18 	.word	0x08004d18
 80035e0:	08004d28 	.word	0x08004d28
 80035e4:	40021000 	.word	0x40021000
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <HAL_RCC_GetHCLKFreq+0x10>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000000 	.word	0x20000000

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003604:	f7ff fff2 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003608:	0001      	movs	r1, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	2207      	movs	r2, #7
 8003612:	4013      	ands	r3, r2
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	40d9      	lsrs	r1, r3
 800361a:	000b      	movs	r3, r1
}    
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	40021000 	.word	0x40021000
 8003628:	08004dc8 	.word	0x08004dc8

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	025b      	lsls	r3, r3, #9
 8003644:	4013      	ands	r3, r2
 8003646:	d100      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003648:	e08e      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2017      	movs	r0, #23
 800364c:	183b      	adds	r3, r7, r0
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	055b      	lsls	r3, r3, #21
 800365a:	4013      	ands	r3, r2
 800365c:	d110      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	0549      	lsls	r1, r1, #21
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	055b      	lsls	r3, r3, #21
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	183b      	adds	r3, r7, r0
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b4c      	ldr	r3, [pc, #304]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d11a      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368c:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	0049      	lsls	r1, r1, #1
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fb7f 	bl	8001d9c <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a2:	e008      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a4:	f7fe fb7a 	bl	8001d9c <HAL_GetTick>
 80036a8:	0002      	movs	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e077      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	23c0      	movs	r3, #192	; 0xc0
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d034      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	23c0      	movs	r3, #192	; 0xc0
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d02c      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a33      	ldr	r2, [pc, #204]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ee:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	0249      	lsls	r1, r1, #9
 80036f8:	430a      	orrs	r2, r1
 80036fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003702:	492e      	ldr	r1, [pc, #184]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003704:	400a      	ands	r2, r1
 8003706:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fb41 	bl	8001d9c <HAL_GetTick>
 800371a:	0003      	movs	r3, r0
 800371c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fe fb3c 	bl	8001d9c <HAL_GetTick>
 8003724:	0002      	movs	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e038      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2202      	movs	r2, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d0f0      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800374e:	430a      	orrs	r2, r1
 8003750:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003752:	2317      	movs	r3, #23
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003762:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003764:	400a      	ands	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	2203      	movs	r2, #3
 8003778:	4393      	bics	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003782:	430a      	orrs	r2, r1
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	2210      	movs	r2, #16
 8003796:	4393      	bics	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b006      	add	sp, #24
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40007000 	.word	0x40007000
 80037b8:	fffffcff 	.word	0xfffffcff
 80037bc:	fffeffff 	.word	0xfffeffff
 80037c0:	00001388 	.word	0x00001388
 80037c4:	efffffff 	.word	0xefffffff

080037c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e042      	b.n	8003860 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223d      	movs	r2, #61	; 0x3d
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	223c      	movs	r2, #60	; 0x3c
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fe f88d 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223d      	movs	r2, #61	; 0x3d
 80037fa:	2102      	movs	r1, #2
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f000 fb29 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2246      	movs	r2, #70	; 0x46
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223e      	movs	r2, #62	; 0x3e
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223f      	movs	r2, #63	; 0x3f
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2241      	movs	r2, #65	; 0x41
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2242      	movs	r2, #66	; 0x42
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2243      	movs	r2, #67	; 0x43
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2244      	movs	r2, #68	; 0x44
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2245      	movs	r2, #69	; 0x45
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223d      	movs	r2, #61	; 0x3d
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e042      	b.n	8003900 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	223d      	movs	r2, #61	; 0x3d
 800387e:	5c9b      	ldrb	r3, [r3, r2]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	223c      	movs	r2, #60	; 0x3c
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd ffd5 	bl	8001840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223d      	movs	r2, #61	; 0x3d
 800389a:	2102      	movs	r1, #2
 800389c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	0019      	movs	r1, r3
 80038a8:	0010      	movs	r0, r2
 80038aa:	f000 fad9 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2246      	movs	r2, #70	; 0x46
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223e      	movs	r2, #62	; 0x3e
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	223f      	movs	r2, #63	; 0x3f
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2241      	movs	r2, #65	; 0x41
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2242      	movs	r2, #66	; 0x42
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2243      	movs	r2, #67	; 0x43
 80038e2:	2101      	movs	r1, #1
 80038e4:	5499      	strb	r1, [r3, r2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2244      	movs	r2, #68	; 0x44
 80038ea:	2101      	movs	r1, #1
 80038ec:	5499      	strb	r1, [r3, r2]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2245      	movs	r2, #69	; 0x45
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	223d      	movs	r2, #61	; 0x3d
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <HAL_TIM_PWM_Start+0x22>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	223e      	movs	r2, #62	; 0x3e
 800391c:	5c9b      	ldrb	r3, [r3, r2]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	4193      	sbcs	r3, r2
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e01f      	b.n	800396a <HAL_TIM_PWM_Start+0x62>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d108      	bne.n	8003942 <HAL_TIM_PWM_Start+0x3a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	223f      	movs	r2, #63	; 0x3f
 8003934:	5c9b      	ldrb	r3, [r3, r2]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	4193      	sbcs	r3, r2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e013      	b.n	800396a <HAL_TIM_PWM_Start+0x62>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d108      	bne.n	800395a <HAL_TIM_PWM_Start+0x52>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	5c9b      	ldrb	r3, [r3, r2]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	4193      	sbcs	r3, r2
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e007      	b.n	800396a <HAL_TIM_PWM_Start+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2241      	movs	r2, #65	; 0x41
 800395e:	5c9b      	ldrb	r3, [r3, r2]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	4193      	sbcs	r3, r2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06e      	b.n	8003a50 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start+0x7a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223e      	movs	r2, #62	; 0x3e
 800397c:	2102      	movs	r1, #2
 800397e:	5499      	strb	r1, [r3, r2]
 8003980:	e013      	b.n	80039aa <HAL_TIM_PWM_Start+0xa2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start+0x8a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	223f      	movs	r2, #63	; 0x3f
 800398c:	2102      	movs	r1, #2
 800398e:	5499      	strb	r1, [r3, r2]
 8003990:	e00b      	b.n	80039aa <HAL_TIM_PWM_Start+0xa2>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x9a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	2102      	movs	r1, #2
 800399e:	5499      	strb	r1, [r3, r2]
 80039a0:	e003      	b.n	80039aa <HAL_TIM_PWM_Start+0xa2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2241      	movs	r2, #65	; 0x41
 80039a6:	2102      	movs	r1, #2
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fcc6 	bl	8004344 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <HAL_TIM_PWM_Start+0x150>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xd8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_TIM_PWM_Start+0x154>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xd8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <HAL_TIM_PWM_Start+0x158>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xd8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_TIM_PWM_Start+0x15c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_PWM_Start+0xdc>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_PWM_Start+0xde>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	0209      	lsls	r1, r1, #8
 80039f8:	430a      	orrs	r2, r1
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <HAL_TIM_PWM_Start+0x150>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x112>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_TIM_PWM_Start+0x160>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x112>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_TIM_PWM_Start+0x154>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d111      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2207      	movs	r2, #7
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d010      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	e007      	b.n	8003a4e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40000400 	.word	0x40000400

08003a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d124      	bne.n	8003acc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d11d      	bne.n	8003acc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2203      	movs	r2, #3
 8003a96:	4252      	negs	r2, r2
 8003a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f9be 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e007      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 f9b1 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 f9bd 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d125      	bne.n	8003b26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11e      	bne.n	8003b26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2205      	movs	r2, #5
 8003aee:	4252      	negs	r2, r2
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	23c0      	movs	r3, #192	; 0xc0
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4013      	ands	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 f991 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f984 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f990 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d124      	bne.n	8003b7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d11d      	bne.n	8003b7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2209      	movs	r2, #9
 8003b48:	4252      	negs	r2, r2
 8003b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f965 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f958 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 f964 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2210      	movs	r2, #16
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d125      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2210      	movs	r2, #16
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d11e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2211      	movs	r2, #17
 8003ba0:	4252      	negs	r2, r2
 8003ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	23c0      	movs	r3, #192	; 0xc0
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 f938 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e007      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f92b 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 f937 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2201      	movs	r2, #1
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10f      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d108      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	4252      	negs	r2, r2
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f905 	bl	8003e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d10f      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d108      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2281      	movs	r2, #129	; 0x81
 8003c28:	4252      	negs	r2, r2
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 fd00 	bl	8004634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2240      	movs	r2, #64	; 0x40
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10f      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d108      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2241      	movs	r2, #65	; 0x41
 8003c56:	4252      	negs	r2, r2
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 f8f7 	bl	8003e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d10f      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d108      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	4252      	negs	r2, r2
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fcca 	bl	8004624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	223c      	movs	r2, #60	; 0x3c
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0a7      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	223c      	movs	r2, #60	; 0x3c
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d100      	bne.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003cc0:	e076      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x118>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d900      	bls.n	8003cca <HAL_TIM_PWM_ConfigChannel+0x32>
 8003cc8:	e095      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d04e      	beq.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0xd6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d900      	bls.n	8003cd8 <HAL_TIM_PWM_ConfigChannel+0x40>
 8003cd6:	e08e      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d021      	beq.n	8003d28 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003ce4:	e087      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f92c 	bl	8003f4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2108      	movs	r1, #8
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2104      	movs	r1, #4
 8003d10:	438a      	bics	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6999      	ldr	r1, [r3, #24]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	619a      	str	r2, [r3, #24]
      break;
 8003d26:	e067      	b.n	8003df8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 f993 	bl	800405c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	0109      	lsls	r1, r1, #4
 8003d44:	430a      	orrs	r2, r1
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	492e      	ldr	r1, [pc, #184]	; (8003e0c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e044      	b.n	8003df8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f9f4 	bl	8004164 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2108      	movs	r1, #8
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2104      	movs	r1, #4
 8003d98:	438a      	bics	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69d9      	ldr	r1, [r3, #28]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	61da      	str	r2, [r3, #28]
      break;
 8003dae:	e023      	b.n	8003df8 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fa59 	bl	8004270 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0109      	lsls	r1, r1, #4
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	490c      	ldr	r1, [pc, #48]	; (8003e0c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69d9      	ldr	r1, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	61da      	str	r2, [r3, #28]
      break;
 8003df4:	e000      	b.n	8003df8 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8003df6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	223c      	movs	r2, #60	; 0x3c
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	fffffbff 	.word	0xfffffbff

08003e10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0xd0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x20>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <TIM_Base_SetConfig+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2270      	movs	r2, #112	; 0x70
 8003e84:	4393      	bics	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <TIM_Base_SetConfig+0xd0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a25      	ldr	r2, [pc, #148]	; (8003f34 <TIM_Base_SetConfig+0xd4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <TIM_Base_SetConfig+0xd8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <TIM_Base_SetConfig+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_Base_SetConfig+0xe0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_Base_SetConfig+0xe4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <TIM_Base_SetConfig+0xe8>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	4393      	bics	r3, r2
 8003eda:	001a      	movs	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <TIM_Base_SetConfig+0xd0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_Base_SetConfig+0xba>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <TIM_Base_SetConfig+0xdc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_Base_SetConfig+0xba>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <TIM_Base_SetConfig+0xe0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0xba>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <TIM_Base_SetConfig+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d103      	bne.n	8003f22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	615a      	str	r2, [r3, #20]
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b004      	add	sp, #16
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40002000 	.word	0x40002000
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800
 8003f48:	fffffcff 	.word	0xfffffcff

08003f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	001a      	movs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2270      	movs	r2, #112	; 0x70
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2203      	movs	r2, #3
 8003f82:	4393      	bics	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2202      	movs	r2, #2
 8003f94:	4393      	bics	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_OC1_SetConfig+0xf8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_OC1_SetConfig+0x76>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_OC1_SetConfig+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_OC1_SetConfig+0x76>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_OC1_SetConfig+0x100>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC1_SetConfig+0x76>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_OC1_SetConfig+0x104>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10c      	bne.n	8003fdc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4393      	bics	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	4393      	bics	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a19      	ldr	r2, [pc, #100]	; (8004044 <TIM_OC1_SetConfig+0xf8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_OC1_SetConfig+0xb0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <TIM_OC1_SetConfig+0xfc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC1_SetConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC1_SetConfig+0x100>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC1_SetConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <TIM_OC1_SetConfig+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <TIM_OC1_SetConfig+0x108>)
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4a14      	ldr	r2, [pc, #80]	; (8004058 <TIM_OC1_SetConfig+0x10c>)
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b006      	add	sp, #24
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800
 8004054:	fffffeff 	.word	0xfffffeff
 8004058:	fffffdff 	.word	0xfffffdff

0800405c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	2210      	movs	r2, #16
 800406c:	4393      	bics	r3, r2
 800406e:	001a      	movs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a2e      	ldr	r2, [pc, #184]	; (8004144 <TIM_OC2_SetConfig+0xe8>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <TIM_OC2_SetConfig+0xec>)
 8004092:	4013      	ands	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2220      	movs	r2, #32
 80040a6:	4393      	bics	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <TIM_OC2_SetConfig+0xf0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10d      	bne.n	80040da <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	4393      	bics	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	4393      	bics	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <TIM_OC2_SetConfig+0xf0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_OC2_SetConfig+0x9e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <TIM_OC2_SetConfig+0xf4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_OC2_SetConfig+0x9e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <TIM_OC2_SetConfig+0xf8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_OC2_SetConfig+0x9e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <TIM_OC2_SetConfig+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d113      	bne.n	8004122 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <TIM_OC2_SetConfig+0x100>)
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4a16      	ldr	r2, [pc, #88]	; (8004160 <TIM_OC2_SetConfig+0x104>)
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b006      	add	sp, #24
 8004142:	bd80      	pop	{r7, pc}
 8004144:	ffff8fff 	.word	0xffff8fff
 8004148:	fffffcff 	.word	0xfffffcff
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	fffffbff 	.word	0xfffffbff
 8004160:	fffff7ff 	.word	0xfffff7ff

08004164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a35      	ldr	r2, [pc, #212]	; (8004248 <TIM_OC3_SetConfig+0xe4>)
 8004174:	401a      	ands	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2270      	movs	r2, #112	; 0x70
 8004190:	4393      	bics	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2203      	movs	r2, #3
 8004198:	4393      	bics	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <TIM_OC3_SetConfig+0xe8>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <TIM_OC3_SetConfig+0xec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <TIM_OC3_SetConfig+0xf0>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <TIM_OC3_SetConfig+0xf4>)
 80041da:	4013      	ands	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <TIM_OC3_SetConfig+0xec>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_OC3_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_OC3_SetConfig+0xf8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC3_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <TIM_OC3_SetConfig+0xfc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <TIM_OC3_SetConfig+0x100>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_OC3_SetConfig+0x104>)
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_OC3_SetConfig+0x108>)
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b006      	add	sp, #24
 8004246:	bd80      	pop	{r7, pc}
 8004248:	fffffeff 	.word	0xfffffeff
 800424c:	fffffdff 	.word	0xfffffdff
 8004250:	40012c00 	.word	0x40012c00
 8004254:	fffff7ff 	.word	0xfffff7ff
 8004258:	fffffbff 	.word	0xfffffbff
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800
 8004268:	ffffefff 	.word	0xffffefff
 800426c:	ffffdfff 	.word	0xffffdfff

08004270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_OC4_SetConfig+0xb0>)
 8004280:	401a      	ands	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <TIM_OC4_SetConfig+0xb4>)
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <TIM_OC4_SetConfig+0xb8>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <TIM_OC4_SetConfig+0xbc>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a19      	ldr	r2, [pc, #100]	; (8004330 <TIM_OC4_SetConfig+0xc0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC4_SetConfig+0x78>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a18      	ldr	r2, [pc, #96]	; (8004334 <TIM_OC4_SetConfig+0xc4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC4_SetConfig+0x78>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <TIM_OC4_SetConfig+0xc8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC4_SetConfig+0x78>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <TIM_OC4_SetConfig+0xcc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <TIM_OC4_SetConfig+0xd0>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b006      	add	sp, #24
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	ffffefff 	.word	0xffffefff
 8004324:	ffff8fff 	.word	0xffff8fff
 8004328:	fffffcff 	.word	0xfffffcff
 800432c:	ffffdfff 	.word	0xffffdfff
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	ffffbfff 	.word	0xffffbfff

08004344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	221f      	movs	r2, #31
 8004354:	4013      	ands	r3, r2
 8004356:	2201      	movs	r2, #1
 8004358:	409a      	lsls	r2, r3
 800435a:	0013      	movs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	43d2      	mvns	r2, r2
 8004366:	401a      	ands	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	211f      	movs	r1, #31
 8004374:	400b      	ands	r3, r1
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4099      	lsls	r1, r3
 800437a:	000b      	movs	r3, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b006      	add	sp, #24
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <HAL_TIMEx_PWMN_Start+0x22>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2242      	movs	r2, #66	; 0x42
 80043a0:	5c9b      	ldrb	r3, [r3, r2]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	4193      	sbcs	r3, r2
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e01f      	b.n	80043ee <HAL_TIMEx_PWMN_Start+0x62>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d108      	bne.n	80043c6 <HAL_TIMEx_PWMN_Start+0x3a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2243      	movs	r2, #67	; 0x43
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	4193      	sbcs	r3, r2
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e013      	b.n	80043ee <HAL_TIMEx_PWMN_Start+0x62>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d108      	bne.n	80043de <HAL_TIMEx_PWMN_Start+0x52>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2244      	movs	r2, #68	; 0x44
 80043d0:	5c9b      	ldrb	r3, [r3, r2]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	4193      	sbcs	r3, r2
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e007      	b.n	80043ee <HAL_TIMEx_PWMN_Start+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2245      	movs	r2, #69	; 0x45
 80043e2:	5c9b      	ldrb	r3, [r3, r2]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	4193      	sbcs	r3, r2
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e055      	b.n	80044a2 <HAL_TIMEx_PWMN_Start+0x116>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_TIMEx_PWMN_Start+0x7a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2242      	movs	r2, #66	; 0x42
 8004400:	2102      	movs	r1, #2
 8004402:	5499      	strb	r1, [r3, r2]
 8004404:	e013      	b.n	800442e <HAL_TIMEx_PWMN_Start+0xa2>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d104      	bne.n	8004416 <HAL_TIMEx_PWMN_Start+0x8a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2243      	movs	r2, #67	; 0x43
 8004410:	2102      	movs	r1, #2
 8004412:	5499      	strb	r1, [r3, r2]
 8004414:	e00b      	b.n	800442e <HAL_TIMEx_PWMN_Start+0xa2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d104      	bne.n	8004426 <HAL_TIMEx_PWMN_Start+0x9a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2244      	movs	r2, #68	; 0x44
 8004420:	2102      	movs	r1, #2
 8004422:	5499      	strb	r1, [r3, r2]
 8004424:	e003      	b.n	800442e <HAL_TIMEx_PWMN_Start+0xa2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2245      	movs	r2, #69	; 0x45
 800442a:	2102      	movs	r1, #2
 800442c:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	2204      	movs	r2, #4
 8004436:	0018      	movs	r0, r3
 8004438:	f000 f904 	bl	8004644 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	0209      	lsls	r1, r1, #8
 800444a:	430a      	orrs	r2, r1
 800444c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_TIMEx_PWMN_Start+0x120>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIMEx_PWMN_Start+0xe0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <HAL_TIMEx_PWMN_Start+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIMEx_PWMN_Start+0xe0>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_TIMEx_PWMN_Start+0x128>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2207      	movs	r2, #7
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIMEx_PWMN_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	430a      	orrs	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIMEx_PWMN_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40014000 	.word	0x40014000

080044b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	223c      	movs	r2, #60	; 0x3c
 80044c6:	5c9b      	ldrb	r3, [r3, r2]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e041      	b.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	223c      	movs	r2, #60	; 0x3c
 80044d4:	2101      	movs	r1, #1
 80044d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	223d      	movs	r2, #61	; 0x3d
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2270      	movs	r2, #112	; 0x70
 80044f4:	4393      	bics	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10c      	bne.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	4393      	bics	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4313      	orrs	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223d      	movs	r2, #61	; 0x3d
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	223c      	movs	r2, #60	; 0x3c
 800454e:	2100      	movs	r1, #0
 8004550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223c      	movs	r2, #60	; 0x3c
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004580:	2302      	movs	r3, #2
 8004582:	e03e      	b.n	8004602 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	223c      	movs	r2, #60	; 0x3c
 8004588:	2101      	movs	r1, #1
 800458a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	22ff      	movs	r2, #255	; 0xff
 8004590:	4393      	bics	r3, r2
 8004592:	001a      	movs	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80045a0:	401a      	ands	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80045ae:	401a      	ands	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80045bc:	401a      	ands	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80045ca:	401a      	ands	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80045d8:	401a      	ands	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80045e6:	401a      	ands	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	223c      	movs	r2, #60	; 0x3c
 80045fc:	2100      	movs	r1, #0
 80045fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b004      	add	sp, #16
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	fffffcff 	.word	0xfffffcff
 8004610:	fffffbff 	.word	0xfffffbff
 8004614:	fffff7ff 	.word	0xfffff7ff
 8004618:	ffffefff 	.word	0xffffefff
 800461c:	ffffdfff 	.word	0xffffdfff
 8004620:	ffffbfff 	.word	0xffffbfff

08004624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	221f      	movs	r2, #31
 8004654:	4013      	ands	r3, r2
 8004656:	2204      	movs	r2, #4
 8004658:	409a      	lsls	r2, r3
 800465a:	0013      	movs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	43d2      	mvns	r2, r2
 8004666:	401a      	ands	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	211f      	movs	r1, #31
 8004674:	400b      	ands	r3, r1
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4099      	lsls	r1, r3
 800467a:	000b      	movs	r3, r1
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b006      	add	sp, #24
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e044      	b.n	8004728 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2274      	movs	r2, #116	; 0x74
 80046aa:	2100      	movs	r1, #0
 80046ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fd fa7d 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	; 0x24
 80046ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2101      	movs	r1, #1
 80046c8:	438a      	bics	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f830 	bl	8004734 <UART_SetConfig>
 80046d4:	0003      	movs	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e024      	b.n	8004728 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f963 	bl	80049b4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	490d      	ldr	r1, [pc, #52]	; (8004730 <HAL_UART_Init+0xa4>)
 80046fa:	400a      	ands	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2108      	movs	r1, #8
 800470a:	438a      	bics	r2, r1
 800470c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2101      	movs	r1, #1
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 f9fb 	bl	8004b1c <UART_CheckIdleState>
 8004726:	0003      	movs	r3, r0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fffff7ff 	.word	0xfffff7ff

08004734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800473c:	231e      	movs	r3, #30
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a8d      	ldr	r2, [pc, #564]	; (8004998 <UART_SetConfig+0x264>)
 8004764:	4013      	ands	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a88      	ldr	r2, [pc, #544]	; (800499c <UART_SetConfig+0x268>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a7f      	ldr	r2, [pc, #508]	; (80049a0 <UART_SetConfig+0x26c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7b      	ldr	r2, [pc, #492]	; (80049a4 <UART_SetConfig+0x270>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d127      	bne.n	800480a <UART_SetConfig+0xd6>
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <UART_SetConfig+0x274>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	2203      	movs	r2, #3
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d00d      	beq.n	80047e2 <UART_SetConfig+0xae>
 80047c6:	d81b      	bhi.n	8004800 <UART_SetConfig+0xcc>
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d014      	beq.n	80047f6 <UART_SetConfig+0xc2>
 80047cc:	d818      	bhi.n	8004800 <UART_SetConfig+0xcc>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <UART_SetConfig+0xa4>
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d00a      	beq.n	80047ec <UART_SetConfig+0xb8>
 80047d6:	e013      	b.n	8004800 <UART_SetConfig+0xcc>
 80047d8:	231f      	movs	r3, #31
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e021      	b.n	8004826 <UART_SetConfig+0xf2>
 80047e2:	231f      	movs	r3, #31
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e01c      	b.n	8004826 <UART_SetConfig+0xf2>
 80047ec:	231f      	movs	r3, #31
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	2204      	movs	r2, #4
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e017      	b.n	8004826 <UART_SetConfig+0xf2>
 80047f6:	231f      	movs	r3, #31
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2208      	movs	r2, #8
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e012      	b.n	8004826 <UART_SetConfig+0xf2>
 8004800:	231f      	movs	r3, #31
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	2210      	movs	r2, #16
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0xf2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a67      	ldr	r2, [pc, #412]	; (80049ac <UART_SetConfig+0x278>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d104      	bne.n	800481e <UART_SetConfig+0xea>
 8004814:	231f      	movs	r3, #31
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e003      	b.n	8004826 <UART_SetConfig+0xf2>
 800481e:	231f      	movs	r3, #31
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	2210      	movs	r2, #16
 8004824:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	429a      	cmp	r2, r3
 8004830:	d15d      	bne.n	80048ee <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004832:	231f      	movs	r3, #31
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d015      	beq.n	8004868 <UART_SetConfig+0x134>
 800483c:	dc18      	bgt.n	8004870 <UART_SetConfig+0x13c>
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00d      	beq.n	800485e <UART_SetConfig+0x12a>
 8004842:	dc15      	bgt.n	8004870 <UART_SetConfig+0x13c>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <UART_SetConfig+0x11a>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0x124>
 800484c:	e010      	b.n	8004870 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7fe fed7 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8004852:	0003      	movs	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]
        break;
 8004856:	e012      	b.n	800487e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b55      	ldr	r3, [pc, #340]	; (80049b0 <UART_SetConfig+0x27c>)
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e00f      	b.n	800487e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe fe61 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 8004862:	0003      	movs	r3, r0
 8004864:	61bb      	str	r3, [r7, #24]
        break;
 8004866:	e00a      	b.n	800487e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	61bb      	str	r3, [r7, #24]
        break;
 800486e:	e006      	b.n	800487e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004874:	231e      	movs	r3, #30
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
        break;
 800487c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d100      	bne.n	8004886 <UART_SetConfig+0x152>
 8004884:	e07b      	b.n	800497e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	005a      	lsls	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	18d2      	adds	r2, r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	0019      	movs	r1, r3
 8004898:	0010      	movs	r0, r2
 800489a:	f7fb fc35 	bl	8000108 <__udivsi3>
 800489e:	0003      	movs	r3, r0
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	d91c      	bls.n	80048e4 <UART_SetConfig+0x1b0>
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	025b      	lsls	r3, r3, #9
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d217      	bcs.n	80048e4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	200e      	movs	r0, #14
 80048ba:	183b      	adds	r3, r7, r0
 80048bc:	210f      	movs	r1, #15
 80048be:	438a      	bics	r2, r1
 80048c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2207      	movs	r2, #7
 80048ca:	4013      	ands	r3, r2
 80048cc:	b299      	uxth	r1, r3
 80048ce:	183b      	adds	r3, r7, r0
 80048d0:	183a      	adds	r2, r7, r0
 80048d2:	8812      	ldrh	r2, [r2, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	183a      	adds	r2, r7, r0
 80048de:	8812      	ldrh	r2, [r2, #0]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e04c      	b.n	800497e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80048e4:	231e      	movs	r3, #30
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e047      	b.n	800497e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ee:	231f      	movs	r3, #31
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d015      	beq.n	8004924 <UART_SetConfig+0x1f0>
 80048f8:	dc18      	bgt.n	800492c <UART_SetConfig+0x1f8>
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00d      	beq.n	800491a <UART_SetConfig+0x1e6>
 80048fe:	dc15      	bgt.n	800492c <UART_SetConfig+0x1f8>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <UART_SetConfig+0x1d6>
 8004904:	2b02      	cmp	r3, #2
 8004906:	d005      	beq.n	8004914 <UART_SetConfig+0x1e0>
 8004908:	e010      	b.n	800492c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490a:	f7fe fe79 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 800490e:	0003      	movs	r3, r0
 8004910:	61bb      	str	r3, [r7, #24]
        break;
 8004912:	e012      	b.n	800493a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <UART_SetConfig+0x27c>)
 8004916:	61bb      	str	r3, [r7, #24]
        break;
 8004918:	e00f      	b.n	800493a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fe03 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 800491e:	0003      	movs	r3, r0
 8004920:	61bb      	str	r3, [r7, #24]
        break;
 8004922:	e00a      	b.n	800493a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	61bb      	str	r3, [r7, #24]
        break;
 800492a:	e006      	b.n	800493a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004930:	231e      	movs	r3, #30
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
        break;
 8004938:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01e      	beq.n	800497e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085a      	lsrs	r2, r3, #1
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	18d2      	adds	r2, r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	0019      	movs	r1, r3
 8004950:	0010      	movs	r0, r2
 8004952:	f7fb fbd9 	bl	8000108 <__udivsi3>
 8004956:	0003      	movs	r3, r0
 8004958:	b29b      	uxth	r3, r3
 800495a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d909      	bls.n	8004976 <UART_SetConfig+0x242>
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	025b      	lsls	r3, r3, #9
 8004968:	429a      	cmp	r2, r3
 800496a:	d204      	bcs.n	8004976 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e003      	b.n	800497e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004976:	231e      	movs	r3, #30
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800498a:	231e      	movs	r3, #30
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	781b      	ldrb	r3, [r3, #0]
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b008      	add	sp, #32
 8004996:	bd80      	pop	{r7, pc}
 8004998:	ffff69f3 	.word	0xffff69f3
 800499c:	ffffcfff 	.word	0xffffcfff
 80049a0:	fffff4ff 	.word	0xfffff4ff
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40004400 	.word	0x40004400
 80049b0:	007a1200 	.word	0x007a1200

080049b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2201      	movs	r2, #1
 80049c2:	4013      	ands	r3, r2
 80049c4:	d00b      	beq.n	80049de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a4a      	ldr	r2, [pc, #296]	; (8004af8 <UART_AdvFeatureConfig+0x144>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	0019      	movs	r1, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2202      	movs	r2, #2
 80049e4:	4013      	ands	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4a43      	ldr	r2, [pc, #268]	; (8004afc <UART_AdvFeatureConfig+0x148>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2204      	movs	r2, #4
 8004a06:	4013      	ands	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a3b      	ldr	r2, [pc, #236]	; (8004b00 <UART_AdvFeatureConfig+0x14c>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	0019      	movs	r1, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2208      	movs	r2, #8
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <UART_AdvFeatureConfig+0x150>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	2210      	movs	r2, #16
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <UART_AdvFeatureConfig+0x154>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <UART_AdvFeatureConfig+0x158>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2240      	movs	r2, #64	; 0x40
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d01d      	beq.n	8004ace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <UART_AdvFeatureConfig+0x15c>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	035b      	lsls	r3, r3, #13
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d10b      	bne.n	8004ace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <UART_AdvFeatureConfig+0x160>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <UART_AdvFeatureConfig+0x164>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	fffdffff 	.word	0xfffdffff
 8004afc:	fffeffff 	.word	0xfffeffff
 8004b00:	fffbffff 	.word	0xfffbffff
 8004b04:	ffff7fff 	.word	0xffff7fff
 8004b08:	ffffefff 	.word	0xffffefff
 8004b0c:	ffffdfff 	.word	0xffffdfff
 8004b10:	ffefffff 	.word	0xffefffff
 8004b14:	ff9fffff 	.word	0xff9fffff
 8004b18:	fff7ffff 	.word	0xfff7ffff

08004b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b2c:	f7fd f936 	bl	8001d9c <HAL_GetTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d10c      	bne.n	8004b5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	0391      	lsls	r1, r2, #14
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <UART_CheckIdleState+0x8c>)
 8004b4c:	9200      	str	r2, [sp, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f000 f82c 	bl	8004bac <UART_WaitOnFlagUntilTimeout>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d001      	beq.n	8004b5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e021      	b.n	8004ba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2204      	movs	r2, #4
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d10c      	bne.n	8004b84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2280      	movs	r2, #128	; 0x80
 8004b6e:	03d1      	lsls	r1, r2, #15
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <UART_CheckIdleState+0x8c>)
 8004b74:	9200      	str	r2, [sp, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f000 f818 	bl	8004bac <UART_WaitOnFlagUntilTimeout>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d001      	beq.n	8004b84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e00d      	b.n	8004ba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2274      	movs	r2, #116	; 0x74
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b004      	add	sp, #16
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	01ffffff 	.word	0x01ffffff

08004bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	1dfb      	adds	r3, r7, #7
 8004bba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbc:	e05e      	b.n	8004c7c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	d05b      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fd f8ea 	bl	8001d9c <HAL_GetTick>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11b      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	492f      	ldr	r1, [pc, #188]	; (8004ca4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004be6:	400a      	ands	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	438a      	bics	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2274      	movs	r2, #116	; 0x74
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e044      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d02e      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	401a      	ands	r2, r3
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d124      	bne.n	8004c7c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	0112      	lsls	r2, r2, #4
 8004c3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4917      	ldr	r1, [pc, #92]	; (8004ca4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004c48:	400a      	ands	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2101      	movs	r1, #1
 8004c58:	438a      	bics	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2274      	movs	r2, #116	; 0x74
 8004c74:	2100      	movs	r1, #0
 8004c76:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e00f      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	425a      	negs	r2, r3
 8004c8c:	4153      	adcs	r3, r2
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	001a      	movs	r2, r3
 8004c92:	1dfb      	adds	r3, r7, #7
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d091      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b004      	add	sp, #16
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	fffffe5f 	.word	0xfffffe5f

08004ca8 <__libc_init_array>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	2600      	movs	r6, #0
 8004cac:	4d0c      	ldr	r5, [pc, #48]	; (8004ce0 <__libc_init_array+0x38>)
 8004cae:	4c0d      	ldr	r4, [pc, #52]	; (8004ce4 <__libc_init_array+0x3c>)
 8004cb0:	1b64      	subs	r4, r4, r5
 8004cb2:	10a4      	asrs	r4, r4, #2
 8004cb4:	42a6      	cmp	r6, r4
 8004cb6:	d109      	bne.n	8004ccc <__libc_init_array+0x24>
 8004cb8:	2600      	movs	r6, #0
 8004cba:	f000 f821 	bl	8004d00 <_init>
 8004cbe:	4d0a      	ldr	r5, [pc, #40]	; (8004ce8 <__libc_init_array+0x40>)
 8004cc0:	4c0a      	ldr	r4, [pc, #40]	; (8004cec <__libc_init_array+0x44>)
 8004cc2:	1b64      	subs	r4, r4, r5
 8004cc4:	10a4      	asrs	r4, r4, #2
 8004cc6:	42a6      	cmp	r6, r4
 8004cc8:	d105      	bne.n	8004cd6 <__libc_init_array+0x2e>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	00b3      	lsls	r3, r6, #2
 8004cce:	58eb      	ldr	r3, [r5, r3]
 8004cd0:	4798      	blx	r3
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7ee      	b.n	8004cb4 <__libc_init_array+0xc>
 8004cd6:	00b3      	lsls	r3, r6, #2
 8004cd8:	58eb      	ldr	r3, [r5, r3]
 8004cda:	4798      	blx	r3
 8004cdc:	3601      	adds	r6, #1
 8004cde:	e7f2      	b.n	8004cc6 <__libc_init_array+0x1e>
 8004ce0:	08004dd0 	.word	0x08004dd0
 8004ce4:	08004dd0 	.word	0x08004dd0
 8004ce8:	08004dd0 	.word	0x08004dd0
 8004cec:	08004dd4 	.word	0x08004dd4

08004cf0 <memset>:
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	1882      	adds	r2, r0, r2
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	7019      	strb	r1, [r3, #0]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
